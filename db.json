{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/FCqaxjMVcAE3TXs.jpg","path":"medias/banner/FCqaxjMVcAE3TXs.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/FEPYYqWaIAAaUbH.jpg","path":"medias/banner/FEPYYqWaIAAaUbH.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/FEaEqvqUYAgYaHe.jpg","path":"medias/banner/FEaEqvqUYAgYaHe.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404/index.md","hash":"1b6e96a8780930f59166d2df15beba94e45f6b5b","modified":1655385409904},{"_id":"source/_posts/CentOS8 , 配置ubuntu正向代理.md","hash":"e847d3740a274d0d7550b4b042a939e65316d1c3","modified":1655385409950},{"_id":"source/_posts/Java 多线程.md","hash":"94f6e2872bc6edbd5b05cb9d6241df8f99946ae2","modified":1655385409942},{"_id":"source/_posts/Java 异常处理.md","hash":"858e8380b566f03e7a8ec48e5c2cd162a8342418","modified":1655385410556},{"_id":"source/_posts/Java 类成员的四种访问权限.md","hash":"36872f3088b23a3cba6291f882fd661c6c1a4f1a","modified":1655385409948},{"_id":"source/_posts/MySQL笔记.md","hash":"a6fae669de4884dbc5f8abeb132e961f48a30d42","modified":1655385409940},{"_id":"source/_posts/SQL 中使用 boolean logic 代替 case.md","hash":"009e09b03b7f61cd212000bf079c4341b40a696c","modified":1655385409951},{"_id":"source/_posts/SpringBoot 3.0预览.md","hash":"8859cd15c827c1d45fdd3cc9be25b2982f458cba","modified":1655385409948},{"_id":"source/_posts/修图&嵌字笔记.md","hash":"9263b37f03fc829901d4c6365a349eb5cde6a436","modified":1655385409974},{"_id":"source/_posts/flask 跨域资源允许.md","hash":"c61f9806ae57bb8cc9d481387319ffb343437c8f","modified":1655385409944},{"_id":"source/_posts/写一个Java注解与 AOP.md","hash":"55118814ef64d5a4ae5f59b5d862b53248f6be81","modified":1655385409945},{"_id":"source/categories/index.md","hash":"f86a7bb327bd796f03b597f9c8130929694e2e4b","modified":1655385409923},{"_id":"source/contact/index.md","hash":"fe4201e2c8ba769e9beb4551963fbc863b64d5ef","modified":1655385409952},{"_id":"source/about/index.md","hash":"6c4eeb8f317cf6a58181bb28088ab1cf43ea8972","modified":1655385409906},{"_id":"source/friends/index.md","hash":"7ffc23138b4d1593b818d7738a3e36a544f6cebe","modified":1655385409973},{"_id":"source/tags/index.md","hash":"2504f9ed9e981287d61d9aa97006cf2af4b61bf3","modified":1655385409905},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1655385410552},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1655385410539},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1655385410549},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1655385410555},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"8e704c7b5937b6aed6ac4a987b15156acfa63b78","modified":1655385410551},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1655385410548},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"5b75b057c8d445fc9457cc7255b6e288cf8bd4da","modified":1655385410546},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1655385410545},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1655385410544},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1655385410239},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1655385410150},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1655385410245},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1655385410269},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1655385410267},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"1ec09c3f99f3254fcf101c570f397f6720b7155b","modified":1655385410263},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1655385410149},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1655385410265},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"c1a4f1ae1cd515e305031091be53b0f6087852f3","modified":1655385410268},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1655385410240},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"8e70ef228d017b007cabce66e6bc39487037b94e","modified":1655385410242},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"922b32d758d5cdf8fbed9e67a197be0075706d3c","modified":1655385410266},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"aae2bac175b0dc44717e1e7d27123ecf9a27b832","modified":1655385410243},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1655385410236},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"eb2f510fcb4201c2198326adc897c448d2ae8980","modified":1655385410244},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1655385410178},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1655385410237},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1655385410204},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1655385410208},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1655385410217},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1655385410209},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1655385410233},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1655385410205},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"4fcfa5a9ac32382453be9c97e448c60463ec66d3","modified":1655385410205},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"bf8caf85f3f03167f2cf431f4b04195f83de8d05","modified":1655385410206},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1655385410181},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"7c87e0eb2cf662c2a9b9b0e1e5d228b0fac2622e","modified":1655385410182},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1655385410183},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1655385410213},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1655385410203},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1655385410234},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"1984987a97b6e096860572e14a139d5dc1c54979","modified":1655385410179},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1655385410184},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1655385410214},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1655385410184},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1655385410210},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1655385410210},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1655385410211},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1655385410185},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1655385410212},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d32b8533e88782d9dc12992a1189c7d7e4489825","modified":1655385410231},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"a10df7abc9bcac399bcabf727c8491294430dfb0","modified":1655385410215},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1655385410207},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1655385410215},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1655385410235},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1655385410186},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1655385410187},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1655385410180},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1655385410216},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1655385410202},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1655385410200},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1655385410202},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"ff8b299df312416ae03d6969b44bdc1394a68717","modified":1655385410169},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1655385410176},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1655385410177},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1655385410151},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1655385410152},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"976270ee3cdb6c2416ac28ead1bd5e0f6f8f7ece","modified":1655385410168},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1655385410172},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1655385410173},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1655385410170},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1655385410175},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1655385410174},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1655385410171},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1655385410172},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1655385410175},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1655385410152},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1655385410298},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1655385410293},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1655385410297},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1655385410297},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1655385410296},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1655385410299},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1655385410294},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1655385410275},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1655385410271},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1655385410277},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1655385410271},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1655385410369},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1655385410373},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1655385410371},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1655385410370},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1655385410301},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1655385410300},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1655385410488},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1655385410489},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1655385410490},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1655385410487},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1655385410486},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1655385410483},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1655385410484},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1655385410485},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1655385410384},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1655385410480},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1655385410482},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1655385410308},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1655385410400},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1655385410492},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1655385410404},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1655385410403},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1655385410538},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1655385410518},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1655385410405},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1655385410479},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1655385410491},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1655385410345},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1655385410346},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1655385410327},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1655385410340},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1655385410344},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1655385410342},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1655385410326},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1655385410324},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1655385410323},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1655385410302},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1655385410517},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1655385410347},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1655385410347},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1655385410357},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1650467052150},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1650467052151},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1650467052155},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1650467052156},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1655385410502},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1655385410516},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1650467052186},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1650467052187},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1650467052187},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1650467052188},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1650467052188},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1650467052189},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1655385410501},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1655385410305},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1650467052238},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1655385410306},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1650467052240},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1650467052240},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1655385410303},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1655385410304},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1636700410000},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1636700410000},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1636700410000},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1650507853070},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1650507853070},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1655385410482},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1655385410399},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1655385410323},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1655385410363},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1655385410375},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1655385410378},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1650467052149},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1650467052155},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1655385410275},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1650507853074},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1650507853069},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1650507853072},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1650507853073},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1655385410382},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"91deac5cc7c7dacab3128c8c799511457445157f","modified":1655385410499},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1655385410496},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1655385410360},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1655385410367},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1650467052148},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1650507853071},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1650467052154},{"_id":"themes/hexo-theme-matery/source/medias/banner/FEaEqvqUYAgYaHe.jpg","hash":"67474c1f0b6e73ba99a19debfa8a71249e565668","modified":1637201332000},{"_id":"themes/hexo-theme-matery/source/medias/banner/FEPYYqWaIAAaUbH.jpg","hash":"413fd94a2cb75af54dfa21d3e11067e8bf301982","modified":1637059612000},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1655385410356},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1637589566000},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1655385410397},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1655385410320},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1655385410477},{"_id":"themes/hexo-theme-matery/source/medias/banner/FCqaxjMVcAE3TXs.jpg","hash":"9fe97c94338748afae868f5f04c12d45900ff4dd","modified":1635304585000},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1c1cb63e679633795bf65d56e5af38ebba474b12","modified":1635219876000},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1655385410461},{"_id":"public/404/index.html","hash":"841d0b7e26a393241fe67cab416af5fce507b4ce","modified":1655734590545},{"_id":"public/categories/index.html","hash":"ccb997fe871c49e85254564155d58513f6e0e1a6","modified":1655734590545},{"_id":"public/contact/index.html","hash":"fc3fff79e0055fff5bd2b7a1cbf115c8c368ea3e","modified":1655734590545},{"_id":"public/about/index.html","hash":"5004c6d90660ef28801fee3e3815ca78c94c73bf","modified":1655734590545},{"_id":"public/tags/index.html","hash":"340885268b277d97150fb2e1f74a1e0dd782894a","modified":1655734590545},{"_id":"public/friends/index.html","hash":"9ae71ab89d4d1717d33477a4ecc44dcec46e2ae9","modified":1655734590545},{"_id":"public/2022/04/20/flask 跨域资源允许/index.html","hash":"a2d29076dafc41d1a13e63d98277c7243fcec7ef","modified":1655734590545},{"_id":"public/2022/03/02/SpringBoot 3.0预览/index.html","hash":"fd3137e9f4cd2861cd69a456c43e88f14d7488a6","modified":1655734590545},{"_id":"public/2022/02/27/CentOS8 , 配置ubuntu正向代理/index.html","hash":"2f75508aeb6b472b6f59350910686180a17512b6","modified":1655385576310},{"_id":"public/2021/10/31/写一个Java注解与 AOP/index.html","hash":"b579e8171f131a89d618c626f09415c1341c49e5","modified":1655734590545},{"_id":"public/2021/10/30/SQL 中使用 boolean logic 代替 case/index.html","hash":"d0a79f2feb0d5be7114ef0b3389235e166ebc6ae","modified":1655734590545},{"_id":"public/2021/10/18/Java 异常处理/index.html","hash":"273861ef7fb382d19a47036f7020eb97b0b9b402","modified":1655734590545},{"_id":"public/2021/10/13/Java 多线程/index.html","hash":"534a750717b29986f9961ee7fcadb3bfd0614de2","modified":1655734590545},{"_id":"public/2021/09/21/Java 类成员的四种访问权限/index.html","hash":"ee2237eb17315bbfd42b211b8a5d642192ce2c95","modified":1655734590545},{"_id":"public/2021/09/10/MySQL笔记/index.html","hash":"1b50c4fbb46202ed8735fbcd17e29d2d30cc46e3","modified":1655734590545},{"_id":"public/2021/09/04/修图&嵌字笔记/index.html","hash":"f24cab0f1301474cea5b311c1b0718792cc150ad","modified":1655734590545},{"_id":"public/archives/index.html","hash":"a8422e4ebec4f78ec784d021889b486c9b94f188","modified":1655734590545},{"_id":"public/archives/2021/index.html","hash":"8f383d8c3812fedbf392ce413adcf83fa4aadacb","modified":1655734590545},{"_id":"public/archives/2021/09/index.html","hash":"04331502cde9afc92d684c3f0214a8e07059f108","modified":1655734590545},{"_id":"public/archives/2021/10/index.html","hash":"c6b95c81de5365decefd142a7bc9d3e4485e8483","modified":1655734590545},{"_id":"public/archives/2022/index.html","hash":"e21b5840bb82b3af542d14afa95490f939c62ac3","modified":1655734590545},{"_id":"public/archives/2022/02/index.html","hash":"e03225e9652c8e0b76093cbcb47f1aceda754770","modified":1655734590545},{"_id":"public/index.html","hash":"a176935324994695bc18de11564f02d4fb566f1d","modified":1655734590545},{"_id":"public/archives/2022/03/index.html","hash":"6da9f178c8f01e103f5dc5018a6c77bbc6537508","modified":1655734590545},{"_id":"public/archives/2022/04/index.html","hash":"4750a63e74143db7859944779deffee47a0f7c2d","modified":1655734590545},{"_id":"public/tags/linux/index.html","hash":"9e6674258a01fbefd4fb9d9e692fb1becf3c73c0","modified":1655734590545},{"_id":"public/tags/nginx/index.html","hash":"592952d61ea4b775ca1b75b50b835558093c186e","modified":1655734590545},{"_id":"public/tags/centos/index.html","hash":"f865f7f64577bd1079f1d70421698dbe12d706d2","modified":1655734590545},{"_id":"public/tags/proxy/index.html","hash":"6c9197aa6219165eb199f9c8cf8512d7f44910e3","modified":1655734590545},{"_id":"public/tags/java/index.html","hash":"7fd02b8faccb609d2cfa4f1020f48abffab4674a","modified":1655734590545},{"_id":"public/tags/thread/index.html","hash":"e3ef70a650a6649a80b3ee6d353b9a5915664a24","modified":1655734590545},{"_id":"public/tags/error/index.html","hash":"07bc3d68f06c8849b6d6c00ce05a54b7f7ec644c","modified":1655734590545},{"_id":"public/tags/mysql/index.html","hash":"fab47707d889a5eb881792ef7aa3e15c58a19990","modified":1655734590545},{"_id":"public/tags/sql/index.html","hash":"a671db82761c02f877bb7ba7acf076a92d6a5f13","modified":1655734590545},{"_id":"public/tags/springboot/index.html","hash":"d3a3099938f3dca41cda6af53dc1e275bc2ac55c","modified":1655734590545},{"_id":"public/tags/spring/index.html","hash":"6e96c5725f07f9153d1f5b77efe5f173fd4ddaaa","modified":1655734590545},{"_id":"public/tags/ps/index.html","hash":"1c1c69488ac180d16dc8b08f752758eca4964d89","modified":1655734590545},{"_id":"public/tags/memo/index.html","hash":"08c4f3e841e815e3972fa804a9de61abea655051","modified":1655734590545},{"_id":"public/tags/python/index.html","hash":"3b3308460bcd4305e2bd4af5773e30e30375e3a7","modified":1655734590545},{"_id":"public/tags/flask/index.html","hash":"b35e4de3dcbb8484df8f8631b1eabd8e5fe75ade","modified":1655734590545},{"_id":"public/tags/http/index.html","hash":"8dac67821dc342b83335eadb963bdcd7c585d250","modified":1655734590545},{"_id":"public/tags/cors/index.html","hash":"19de82408b76fb5c346f42f6a31087a45e069cc7","modified":1655734590545},{"_id":"public/tags/reflect/index.html","hash":"2aca1ce73d0b0a3cf76c9496283e1c8bfb8246c0","modified":1655734590545},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1655385576310},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1655385576310},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1655385576310},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1655385576310},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1655385576310},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1655385576310},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1655385576310},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1655385576310},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1655385576310},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1655385576310},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1655385576310},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1655385576310},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1655385576310},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1655385576310},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1655385576310},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1655385576310},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1655385576310},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1655385576310},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1655385576310},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1655385576310},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1655385576310},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1655385576310},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1655385576310},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1655385576310},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1655385576310},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1655385576310},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1655385576310},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1655385576310},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1655385576310},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1655385576310},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1655385576310},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1655385576310},{"_id":"public/medias/avatar.jpg","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1655385576310},{"_id":"public/favicon.png","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1655385576310},{"_id":"public/medias/logo.png","hash":"91fa0348cec368bb05ebdb5187d4245a2e051cb0","modified":1655385576310},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1655385576310},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1655385576310},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1655385576310},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1655385576310},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1655385576310},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1655385576310},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1655385576310},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1655385576310},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1655385576310},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1655385576310},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1655385576310},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1655385576310},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1655385576310},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1655385576310},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1655385576310},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1655385576310},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1655385576310},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1655385576310},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1655385576310},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1655385576310},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1655385576310},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1655385576310},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1655385576310},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1655385576310},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1655385576310},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1655385576310},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1655385576310},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1655385576310},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1655385576310},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1655385576310},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1655385576310},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1655385576310},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1655385576310},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1655385576310},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1655385576310},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1655385576310},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1655385576310},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1655385576310},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1655385576310},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1655385576310},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1655385576310},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1655385576310},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1655385576310},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1655385576310},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1655385576310},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1655385576310},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1655385576310},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1655385576310},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1655385576310},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1655385576310},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1655385576310},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1655385576310},{"_id":"public/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1655385576310},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1655385576310},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1655385576310},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1655385576310},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1655385576310},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1655385576310},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1655385576310},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1655385576310},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1655385576310},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1655385576310},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1655385576310},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1655385576310},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1655385576310},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1655385576310},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1655385576310},{"_id":"public/libs/materialize/materialize.min.css","hash":"91deac5cc7c7dacab3128c8c799511457445157f","modified":1655385576310},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1655385576310},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1655385576310},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1655385576310},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1655385576310},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1655385576310},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1655385576310},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1655385576310},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1655385576310},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1655385576310},{"_id":"public/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1655385576310},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1655385576310},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1655385576310},{"_id":"public/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1655385576310},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1655385576310},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1655385576310},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1655385576310},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1655385576310},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1655385576310},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1655385576310},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1655385576310},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1655385576310},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1655385576310},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1655385576310},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1655385576310},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1655385576310},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1655385576310},{"_id":"public/medias/banner/FEaEqvqUYAgYaHe.jpg","hash":"67474c1f0b6e73ba99a19debfa8a71249e565668","modified":1655385576310},{"_id":"public/medias/banner/FEPYYqWaIAAaUbH.jpg","hash":"413fd94a2cb75af54dfa21d3e11067e8bf301982","modified":1655385576310},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1655385576310},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1655385576310},{"_id":"public/medias/banner/FCqaxjMVcAE3TXs.jpg","hash":"9fe97c94338748afae868f5f04c12d45900ff4dd","modified":1655385576310},{"_id":"public/medias/banner/0.jpg","hash":"1c1cb63e679633795bf65d56e5af38ebba474b12","modified":1655385576310},{"_id":"source/_posts/CentOS8 , 配置nginx正向代理.md","hash":"e847d3740a274d0d7550b4b042a939e65316d1c3","modified":1655385409950},{"_id":"source/_posts/docker-compose 部署 SpringCloud services + nacos +mysql8.md","hash":"516ebcaf9d299ae350aa3bcdc77e04cd07b0ffeb","modified":1655734484681},{"_id":"public/2022/06/20/docker-compose 部署 SpringCloud services + nacos +mysql8/index.html","hash":"6aadaa11acf28a0436a7ce9a8ede7ba0196ff68d","modified":1655734590545},{"_id":"public/2022/02/27/CentOS8 , 配置nginx正向代理/index.html","hash":"e4544531eda4110c3592e5f214bfa0009b92bd45","modified":1655734590545},{"_id":"public/archives/2022/06/index.html","hash":"d5531c064aa0586304ef521c1e2bead13bf75f25","modified":1655734590545},{"_id":"public/tags/docker/index.html","hash":"4b3b675cc82f3d3427eeb9a93c5ee6d4fed75644","modified":1655734590545},{"_id":"public/tags/springcloud/index.html","hash":"7892a542148f7cebb8ccb3d50552de6069eadd38","modified":1655734590545},{"_id":"public/tags/nacos/index.html","hash":"aa8beaa35b71661c44e3ea66f44170d466e6c597","modified":1655734590545},{"_id":"public/tags/mysql8/index.html","hash":"f6a220bc85bac2ff6069164a973b83e7f83638c5","modified":1655734590545}],"Category":[],"Data":[],"Page":[{"title":"404","date":"2021-11-22T15:11:35.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2021-11-22 23:11:35\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n","updated":"2022-06-16T13:16:49.904Z","path":"404/index.html","comments":1,"_id":"cl4h1txok0000osu7gmmne1wz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2021-11-22T14:06:50.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-11-22 22:06:50\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-06-16T13:16:49.923Z","path":"categories/index.html","comments":1,"_id":"cl4h1txoo0002osu7cjfd8v7q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"contact","date":"2021-11-22T14:44:50.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-11-22 22:44:50\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2022-06-16T13:16:49.952Z","path":"contact/index.html","comments":1,"_id":"cl4h1txor0005osu78gsof8va","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2021-11-22T14:44:20.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-11-22 22:44:20\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-06-16T13:16:49.906Z","path":"about/index.html","comments":1,"_id":"cl4h1txos0007osu7hglg2381","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-11-22T14:43:24.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-11-22 22:43:24\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-06-16T13:16:49.905Z","path":"tags/index.html","comments":1,"_id":"cl4h1txot0009osu75bt41bi0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2021-11-22T15:11:03.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2021-11-22 23:11:03\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-06-16T13:16:49.973Z","path":"friends/index.html","comments":1,"_id":"cl4h1txou000cosu72w1oecbd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java 多线程","date":"2021-10-12T16:00:00.000Z","_content":"\n# 多线程\n\n## 简介\n\n- 多线程实际上并不是同时执行, 多个任务在极短时间内交替执行, 由于 CPU 运算速度很快, 所以看起来像是同时执行\n\n线程与进程: \n\n- 在计算机中的一个任务称为一个进程, 一个进程包含一至多个线程\n- 运行程序时, 可以使用: 多进程+单线程, 单进程+多线程, 多进程+多线程\n- 进程的特点: 创建时的开销更大, 不同进程间数据通信慢, 稳定性更高(一个进程奔溃不影响其他进程运行)\n\n多线程: 一个 Java 程序其实是一个 JVM 进程, JVM 进程中有一个 main 主线程, 我们在 main 中执行各种方法, 启动多个线程\n\n## 创建一个新线程\n\n创建一个新线程, 需要实例化一个`Thread`实例, 调用它的`start()`方法, 之后`start()`方法会自动调用这个实例的`run()`方法, 启动线程\n\n三种创建线程的方法: `implements Runnable` , `extends Thread` , 使用Callable和Future\n\n- 区别: 实现 Runnable 与 Callable 接口后可以继承其他类, 继承 Thread 类在一些操作上更简单\n\n`extends Thread`示例: \n\n```java\nclass horseRun extends Thread {\n  \n  public static final int LENGTH = 188;\n  \n  char c;\n  \n  horseRun(char c) {\n        this.c = c;\n  }\n  \n  @Override\n    public void run() {\n        for (int i = 0; i < LENGTH; i ++) {\n            System.out.print(c);\n        }\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Thread horse1 = new horseRun('%');\n        Thread horse2 = new horseRun('$');\n        horse1.start();\n        horse2.start();\n\n    }\n}\n```\n\n输出: `$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$%%%%`\n\n- 每次的结果都不一样, 两个线程同时开始运行, 由**操作系统进行调度, 程序无法决定**\n\n尝试修改进程的优先级: `horse1.setPriority(4); horse2.setPriority(6);`\n输出结果: `$$$$$%%%$$$$$$$%%%%%%$$$$$$$$%%%%$$$$$$$%%%$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`\n\n- 操作系统可能对高优先级线程调度更频繁, 但是并不能保证线程一定会先执行","source":"_posts/Java 多线程.md","raw":"---\ntitle: Java 多线程\ndate: 2021-10-13\ntags: [java, thread]\n---\n\n# 多线程\n\n## 简介\n\n- 多线程实际上并不是同时执行, 多个任务在极短时间内交替执行, 由于 CPU 运算速度很快, 所以看起来像是同时执行\n\n线程与进程: \n\n- 在计算机中的一个任务称为一个进程, 一个进程包含一至多个线程\n- 运行程序时, 可以使用: 多进程+单线程, 单进程+多线程, 多进程+多线程\n- 进程的特点: 创建时的开销更大, 不同进程间数据通信慢, 稳定性更高(一个进程奔溃不影响其他进程运行)\n\n多线程: 一个 Java 程序其实是一个 JVM 进程, JVM 进程中有一个 main 主线程, 我们在 main 中执行各种方法, 启动多个线程\n\n## 创建一个新线程\n\n创建一个新线程, 需要实例化一个`Thread`实例, 调用它的`start()`方法, 之后`start()`方法会自动调用这个实例的`run()`方法, 启动线程\n\n三种创建线程的方法: `implements Runnable` , `extends Thread` , 使用Callable和Future\n\n- 区别: 实现 Runnable 与 Callable 接口后可以继承其他类, 继承 Thread 类在一些操作上更简单\n\n`extends Thread`示例: \n\n```java\nclass horseRun extends Thread {\n  \n  public static final int LENGTH = 188;\n  \n  char c;\n  \n  horseRun(char c) {\n        this.c = c;\n  }\n  \n  @Override\n    public void run() {\n        for (int i = 0; i < LENGTH; i ++) {\n            System.out.print(c);\n        }\n    }\n}\n\npublic class Main {\n\n    public static void main(String[] args) {\n\n        Thread horse1 = new horseRun('%');\n        Thread horse2 = new horseRun('$');\n        horse1.start();\n        horse2.start();\n\n    }\n}\n```\n\n输出: `$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$%%%%`\n\n- 每次的结果都不一样, 两个线程同时开始运行, 由**操作系统进行调度, 程序无法决定**\n\n尝试修改进程的优先级: `horse1.setPriority(4); horse2.setPriority(6);`\n输出结果: `$$$$$%%%$$$$$$$%%%%%%$$$$$$$$%%%%$$$$$$$%%%$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%`\n\n- 操作系统可能对高优先级线程调度更频繁, 但是并不能保证线程一定会先执行","slug":"Java 多线程","published":1,"updated":"2022-06-16T13:16:49.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txop0003osu78jbb1fzq","content":"<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>多线程实际上并不是同时执行, 多个任务在极短时间内交替执行, 由于 CPU 运算速度很快, 所以看起来像是同时执行</li>\n</ul>\n<p>线程与进程: </p>\n<ul>\n<li>在计算机中的一个任务称为一个进程, 一个进程包含一至多个线程</li>\n<li>运行程序时, 可以使用: 多进程+单线程, 单进程+多线程, 多进程+多线程</li>\n<li>进程的特点: 创建时的开销更大, 不同进程间数据通信慢, 稳定性更高(一个进程奔溃不影响其他进程运行)</li>\n</ul>\n<p>多线程: 一个 Java 程序其实是一个 JVM 进程, JVM 进程中有一个 main 主线程, 我们在 main 中执行各种方法, 启动多个线程</p>\n<h2 id=\"创建一个新线程\"><a href=\"#创建一个新线程\" class=\"headerlink\" title=\"创建一个新线程\"></a>创建一个新线程</h2><p>创建一个新线程, 需要实例化一个<code>Thread</code>实例, 调用它的<code>start()</code>方法, 之后<code>start()</code>方法会自动调用这个实例的<code>run()</code>方法, 启动线程</p>\n<p>三种创建线程的方法: <code>implements Runnable</code> , <code>extends Thread</code> , 使用Callable和Future</p>\n<ul>\n<li>区别: 实现 Runnable 与 Callable 接口后可以继承其他类, 继承 Thread 类在一些操作上更简单</li>\n</ul>\n<p><code>extends Thread</code>示例: </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> horseRun <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">188</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LENGTH<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Thread</span> horse1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> horse2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token char\">'$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        horse1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        horse2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出: <code>$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$%%%%</code></p>\n<ul>\n<li>每次的结果都不一样, 两个线程同时开始运行, 由<strong>操作系统进行调度, 程序无法决定</strong></li>\n</ul>\n<p>尝试修改进程的优先级: <code>horse1.setPriority(4); horse2.setPriority(6);</code><br>输出结果: <code>$$$$$%%%$$$$$$$%%%%%%$$$$$$$$%%%%$$$$$$$%%%$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</code></p>\n<ul>\n<li>操作系统可能对高优先级线程调度更频繁, 但是并不能保证线程一定会先执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>多线程实际上并不是同时执行, 多个任务在极短时间内交替执行, 由于 CPU 运算速度很快, 所以看起来像是同时执行</li>\n</ul>\n<p>线程与进程: </p>\n<ul>\n<li>在计算机中的一个任务称为一个进程, 一个进程包含一至多个线程</li>\n<li>运行程序时, 可以使用: 多进程+单线程, 单进程+多线程, 多进程+多线程</li>\n<li>进程的特点: 创建时的开销更大, 不同进程间数据通信慢, 稳定性更高(一个进程奔溃不影响其他进程运行)</li>\n</ul>\n<p>多线程: 一个 Java 程序其实是一个 JVM 进程, JVM 进程中有一个 main 主线程, 我们在 main 中执行各种方法, 启动多个线程</p>\n<h2 id=\"创建一个新线程\"><a href=\"#创建一个新线程\" class=\"headerlink\" title=\"创建一个新线程\"></a>创建一个新线程</h2><p>创建一个新线程, 需要实例化一个<code>Thread</code>实例, 调用它的<code>start()</code>方法, 之后<code>start()</code>方法会自动调用这个实例的<code>run()</code>方法, 启动线程</p>\n<p>三种创建线程的方法: <code>implements Runnable</code> , <code>extends Thread</code> , 使用Callable和Future</p>\n<ul>\n<li>区别: 实现 Runnable 与 Callable 接口后可以继承其他类, 继承 Thread 类在一些操作上更简单</li>\n</ul>\n<p><code>extends Thread</code>示例: </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> horseRun <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> LENGTH <span class=\"token operator\">=</span> <span class=\"token number\">188</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> LENGTH<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">Thread</span> horse1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token char\">'%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Thread</span> horse2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">horseRun</span><span class=\"token punctuation\">(</span><span class=\"token char\">'$'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        horse1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        horse2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出: <code>$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$%%%%</code></p>\n<ul>\n<li>每次的结果都不一样, 两个线程同时开始运行, 由<strong>操作系统进行调度, 程序无法决定</strong></li>\n</ul>\n<p>尝试修改进程的优先级: <code>horse1.setPriority(4); horse2.setPriority(6);</code><br>输出结果: <code>$$$$$%%%$$$$$$$%%%%%%$$$$$$$$%%%%$$$$$$$%%%$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</code></p>\n<ul>\n<li>操作系统可能对高优先级线程调度更频繁, 但是并不能保证线程一定会先执行</li>\n</ul>\n"},{"title":"Java 异常处理","date":"2021-10-17T16:00:00.000Z","_content":"\n# 异常处理\n\n## try-catch-finally 的调用顺序\n\ntry 中未抛出异常则不执行 catch 中的方法\n即使 try 或 catch 中有 return 语句仍会执行 finally 中的语句, 且 finally 中的 return 会覆盖 try\\catch 的return\n\n## test方法\n\n```java\npackage com.company;\n\npublic class tryCatchFinally {\n\n    public String test(int a) {\n        try {\n            System.out.print(\"try\\t\\t\");\n            throw new Exception();\n        } catch (Exception e) {\n            System.out.print(\"catch\\t\\t\");\n            return \"catch\";\n        } finally {\n            System.out.print(\"finally\\t\\t\");\n            if (a == 1) {\n                return \"finally\";\n            }\n        }\n    }\n\n}\n```\n\nmain方法 (逃) \n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception{\n\n        System.out.println( Class.forName(\"com.company.tryCatchFinally\").getDeclaredMethod(\"test\", int.class).invoke(Class.forName(\"com.company.tryCatchFinally\").newInstance(), 1) );\n\n        System.out.println( Class.forName(\"com.company.tryCatchFinally\").getDeclaredMethod(\"test\", int.class).invoke(Class.forName(\"com.company.tryCatchFinally\").newInstance(), 0) );\n\n    }\n}\n```\n\n输出结果\n\n```java\ntry\t\tcatch\t\tfinally\t\tfinally\ntry\t\tcatch\t\tfinally\t\tcatch\n```\n\n","source":"_posts/Java 异常处理.md","raw":"---\ntitle: Java 异常处理\ndate: 2021-10-18\ntags: [java, error]\n---\n\n# 异常处理\n\n## try-catch-finally 的调用顺序\n\ntry 中未抛出异常则不执行 catch 中的方法\n即使 try 或 catch 中有 return 语句仍会执行 finally 中的语句, 且 finally 中的 return 会覆盖 try\\catch 的return\n\n## test方法\n\n```java\npackage com.company;\n\npublic class tryCatchFinally {\n\n    public String test(int a) {\n        try {\n            System.out.print(\"try\\t\\t\");\n            throw new Exception();\n        } catch (Exception e) {\n            System.out.print(\"catch\\t\\t\");\n            return \"catch\";\n        } finally {\n            System.out.print(\"finally\\t\\t\");\n            if (a == 1) {\n                return \"finally\";\n            }\n        }\n    }\n\n}\n```\n\nmain方法 (逃) \n\n```java\npublic class Main {\n\n    public static void main(String[] args) throws Exception{\n\n        System.out.println( Class.forName(\"com.company.tryCatchFinally\").getDeclaredMethod(\"test\", int.class).invoke(Class.forName(\"com.company.tryCatchFinally\").newInstance(), 1) );\n\n        System.out.println( Class.forName(\"com.company.tryCatchFinally\").getDeclaredMethod(\"test\", int.class).invoke(Class.forName(\"com.company.tryCatchFinally\").newInstance(), 0) );\n\n    }\n}\n```\n\n输出结果\n\n```java\ntry\t\tcatch\t\tfinally\t\tfinally\ntry\t\tcatch\t\tfinally\t\tcatch\n```\n\n","slug":"Java 异常处理","published":1,"updated":"2022-06-16T13:16:50.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txor0006osu73xi60b3m","content":"<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h2 id=\"try-catch-finally-的调用顺序\"><a href=\"#try-catch-finally-的调用顺序\" class=\"headerlink\" title=\"try-catch-finally 的调用顺序\"></a>try-catch-finally 的调用顺序</h2><p>try 中未抛出异常则不执行 catch 中的方法<br>即使 try 或 catch 中有 return 语句仍会执行 finally 中的语句, 且 finally 中的 return 会覆盖 try\\catch 的return</p>\n<h2 id=\"test方法\"><a href=\"#test方法\" class=\"headerlink\" title=\"test方法\"></a>test方法</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> tryCatchFinally <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"catch\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>main方法 (逃) </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span>\t\t<span class=\"token keyword\">catch</span>\t\t<span class=\"token keyword\">finally</span>\t\t<span class=\"token keyword\">finally</span>\n<span class=\"token keyword\">try</span>\t\t<span class=\"token keyword\">catch</span>\t\t<span class=\"token keyword\">finally</span>\t\t<span class=\"token keyword\">catch</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h2 id=\"try-catch-finally-的调用顺序\"><a href=\"#try-catch-finally-的调用顺序\" class=\"headerlink\" title=\"try-catch-finally 的调用顺序\"></a>try-catch-finally 的调用顺序</h2><p>try 中未抛出异常则不执行 catch 中的方法<br>即使 try 或 catch 中有 return 语句仍会执行 finally 中的语句, 且 finally 中的 return 会覆盖 try\\catch 的return</p>\n<h2 id=\"test方法\"><a href=\"#test方法\" class=\"headerlink\" title=\"test方法\"></a>test方法</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> tryCatchFinally <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"catch\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally\\t\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"finally\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>main方法 (逃) </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.tryCatchFinally\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span>\t\t<span class=\"token keyword\">catch</span>\t\t<span class=\"token keyword\">finally</span>\t\t<span class=\"token keyword\">finally</span>\n<span class=\"token keyword\">try</span>\t\t<span class=\"token keyword\">catch</span>\t\t<span class=\"token keyword\">finally</span>\t\t<span class=\"token keyword\">catch</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n"},{"title":"MySQL基础","date":"2021-09-09T16:00:00.000Z","math":true,"_content":"\n# 初识~09.06~\n\n## 数据库术语\n\n- 数据库 database : 保存有组织的数据的容器\n- 表 table : 某种特定类型数据的结构化清单\n  - 相同数据库不能使用相同表名\n- 模式 schema : 关于数据库和表的布局及特性的信息 (有时用作数据库的同义词)\n- 列 column : 表中的一个字段\n  - 表由一个或多个列组成\n- 数据类型 datatype : 所容许的数据的类型\n- 行 row : 表中的一个记录\n- 主键 primary key :  一列（或一组列），其值能够唯一区分表 中每个行\n  - 任意两行主键值不同 (一组列时, 所有列值的组合唯一)\n  - 每行都有主键值(不允许NULL)\n  - 好习惯 : \n    - 不更新主键列中的值\n    - 不重用主键列的值\n    - 不在主键列中使用可能会更改的值\n- 外键 foreign key : 某个表中的一列, 它包含另一个表的主键值, 定义了两个表之间的关系 \n  - 列名可以与原主键不同, 数据类型要相同\n\n## SQL简介\n\nsequel是结构化查询语言 Structured Query Language 的缩写, 一种专门用来与数据库通信的语言\n\n## MySQL\n\nMySQL是一种DBMS, 即一种数据库软件\n\n# 使用MySQL\n\n选择数据库: `USE 数据库名`\n\n返回可用数据库列表: SHOW DATABASES\n\n- 包含MySQL内部使用的数据库\n\n`SHOW` : 查看数据库, 表和内部信息\n\n# 检索数据-SELECT~09.08~\n\n## SELECT基础\n\n`SELECT 列名 FROM 表名`\n\n- SQL语句应以 ; 分隔\\结束\n- SQL语句不区分大小写, 但是推荐大写\n- SQL语句中的所有空格都被忽略\n\n检索多个列: `SELECT 列名,列名 FROM 表名`\n\n检索所有列: `SELECT * FROM 表名`\n\n- 这样可以检索未知列\n\n只检索具有不同值的列表: `SELECT DISTINCT 列名 FROM 表名`\n\n限制不多于五行: `SELECT 列名 FROM 表名 LIMIT 5`\n返回从第四行开始的五行: `SELECT 列名 FROM 表名 LIMIT 4,5` , 同义于`SELECT 列名 FROM 表名 LIMIT 5 OFFSET 4`\n\n- 检索出来的**第一行是行0**\n\n使用完全限定的列名, 表名: `SELECT 表名.列名 FROM 连接名.表名`\n\n## 排序检索数据-ORDER BY\n\n- 如果不排序, 数据一般以它在底层表中出现的顺序显示 (更新或删除后会受到影响)\n\n使用 OREDR BY : `SELECT 列名1 FROM 表名 ORDER BY 列名2`\n\n- 可以用`,`分隔以多列排序\n- 默认以升序排序(ASC), 在列名后附加` DESC`指定该列以降序排序\n\n## 条件过滤数据-WHERE\n\n使用 WHERE : `SELECT 列名1 FROM 表名 WHERE 条件`\n\n- **`ORDER BY`应位于`WHERE`之后**\n- WHERE 支持的子句操作符: =, <>(不等于), !=(不等于), <, <=, >, >=, BETWEEN(在指定的两个数据之间\n- 字符串以单引号括住, 数字不需要\n- BETWEEN 示例: `SELECT 列名1 FROM 表名 WHERE 列名2 BETWEEN 数值a AND 数值b`\n  - BETWEEN 的范围是>=a , <=b\n- 空值检查: `WHERE 列名 IS NULL`\n  - 不匹配搜索(使用不等号)不会返回具有NULL值的行\n\n组合 WHERE 语句, 使用AND, OR : `WHERE 条件1 AND 条件2`\n\n- AND 的优先级比 OR 高, 需要使用圆括号正确组合操作符\n\n通过 IN 指定条件范围: `WHERE 列名 IN (值1, 值2)`\n\n- IN 比等效的 OR 执行更快\n- IN 可以包含其他 SELECT 语句\n\n通过 NOT 否定后跟条件的关键字: `WHERE 列名 NOT IN (值1, 值2)`\n\n- MySQL支持 NOT 对IN, BETWEEN, EXISTS取反\n- NOT 只否定后边紧跟的一个条件\n\n通过 LIKE 使用通配符: `WHERE 列名 LIKE 'jet%'` , 找出所有词以jet起头的内容\n\n- 通配符 % 表示任意字符出现任意次数(包括0个字符), 此处即接受jet后的任意字符\n  - `LIKE '%'`不能匹配NULL \n- 通配符可以在任意位置出现任意次\n- 通配符 _ 只匹配单个字符, 不包括0个字符\n- 通配符运行效率较差, 尽量使用其他语句\n  使用多个条件搜索时应当将通配符相关的搜索条件放在靠后执行的位置\n\n### 正则表达式-REGEXP\n\nREGEXP 后所跟的东西作为正则表达式\n\n- 例: `WHERE 列名 REGEXP '1000'`, 检索列中包含文本 1000 的所有行\n- `.`是正则表达式语言中一个特殊的字符, 表示匹配任意一个字符\n- 默认不区分大小写, 使用`BINARY`关键字区分大小写\n\nOR 匹配: `WHERE 列名 REGEXP '1000 | 2000 | 3000'`\n\n[] 匹配一组字符中的任意一个: `REGEXP [123]000`, 等效上一句\n\n- `[^123]`匹配除1, 2, 3以外的任何内容\n- `[0-9]`匹配 0~9 任意数字\n\n特殊匹配规则:\n\n- 匹配\"-\"与\".\"等特殊字符: 使用\\\\为前导, 进行转义 `\\\\-` \n\n- `\\\\ `也用来引用元字符: 如`\\\\n`表示换行\n\n- 匹配字符类: 如`[:alnum:]`表示任意字母和数字, 同`[a-zA-Z0-9]`\n\n匹配多个实例: 默认只对其前边的一个字符有效\n\n- `*` : 0个或多个匹配\n- `+` : 1个或多个匹配, 等于`{1, }`\n- `?` : 0个或一个匹配, 等于 `{0,1}`\n- `{数值}` : 指定数目的匹配\n- `{数值, }` : 不少于指定数目的匹配\n- `{数值1, 数值2}` : 匹配数目的范围 (数值2不超过255)\n- 示例: \n  1. `REGEXP '\\\\([0-9] sticks?\\\\)'` : 此句中 ? 使最后的 s 成为可选字符, 有没有s都会被检出, 有其他字符不会\n  2. `REGEXP '[[:digit:]]{4}` : 匹配连在一起的任意四位数字, 等效于`'[0-9][0-9][0-9][0-9]'`\n\n匹配特定位置的文本: \n\n- `^` : 文本的开始\n- `$` : 文本的结尾\n- `[[:<:]]` : 词的开始\n- `[[:>:]]` : 词的结尾\n- 示例: `REGEXP '^[0-9\\\\.]` 在 . 或任意数字为串中第一个字符时匹配\n- 通过^开始每个表达式, $结束每个表达式, 可以使REGEXP的作用与LIKE一样\n\n## 创建计算字段\n\n字段: 基本与 列 相同\n\nConcat()函数 拼接: 将值连在一起构成单个值\n\n- 示例: `SELECT Concat(列名1, ' (', 列名2, ')')`\n  会输出`值1 (值2)`\n- Concat 的多个串以\",\"分隔\n\n删除数据多余的空格: Trim()函数\n\n- `RTrim(列名)`去掉值右边的空格\n- `LTrim(列名)`去掉值左边的空格\n- `Trim(列名)`去掉左右两边的空格\n\nAS 使用别名: 新计算的列没有名字无法引用, 赋予别名解决这个问题\n\n- 示例: `SELECT Concat(列名1, ' (', 列名2, ')') AS 别名`\n- 在原名不合法时重命名它, 易误解时扩充它\n- 别名也称导出列\n\n计算: 支持 +, -, *, / 四个基本操作运算符, 可用圆括号区分优先顺序\n\n- 示例: `SELECT 列名1 + 列名2 AS 别名`\n\n## 数据处理函数\n\n*函数的可移植性较差, 使用时建议做好注释*\n\n文本处理函数:\n\n- 示例 `WHERE Soundex(列名) = Soundex('Lie')`, 匹配发音与Lie类似的值(如Lee)\n\n日期和时间处理函数:\n\n- 日期格式应为 `yyyy-mm-dd`\n- 基本日期条件过滤: `WHERE 列名 = 'yyyy-mm-dd'`\n  - 默认具体时间为`00:00:00`, 如果表中值为`yyyy-mm-dd 11:30:05`不会匹配\n  - 使用Date()函数, 仅比较给出的日期(即只比较`yyyy-mm-dd`), 相应的Time函数只比较时间: `WHERE Date(列名) = 'yyyy-mm-dd'`\n  - 使用Year(), Month()等只返回年份, 月份\n\n数值处理函数: 一般用于代数, 三角或几何运算\n\n## 汇总数据\n\n> 有时返回具体数据是对时间和资源的浪费\n\nSQL的五个聚集函数:\n\n<table border=\"2\">\n    <tr>\n        <th>函数</th>\n        <td>AVG()</td>\n        <td>COUNT()</td>\n        <td>MAX()</td>\n        <td>MIN()</td>\n        <td>SUM()</td>\n    </tr>\n    <tr>\n    \t<th>功能</th>\n        <td>平均值</td>\n        <td>行数</td>\n        <td>最大值</td>\n        <td>最小值</td>\n        <td>总和</td>\n    </tr>\n</table>\nAVG() : `SELECT AVG(列名) AS 别名 FROM 表名` , 得到这一列的平均值\n\nCOUNT() : \n\n- `SELECT COUNT(*)` : 对表中包括空值的所有行计数\n- `COUNT(列名)` : 对特定列中具有值的行计数, 不计算NULL\n\nMAX() 与 MIN() 与 SUM() : 要求指定列名, 会忽略NULL\n\n**使用`DISTINCT`参数, 只考虑不同的内容: **\n\n- 示例: `AVG(DISTINCT 列名)`, 计算平均值时只取不同的值\n- 必须指定列名\n- *有一个对应的参数`ALL`, 是没什么用的默认值*\n\n组合聚集参数: 使用\",\"隔开不同语句, 可以换行好看些\n\n## 分组数据-GROUP BY~09.09~\n\n把数据分成多个逻辑组, 以便对每个组进行聚集计算\n\n- 示例: `SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id`\n  输出: ![image-20210909130806621](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909130806621.png)\n\n- GROUP BY子句可以包含任意数目的列, 使得可以通过对分组嵌套达到更细致的控制\n- GROUP BY子句中不能使用别名, 若在 SELECT 中使用表达式, GROUP BY 子句中须指定相同的表达式\n- 除聚集计算语句外, SELECT 中每个列都需要在GROUP BY 子句中给出\n- 一个或多个NULL值也会被分为一组\n- **GROUP BY 子句应在 WHERE 之后, ORDER BY 之前**\n- **使用 GROUP BY 子句时, 应当给出 ORDER BY 子句保证正确排序**\n- 后边附加`WITH ROLLUP`, 可以获得所有分组汇总的值\n\n### 过滤分组-HAVING\n\nHAVING 非常类似于 WHERE (WHERE 在分组前进行过滤, HAVING 在分组后进行过滤)\n\n- 示例: `SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) >=2`\n  过滤两个以上的 COUNT(*) 的分组\n- 不能使用别名\n- **HAVING支持所有WHERE操作符**\n\n## SELECT 子句顺序\n\nSELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY → LIMIT\n\n## 子查询-嵌套\n\n嵌套在其他查询中的查询 : 将一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句\n\n- <a name=\"子查询1\">示例</a>:\n\n```sql\nSELECT cust_name, cust_contact\nFROM customers\nWHERE cust_id IN (SELECT cust_id\n                  FROM orders\n                  WHERE order_num IN (SELECT order_num\n                                      FROM orderitems\n                                      WHERE prod_id ='TNT2'))\n\n```\n\n- 上边的例子在性能上不一定是最好的, [之后的联结查询](#联结查询1)会给出一个更好的方法\n- 子查询一般与 IN 操作符结合使用, 也可以用 =, <> 等\n- 作为计算字段使用子查询示例:\n  - 这里嵌套内的 WHERE 使用了完全限定列名, 告诉 SQL 比较 orders 表中的 cust_id 与当前正从customers 表中检索的 cust_id\n  - 这种称为相关子查询, 只要列名可能有多义性, 就必须使用这种语法\n\n```sql\nSELECT cust_name,\n\t\t\t cust_state,\n\t\t\t (SELECT COUNT(*)\n        FROM orders\n        WHERE orders.cust_id = customers.cust_id) AS orders\nFROM customers\nORDER BY cust_name;\n```\n\n> 建议先用硬编码数据建立和测试外层查询, 并且仅在确认它正常后才嵌入子查询\n\n## 联结表(划重点)\n\n联结是一种机制, 用来在一条 SELECT 语句中关联表, 可以联结多个表返回一组输出\n\n- <a name=\"示例-联结表1\">示例</a>: \n\n  ```sql\n  SELECT vend_name, prod_name, prod_price\n  FROM vendors, products\n  WHERE vendors.vend.id = products.vend.id\n  ORDER BY vend_name, prod_name;\n  ```\n\n  这里三个列分别在两个表中, 通过 WHERE 语句正确联结两个表, 需要完全限定列名\n\n- 没有联结条件的表关系返回结果为笛卡尔积, 检索出的行数是第一个表中行数乘以第二个表中行数\n\n- 叉联结是一种笛卡尔积的联结类型\n\n### 内部联结(等值联结)\n\n即[上边示例](#示例-联结表1)的联结方式, 可以这样明确指定联结的类型:\n\n```sql\nSELECT vend_name, prod_name, prod_price\nFROM vendors INNER JOIN products\nON vendors.vend_id = products.vend.id\n```\n\n联结条件用特定的 ON 子句而不是 WHERE 子句给出\n\n### 联结多个表\n\n联结太多表性能下降会很严重\n\n<a name=\"联结查询1\">示例1</a>: 使用联结查询优化[上边的子查询](#子查询1)\n\n```sql\nSELECT cust_name, cust_contact\nFROM customers, orders, orderitems\nWHERE customers.cust_id = orders.cust_id\n\tAND orderitems.order_num = orders.order_num\n\tAND prod_id='TNT2';\n```\n\n### 高级联结\n\n#### 使用表别名\n\n- 缩短SQL语句\n- **允许在单条 SELECT 语句中多次使用相同的表** `FROM employee AS a, employee AS b`\n\n#### 自联结\n\n以下两种解决方案结果相同, 第二种自联结方式效率高于第一种子查询\n\n```sql\nSELECT prod_id, prod_name\nFROM products\nWHERE vend_id = (SELECT vend_id\n                 FROM products\n                WHERE prod_id = 'DTNTR')\n```\n\n```sql\nSELECT p1.prod_id, p1.prod_name\nFROM products AS p1, products AS p2\nWHERE p1.vend_id = p2.vend_id\n\tAND p2.prod_id = 'DTNTR'\n```\n\n#### 自然联结\n\n自然联结排除多次出现, 使每个列只返回一次\n\n- 需要自己手动完成\n\n#### 外部联结\n\n包含了在相关表中没有关联行的行\n\n- 必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表 (包括OUTER JOIN 右边或左边的表) , 即从右边或左边表中选择所有行\n\n- 内部, 外部联结的区别示例|\n  ![image-20210909183350173](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183350173.png)![image-20210909183441236](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183441236.png)\n\n#### 带聚集函数的联结\n\n```sql\nSELECT customers.cust_name,\n\t\t\t customers.cust_id,\n\t\t\t COUNT(orders.order_num) AS num_ord\nFROM customers LEFT OUTER JOIN orders\nON customers.cust_id = orders.cust_id\nGROUP BY customers.cust_id;\n```\n\n## 组合查询-UNION\n\n组合使用多条 SELECT 语句, 等效于具有多个 WHERE 子句的单条 SELECT 语句. 两种查询性能优劣不一定\n\n通过在各 SELECT 语句之间加入 UNION 实现\n\n- 示例: \n\n```sql\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE prod_price < 5\nUNION\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE vend_id IN (1001,1002);\n```\n\n等效于\n\n```sql\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE prod_price <= 5\nOR vend_id IN (1001,1002);\n```\n\n- UNION 中的每个查询必须包含相同的列, 表达式或聚集函数, 顺序可以不同\n- UNION 从查询结果集中自动去除重复的行\n  - 使用 UNION ALL 返回不去重的全部行 (此时必须使用 UNION 而不能 WHERE)\n- 组合查询可以应用于不同的表\n\n### 对组合查询结果排序\n\n使用 UNION 时, 只能使用一条 ORDER BY 语句, 出现在最后一条 SELECT 之后,\n\n## 全文本搜索\n\n*并非所有引擎都支持全文本搜索*'\n\n对指定列中各词创建一个索引, 针对这些词进行搜索.\n\n- 为进行全文本搜索, 必须索引被搜索的列, 且随着数据的改变不断进行索引(自动进行)\n- 索引后, SELECT 可与 Match() 和 Against() 一起使用执行搜索\n\n全文本搜索的优点:\n\n- 性能更好\n- 明确控制\n- 智能化的结果\n\n启用全文本搜索支持: 在创建表时通过 FULLTEXT 子句, 示例如下\n\n```sql\nCREATE TABLE productnotes\n(\n    note_id\t\tint\t\t\tNOT NULL AUTO_INCREMENT,\n    prod_id\t\tchar(10)\tNOT NULL,\n    note_date\tdatetime\tNOT NULL,\n    note_text\ttext\t\tNULL,\n    PRIMARY KEY(note_id),\n    FULLTEXT(note_text)\n)ENGING=MyISAM\n```\n\n- 这里根据`FULLTEXT(note_text)`对note_text进行索引\n- 定义之后, MySQL会自动维护索引\n\n进行全文本搜索: 使用`Match()`和`Against()`两个函数进行全文本搜索, 其中Match()指定被搜索的列, Against()指定要使用的搜索表达式, 示例如下\n\n```sql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit');\n```\n\n等效于\n\n```sql\nSELECT note_text\nFROM productnotes\nWHERE note_text LIKE '%rabbit%';\n```\n\n- 指定 rabbit 作为搜索文本, 搜索 note_text 列中包含 rabbit 的行\n- 前者以文本匹配良好程度排序的数据, 后者以不特别有用的顺序返回数据\n\n注意事项: \n\n- 传递给 Match() 的值必须与 FULLTEXT() 中定义的相同, 多个列时必须列出他们且次序正确\n\n- 搜索默认不区分大小写 (除非使用 BINARY 方式)\n\n- 指定多个搜索项时, 包含多数匹配词的行将具有更高的等级值\n\n### 使用查询扩展\n\n流程: `Against('值' WITH QUERY EXPANSION)`\n\n1. 先进行一个基本的全文本搜索, 找出与搜索条件匹配的所有行\n2. MySQL 检查这些匹配行并选择有用的词\n3. 再次进行全文本搜索, 使用原来的词 + 有用的词\n\n### 布尔文本搜索\n\n以布尔方式, 提供如下关于内容的细节: \n\n- 要匹配的词\n- 要排斥的词\n- 排列提示(指定某些词比其他词更重要)\n- 表达式分组\n- 另外一些内容\n\n*即使没有FULLTEXT也可以使用布尔方式, 但会非常缓慢*\n\n示例: `WHERE Match(note_text) Against('heavy -rope*' IN BOOLEAN MODE)`\n\n- `-rope*`指示排除包含rope*的词(以rope开始的词)\n- ![image-20210910205020402](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210910205020402.png)\n\n### 使用说明\n\n> - 在索引全文本数据时，短词被忽略且从索引中排除。短词定义为 那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。\n> - MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参 阅MySQL文档以了解如何完成此工作）。\n> - 许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。\n> - 如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词 或者不出现，或者至少出现在50%的行中）。\n> - 忽略词中的单引号。例如，don't索引为dont。\n> - 不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。\n> - 如前所述，仅在MyISAM数据库引擎中支持全文本搜索。\n\n# 插入/更新/删除~09.10~\n\n## 插入数据-INSERT\n\n通常方法:\n\n```sql\nINSERT INTO 表1\nVALUES(NULL,\n      '值1',\n      '值2',\n      NULL,\n      '值3');\n```\n\n- 插入一个新内容到表1中, 按照表中列的顺序输入\n- 若某一列没有值, 需要使用NULL(允许的话)\n\n更安全的方法:\n\n```sql\nINSERT INTO 表2(列名1,\n              列名2,\n              列名3)\n              VALUES('值1',\n                     NULL,\n                     '值2');\n```\n\n- 在表名后给出列名, 与之后的值顺序对应\n- 不需要提供值的列直接不写出列名 (NO NULL且没有默认值(如自增值)的必须赋值)\n\n插入多行: 同时使用以\";\"分隔的多条 INSERT 语句或者单条 INSERT 有多组值(更快)\n\n```sql\nINSERT INTO 表3(列名1,\n               列名2)\n               VALUES(\n                   '值1',\n                   '值2'\n               ),\n               (\n                   '值3',\n                   '值4'\n               );\n```\n\n插入检索出的数据:\n\n```sql\nINSERT INTO 表4(列1,\n               列2)\n               SELECT 列3,\n               \t\t  列4\n               FROM 表5;\n```\n\n## 更新数据-UPDATE\n\n示例:\n\n```sql\nUPDATE 表1\nSET 列1 = '值1',\n\t列2 = '值2'\nWHERE 条件1;\n```\n\n- 使用 WHERE 限定要更新的行, 不然它会更新所有行\n- 更新时如果出现错误, 则整个UPDATE操作被取消, 使用`UPDATE IGNORE 表1`, 即使发生错误也继续更新\n- 通过`SET 列1 = NULL`删去某列的值(假设允许NULL)\n\n## 删除数据-DELETE\n\n示例:\n\n```sql\nDELETE FROM 表2\nWHERE 条件2;\n```\n\n- 删除指定条件的行\n  - 删除指定的列使用UPDATE\n- 不使用WHERE会删除全部行\n\n删除表中所有行使用 TRUNCATE TABLE 更快(删除原来的表并重新创建一个)\n\n**更新/删除前应现用 SELECT 对 WHERE 条件进行测试**\n\n# 创建和操纵表\n\n## 创建表-CREATE\n\n使用交互式工具, 或直接使用MySQL语句\n\n```sql\nCREATE TABLE customers\n(\n    cust_id \t\t\tint \t\tNOT NULL AUTO_INCREMENT,\n    cust_name \t\tchar(50) \tNOT NULL,\n    cust_address \tchar(50) \tNULL,\n  \tcust_num\t\t\tint\t\t\t\tNOT NULL DEFAULT 1,\n    PREMARY KEY (cust_id)\n) ENGINE=InnoDB;\n```\n\n- 使用`PREMARY KEY (列1, 列2)`指定主键, 主键不能有 NULL 与重复值\n- 使用`NOT NULL`指定不允许 NULL , 否则默认为允许\n- 使用`AUTO_INCREMENT`指定对该列自动增量\n  - `SELECT last_insert_id`返回最后一个 AUTO_INCREMENT 值\n- 使用`DEFAULT 值1`指定默认值\n- 使用`ENGINE=引擎名`指定引擎类型, 不指定时使用默认引擎\n  - `InnoDB` : 不支持全文本搜索, 可靠的事务处理引擎\n  - `MEMORY` : 数据存储在内存中, 速度很快, 适合临时表, 功能等同于 `MyISAM`\n  - `MyISAM` : 性能极高, 支持全文本搜索, 不支持事务处理\n  - **外键不能跨引擎**, 引擎混用的缺点\n\n## 更新表-ALTER\n\n理想状态下不应当更新表, 常见用途是定义外键\n\n```sql\nALTER TABLE 表名1\nADD 列名1 数据类型1; \t\t\t-- 添加列1\nDROP COLUMN 列名2;\t\t\t -- 删除列2\nADD CONSTRAINT 外键约束名 FOREIGN KEY (列名3)\t\t-- 添加外键\nREFERENCES 表名2 (列名4)\nADD CONSTRAINT fk_products_vendors FOREIGN KEY (vend_id)\t\t-- 添加外键示例\nREFERENCES vendors (vend_id)\n```\n\n## 删除表-DROP\n\n`DROP TABLE 表名`, 没有确认, 不能撤销\n\n## 重命名表-RENAME\n\n`RENAME TABLE 表名1 TO 表名2`, 可以同时对多个表重命名\n\n# 其他功能~09.11~\n\n## 使用视图\n\n视图示例① : 简化复杂的联结\n\n```sql\nCREATE VIEW productcustomers AS\nSELECT cust_name, cust_contact, prod_id\nFROM customers, orders, orderitems\nWHERE customers.cust_id = order.cust_id\n\tAND orderitems.order_num = orders.order_num;\n```\n\n- 创建了一个名为 `productcutomers` 的视图, 联结三个表, 返回其中的三列\n- 使用 `SELECT * FROM productcutomers` 返回这个视图的三列\n\n视图示例② : 重新格式化检索出的数据\n\n```sql\nCREATE VIEW vendorlocations AS\nSELECT Concat(RTrim(vend_name), '(', RTrim(vend_country), ')')\n\t\tAS vend_title\nFROM vendors\nORDER BY vend_name;\n```\n\n- 之后使用 `SELECT * FROM vendorlocations;` 即可实现\n\n视图的用处:\n\n- 重用 SQL 语句\n- 简化复杂的 SQL 操作\n- 仅使用表的部分组成, 保护数据\n- 更改数据格式和表示\n\n注意点:\n\n- 视图不包含任何数据, 它包含的是一个 SQL 查询\n- 使用视图相当于执行检索, 过于复杂或嵌套过多的视图性能会下降严重\n- 视图必须唯一命名(与表一样)\n- 使用视图时的 ORDER BY 会覆盖视图内部的 ORDER BY\n- 视图可以与表同时使用\n- 视图不能索引\n\n更新视图: 对视图使用 INSERT, UPDATE, DELETE\n\n- 更新视图其实是更新其基表\n- 若要更新的基数据不能被确定, 则无法更新, 即视图定义中有以下操作: 分组, 联结, 子查询, 并, 聚集函数( Min(), Count(), Sum() )等, DISTINCT, 导出列\n- 视图应用于检索而不是更新\n\n## 使用存储过程\n\n为以后的使用保存一条或多条MySQL语句的集合\n\n用处 :\n\n- 把处理封装, 简化复杂的操作\n- 保证所有开发人员使用的代码相同(同一存储过程), 防止错误\n- 简化对变动的管理 (使用存储过程的人员不需要知道这些变化)\n\n优点 : 简单, 安全, 高性能\n\n- 性能更好, 使用存储过程比单独的 SQL 语句更快\n- 用 一些只能用在单个请求中的MySQL元素和特性 编写功能更强更灵活的代码 [示例](#智能存储示例1)\n\n缺陷 : 编写时 更困难,需要安全访问权限 (编写与执行存储过程的权限是分开的)\n\n### 执行存储过程-<a name=\"调用存储过程1\">调用</a>\n\n```sql\nCALL productpricing(@pricelow,\n                   \t@pricehigh,\n                   \t@priceaverage);\n```\n\n- 通过 `@pricelow` 等向存储过程传递参数\n- 所以MySQL变量都必须以 @ 开始\n- 该语句不显示任何值, 使用 `SELECT @pricelow, @pricehigh;` 调用变量\n\n### 创建存储过程\n\n```sql\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Ave(prod_price) AS priceaverage\n\tFROM products;\nEND;\n```\n\n- 创建名为 `productpricing` 的存储过程\n- 若存储过程接受参数, 在名称后的 () 中列出\n- 通过 `CALL productpricing()` 调用这个存储过程\n\n使用命令行实用程序时需要更改分隔符, `DELIMITER //` 告诉它使用//作为新的语句结束分隔符, 语句结束时再使用 `DELIMITER ;` 换回去\n\n### 删除存储过程\n\n`DROP PROCEDURE productpricing`\n\n- 删除时没有后面的 () \n- 若过程不存在会返回一个错误, 使用 `DROP PROCEDURE IF EXISTS` 不会产生错误\n\n### 使用参数\n\n一般存储过程不显示结果, 而是把结果返回给变量\n\n- 变量: 内存中一个特定的位置, 用来临时存储数据, \n\n示例 1 :\n\n```sql\nCREAT PROCEDURE productpricing(\n\tOUT p1 DECIMAL(8, 2),\n  OUT ph DECIMAL(8, 2),\n  OUT pa DECIMAL(8, 2)\n)\nBEGIN\n\tSELECT Min(prod_price)\n\tINTO p1\n\tFROM products;\n\tSELECT Max(prod_price)\n\tINTO ph\n\tFROM products;\n\tSELECT Avg(prod_price)\n\tINTO pa\n\tFROM products;\nEND;\n```\n\n- 此过程接受三个参数: p1存储产品最低价, ph存储最高价, pa存储平均价\n- 每个参数必须指定类型, 这里用  DECIMAL 指定十进制, (8, 2) 指定小数点左侧最多 8 位, 右侧最多 2 位. (右侧最多为8)\n- 记录集是不允许的类型, 所以不能通过一个参数返回多行列, 此处要使用三个参数\n- 通过[此处示例](#调用存储过程1)调用此过程\n\n示例 2 :\n\n```sql\nCREATE PROCEDURE ordertotal(\n\tIN onumber INT,\n  OUT ototal DECIMAL(8, 2)\n)\nBEGIN\n\tSELECT Sum(item_price * quantity)\n\tFROM orderitems\n\tWHERE order_num = onumber\n\tINTO ototal;\nEND;\n```\n\n- 使用 IN 表示要输入的数据\n- 示例调用 `CALL ordertotal(20005, @total)`\n\n### 建立智能存储\n\n在存储过程内包含业务规则和智能处理, <a name=\"智能存储示例1\">智能存储示例</a>:\n\n```sql\n-- Name: ordertotal\n-- Parameters: onumber = order number\n\t\t\t\t\t\t-- taxable = 0 ifnot taxable, 1 if taxable\n\t\t\t\t\t\t-- ototal\t = order total variable\n\t\t\t\t\t\t\nCREATE PROCEDURE ordertotal(\n\tIN onumber INT,\n  IN taxable BOOLEAN,\n  OUT ototal DECIMAL(8, 2)\n) COMMENT 'Obtain order total, optionally adding tax'\nBEGIN\n\n\t-- Declare variable for total\n\tDECLARE total DECIMAL(8, 2);\n\t-- Declare tax percentage\n\tDECLARE taxrate INT DEFAULT 6;\n\t\n\t-- Get the order total\n\tSELECT Sum(item_price*quantity)\n\tFROM orderitems\n\tWHERE order_num = onumber\n\tINTO total;\n\t\n\t-- Is this taxable?\n\tIF taxable THEN\n\t\t-- Yes, so add taxrate to the total\n\t\tSELECT total+(total/100*taxrate) INTO total;\n\tEND IF;\n\t\n\t-- And finally, save to out variable\n\tSELECT total INTO ototal;\n\t\nEND;\n```\n\n- 前边放置 -- 增加注释\n- 使用 DECLARE 声明两个局部变量\n\n- 若增加营业税, 则输入 taxable 为真, 执行之后的 SELECT , 并将结果存储到局部变量 total\n- 最后用一句 SELECT 将 total 保存到 ototal\n\n- COMMENT 添加一个解释, 会在 SHOW PROCEDURE STATUS 的结果中显示\n\n- 使用 `CALL ordertotal(20005, 0, @total);` 使用这个过程\n\n### 检查存储过程\n\n显示用来创建一个存储过程的CREATE语句: `SHOW CREATE PROCEDURE ordertotal;` \n\n显示何时何人创建等详细信息: `SHOW PROCEDURE STATUS`, 信息太多可以使用 LIKE 过滤\n\n## 使用游标\n\n~~*不怎么用得到...过一下看一眼*~~\n\n*咕了*\n\n## 使用触发器\n\n*同上*\n\n## 管理事务处理\n\n事务处理是一种机制, 用来管理必须成批执行的 MySQL 操作\n\n- 用来维护数据库的完整性, 保证成批的 MySQL 操作要么完全执行, 要么完全不执行\n- 显示事务处理需要所用数据引擎支持\n\n相关名词:\n\n- 事务: 一组 SQL 语句\n- 回退: 撤销指定 SQL 语句的过程\n- 提交: 将未存储的 SQL 语句结果写入数据库表\n- 保留点: 事务处理中设置的临时占位符, 可以对它发布回退(不同于回退整个事务处理)\n\n使用 `START TRANSACTION`; 标识事务的开始\n\n使用 `ROLLBACK` 回退 START TRANSACTION 之后的所有语句\n\n- 不能回退 CREATE 或 DROP 操作\n- 使用后事务会自动关闭\n\n使用 `COMMIT` 提交 START TRANSACTION 之后的所有语句\n\n- 一般情况语句会自动隐式提交, 事务处理时语句需要手动提交\n- 如果前边的语句出错, COMMIT 不会提交\n- 使用后事务会自动关闭\n\n使用 `SAVEPOINT 保留点1`; 创建保留点, 支持回退部分事务处理\n\n- 使用 `ROLLBACK TO 保留点1;` 回退到指定位置\n\n- 保留点在事务处理完成后自动释放 (执行一条 ROLLBACK 或 COMNMIT)\n\n### 使用 `SET autocommit=0` 取消默认提交\n\n- 该标志针对每个连接而不是服务器\n\n## 字符集和校对顺序\n\n字符集: 字母和符号的集合\n\n编码: 某个字符集成员的内部表示\n\n校对: 规定字符如何比较的指令\n\n使用 `SHOW CHARACTER SET;` 显示所有可用的字符集以及每个字符集的描述和默认校对\n\n使用 `SHOW COLLATION;` 查看所支持校对的完整列表以及它们适用的字符集\n\n- 许多校对出现两次, 一次区分大小写(以 `_cs` 表示), 一次不区分大小写(以 `_ci` 表示)\n\n给表指定字符集和校对: 在 `CREATE TABLE()` 语句后附加 `DEFAULT CHARACTER SET 字符集1 COLLATE 校对1;`\n\n还支持给某个列指定字符集和校对, \n\n也支持在 SELLECT 语句末 `COLLATE 校对2`指定校对 (用于临时区分大小写)\n\n## 安全管理\n\n创建用户, 管理用户权限等\n\n## 数据库维护\n\n备份数据, 数据库维护, 诊断启动问题, 查看日志文件等\n\n\n\n\n\n\n\n\n\n\n\n\n\n事务处理\n\n设置保留点\n\n中途出错回退到保留点\n\n之后的语句呢?","source":"_posts/MySQL笔记.md","raw":"---\ntitle: MySQL基础\ndate: 2021-09-10\ntags: [mysql, sql]\nmath: true\n---\n\n# 初识~09.06~\n\n## 数据库术语\n\n- 数据库 database : 保存有组织的数据的容器\n- 表 table : 某种特定类型数据的结构化清单\n  - 相同数据库不能使用相同表名\n- 模式 schema : 关于数据库和表的布局及特性的信息 (有时用作数据库的同义词)\n- 列 column : 表中的一个字段\n  - 表由一个或多个列组成\n- 数据类型 datatype : 所容许的数据的类型\n- 行 row : 表中的一个记录\n- 主键 primary key :  一列（或一组列），其值能够唯一区分表 中每个行\n  - 任意两行主键值不同 (一组列时, 所有列值的组合唯一)\n  - 每行都有主键值(不允许NULL)\n  - 好习惯 : \n    - 不更新主键列中的值\n    - 不重用主键列的值\n    - 不在主键列中使用可能会更改的值\n- 外键 foreign key : 某个表中的一列, 它包含另一个表的主键值, 定义了两个表之间的关系 \n  - 列名可以与原主键不同, 数据类型要相同\n\n## SQL简介\n\nsequel是结构化查询语言 Structured Query Language 的缩写, 一种专门用来与数据库通信的语言\n\n## MySQL\n\nMySQL是一种DBMS, 即一种数据库软件\n\n# 使用MySQL\n\n选择数据库: `USE 数据库名`\n\n返回可用数据库列表: SHOW DATABASES\n\n- 包含MySQL内部使用的数据库\n\n`SHOW` : 查看数据库, 表和内部信息\n\n# 检索数据-SELECT~09.08~\n\n## SELECT基础\n\n`SELECT 列名 FROM 表名`\n\n- SQL语句应以 ; 分隔\\结束\n- SQL语句不区分大小写, 但是推荐大写\n- SQL语句中的所有空格都被忽略\n\n检索多个列: `SELECT 列名,列名 FROM 表名`\n\n检索所有列: `SELECT * FROM 表名`\n\n- 这样可以检索未知列\n\n只检索具有不同值的列表: `SELECT DISTINCT 列名 FROM 表名`\n\n限制不多于五行: `SELECT 列名 FROM 表名 LIMIT 5`\n返回从第四行开始的五行: `SELECT 列名 FROM 表名 LIMIT 4,5` , 同义于`SELECT 列名 FROM 表名 LIMIT 5 OFFSET 4`\n\n- 检索出来的**第一行是行0**\n\n使用完全限定的列名, 表名: `SELECT 表名.列名 FROM 连接名.表名`\n\n## 排序检索数据-ORDER BY\n\n- 如果不排序, 数据一般以它在底层表中出现的顺序显示 (更新或删除后会受到影响)\n\n使用 OREDR BY : `SELECT 列名1 FROM 表名 ORDER BY 列名2`\n\n- 可以用`,`分隔以多列排序\n- 默认以升序排序(ASC), 在列名后附加` DESC`指定该列以降序排序\n\n## 条件过滤数据-WHERE\n\n使用 WHERE : `SELECT 列名1 FROM 表名 WHERE 条件`\n\n- **`ORDER BY`应位于`WHERE`之后**\n- WHERE 支持的子句操作符: =, <>(不等于), !=(不等于), <, <=, >, >=, BETWEEN(在指定的两个数据之间\n- 字符串以单引号括住, 数字不需要\n- BETWEEN 示例: `SELECT 列名1 FROM 表名 WHERE 列名2 BETWEEN 数值a AND 数值b`\n  - BETWEEN 的范围是>=a , <=b\n- 空值检查: `WHERE 列名 IS NULL`\n  - 不匹配搜索(使用不等号)不会返回具有NULL值的行\n\n组合 WHERE 语句, 使用AND, OR : `WHERE 条件1 AND 条件2`\n\n- AND 的优先级比 OR 高, 需要使用圆括号正确组合操作符\n\n通过 IN 指定条件范围: `WHERE 列名 IN (值1, 值2)`\n\n- IN 比等效的 OR 执行更快\n- IN 可以包含其他 SELECT 语句\n\n通过 NOT 否定后跟条件的关键字: `WHERE 列名 NOT IN (值1, 值2)`\n\n- MySQL支持 NOT 对IN, BETWEEN, EXISTS取反\n- NOT 只否定后边紧跟的一个条件\n\n通过 LIKE 使用通配符: `WHERE 列名 LIKE 'jet%'` , 找出所有词以jet起头的内容\n\n- 通配符 % 表示任意字符出现任意次数(包括0个字符), 此处即接受jet后的任意字符\n  - `LIKE '%'`不能匹配NULL \n- 通配符可以在任意位置出现任意次\n- 通配符 _ 只匹配单个字符, 不包括0个字符\n- 通配符运行效率较差, 尽量使用其他语句\n  使用多个条件搜索时应当将通配符相关的搜索条件放在靠后执行的位置\n\n### 正则表达式-REGEXP\n\nREGEXP 后所跟的东西作为正则表达式\n\n- 例: `WHERE 列名 REGEXP '1000'`, 检索列中包含文本 1000 的所有行\n- `.`是正则表达式语言中一个特殊的字符, 表示匹配任意一个字符\n- 默认不区分大小写, 使用`BINARY`关键字区分大小写\n\nOR 匹配: `WHERE 列名 REGEXP '1000 | 2000 | 3000'`\n\n[] 匹配一组字符中的任意一个: `REGEXP [123]000`, 等效上一句\n\n- `[^123]`匹配除1, 2, 3以外的任何内容\n- `[0-9]`匹配 0~9 任意数字\n\n特殊匹配规则:\n\n- 匹配\"-\"与\".\"等特殊字符: 使用\\\\为前导, 进行转义 `\\\\-` \n\n- `\\\\ `也用来引用元字符: 如`\\\\n`表示换行\n\n- 匹配字符类: 如`[:alnum:]`表示任意字母和数字, 同`[a-zA-Z0-9]`\n\n匹配多个实例: 默认只对其前边的一个字符有效\n\n- `*` : 0个或多个匹配\n- `+` : 1个或多个匹配, 等于`{1, }`\n- `?` : 0个或一个匹配, 等于 `{0,1}`\n- `{数值}` : 指定数目的匹配\n- `{数值, }` : 不少于指定数目的匹配\n- `{数值1, 数值2}` : 匹配数目的范围 (数值2不超过255)\n- 示例: \n  1. `REGEXP '\\\\([0-9] sticks?\\\\)'` : 此句中 ? 使最后的 s 成为可选字符, 有没有s都会被检出, 有其他字符不会\n  2. `REGEXP '[[:digit:]]{4}` : 匹配连在一起的任意四位数字, 等效于`'[0-9][0-9][0-9][0-9]'`\n\n匹配特定位置的文本: \n\n- `^` : 文本的开始\n- `$` : 文本的结尾\n- `[[:<:]]` : 词的开始\n- `[[:>:]]` : 词的结尾\n- 示例: `REGEXP '^[0-9\\\\.]` 在 . 或任意数字为串中第一个字符时匹配\n- 通过^开始每个表达式, $结束每个表达式, 可以使REGEXP的作用与LIKE一样\n\n## 创建计算字段\n\n字段: 基本与 列 相同\n\nConcat()函数 拼接: 将值连在一起构成单个值\n\n- 示例: `SELECT Concat(列名1, ' (', 列名2, ')')`\n  会输出`值1 (值2)`\n- Concat 的多个串以\",\"分隔\n\n删除数据多余的空格: Trim()函数\n\n- `RTrim(列名)`去掉值右边的空格\n- `LTrim(列名)`去掉值左边的空格\n- `Trim(列名)`去掉左右两边的空格\n\nAS 使用别名: 新计算的列没有名字无法引用, 赋予别名解决这个问题\n\n- 示例: `SELECT Concat(列名1, ' (', 列名2, ')') AS 别名`\n- 在原名不合法时重命名它, 易误解时扩充它\n- 别名也称导出列\n\n计算: 支持 +, -, *, / 四个基本操作运算符, 可用圆括号区分优先顺序\n\n- 示例: `SELECT 列名1 + 列名2 AS 别名`\n\n## 数据处理函数\n\n*函数的可移植性较差, 使用时建议做好注释*\n\n文本处理函数:\n\n- 示例 `WHERE Soundex(列名) = Soundex('Lie')`, 匹配发音与Lie类似的值(如Lee)\n\n日期和时间处理函数:\n\n- 日期格式应为 `yyyy-mm-dd`\n- 基本日期条件过滤: `WHERE 列名 = 'yyyy-mm-dd'`\n  - 默认具体时间为`00:00:00`, 如果表中值为`yyyy-mm-dd 11:30:05`不会匹配\n  - 使用Date()函数, 仅比较给出的日期(即只比较`yyyy-mm-dd`), 相应的Time函数只比较时间: `WHERE Date(列名) = 'yyyy-mm-dd'`\n  - 使用Year(), Month()等只返回年份, 月份\n\n数值处理函数: 一般用于代数, 三角或几何运算\n\n## 汇总数据\n\n> 有时返回具体数据是对时间和资源的浪费\n\nSQL的五个聚集函数:\n\n<table border=\"2\">\n    <tr>\n        <th>函数</th>\n        <td>AVG()</td>\n        <td>COUNT()</td>\n        <td>MAX()</td>\n        <td>MIN()</td>\n        <td>SUM()</td>\n    </tr>\n    <tr>\n    \t<th>功能</th>\n        <td>平均值</td>\n        <td>行数</td>\n        <td>最大值</td>\n        <td>最小值</td>\n        <td>总和</td>\n    </tr>\n</table>\nAVG() : `SELECT AVG(列名) AS 别名 FROM 表名` , 得到这一列的平均值\n\nCOUNT() : \n\n- `SELECT COUNT(*)` : 对表中包括空值的所有行计数\n- `COUNT(列名)` : 对特定列中具有值的行计数, 不计算NULL\n\nMAX() 与 MIN() 与 SUM() : 要求指定列名, 会忽略NULL\n\n**使用`DISTINCT`参数, 只考虑不同的内容: **\n\n- 示例: `AVG(DISTINCT 列名)`, 计算平均值时只取不同的值\n- 必须指定列名\n- *有一个对应的参数`ALL`, 是没什么用的默认值*\n\n组合聚集参数: 使用\",\"隔开不同语句, 可以换行好看些\n\n## 分组数据-GROUP BY~09.09~\n\n把数据分成多个逻辑组, 以便对每个组进行聚集计算\n\n- 示例: `SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id`\n  输出: ![image-20210909130806621](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909130806621.png)\n\n- GROUP BY子句可以包含任意数目的列, 使得可以通过对分组嵌套达到更细致的控制\n- GROUP BY子句中不能使用别名, 若在 SELECT 中使用表达式, GROUP BY 子句中须指定相同的表达式\n- 除聚集计算语句外, SELECT 中每个列都需要在GROUP BY 子句中给出\n- 一个或多个NULL值也会被分为一组\n- **GROUP BY 子句应在 WHERE 之后, ORDER BY 之前**\n- **使用 GROUP BY 子句时, 应当给出 ORDER BY 子句保证正确排序**\n- 后边附加`WITH ROLLUP`, 可以获得所有分组汇总的值\n\n### 过滤分组-HAVING\n\nHAVING 非常类似于 WHERE (WHERE 在分组前进行过滤, HAVING 在分组后进行过滤)\n\n- 示例: `SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) >=2`\n  过滤两个以上的 COUNT(*) 的分组\n- 不能使用别名\n- **HAVING支持所有WHERE操作符**\n\n## SELECT 子句顺序\n\nSELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY → LIMIT\n\n## 子查询-嵌套\n\n嵌套在其他查询中的查询 : 将一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句\n\n- <a name=\"子查询1\">示例</a>:\n\n```sql\nSELECT cust_name, cust_contact\nFROM customers\nWHERE cust_id IN (SELECT cust_id\n                  FROM orders\n                  WHERE order_num IN (SELECT order_num\n                                      FROM orderitems\n                                      WHERE prod_id ='TNT2'))\n\n```\n\n- 上边的例子在性能上不一定是最好的, [之后的联结查询](#联结查询1)会给出一个更好的方法\n- 子查询一般与 IN 操作符结合使用, 也可以用 =, <> 等\n- 作为计算字段使用子查询示例:\n  - 这里嵌套内的 WHERE 使用了完全限定列名, 告诉 SQL 比较 orders 表中的 cust_id 与当前正从customers 表中检索的 cust_id\n  - 这种称为相关子查询, 只要列名可能有多义性, 就必须使用这种语法\n\n```sql\nSELECT cust_name,\n\t\t\t cust_state,\n\t\t\t (SELECT COUNT(*)\n        FROM orders\n        WHERE orders.cust_id = customers.cust_id) AS orders\nFROM customers\nORDER BY cust_name;\n```\n\n> 建议先用硬编码数据建立和测试外层查询, 并且仅在确认它正常后才嵌入子查询\n\n## 联结表(划重点)\n\n联结是一种机制, 用来在一条 SELECT 语句中关联表, 可以联结多个表返回一组输出\n\n- <a name=\"示例-联结表1\">示例</a>: \n\n  ```sql\n  SELECT vend_name, prod_name, prod_price\n  FROM vendors, products\n  WHERE vendors.vend.id = products.vend.id\n  ORDER BY vend_name, prod_name;\n  ```\n\n  这里三个列分别在两个表中, 通过 WHERE 语句正确联结两个表, 需要完全限定列名\n\n- 没有联结条件的表关系返回结果为笛卡尔积, 检索出的行数是第一个表中行数乘以第二个表中行数\n\n- 叉联结是一种笛卡尔积的联结类型\n\n### 内部联结(等值联结)\n\n即[上边示例](#示例-联结表1)的联结方式, 可以这样明确指定联结的类型:\n\n```sql\nSELECT vend_name, prod_name, prod_price\nFROM vendors INNER JOIN products\nON vendors.vend_id = products.vend.id\n```\n\n联结条件用特定的 ON 子句而不是 WHERE 子句给出\n\n### 联结多个表\n\n联结太多表性能下降会很严重\n\n<a name=\"联结查询1\">示例1</a>: 使用联结查询优化[上边的子查询](#子查询1)\n\n```sql\nSELECT cust_name, cust_contact\nFROM customers, orders, orderitems\nWHERE customers.cust_id = orders.cust_id\n\tAND orderitems.order_num = orders.order_num\n\tAND prod_id='TNT2';\n```\n\n### 高级联结\n\n#### 使用表别名\n\n- 缩短SQL语句\n- **允许在单条 SELECT 语句中多次使用相同的表** `FROM employee AS a, employee AS b`\n\n#### 自联结\n\n以下两种解决方案结果相同, 第二种自联结方式效率高于第一种子查询\n\n```sql\nSELECT prod_id, prod_name\nFROM products\nWHERE vend_id = (SELECT vend_id\n                 FROM products\n                WHERE prod_id = 'DTNTR')\n```\n\n```sql\nSELECT p1.prod_id, p1.prod_name\nFROM products AS p1, products AS p2\nWHERE p1.vend_id = p2.vend_id\n\tAND p2.prod_id = 'DTNTR'\n```\n\n#### 自然联结\n\n自然联结排除多次出现, 使每个列只返回一次\n\n- 需要自己手动完成\n\n#### 外部联结\n\n包含了在相关表中没有关联行的行\n\n- 必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表 (包括OUTER JOIN 右边或左边的表) , 即从右边或左边表中选择所有行\n\n- 内部, 外部联结的区别示例|\n  ![image-20210909183350173](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183350173.png)![image-20210909183441236](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183441236.png)\n\n#### 带聚集函数的联结\n\n```sql\nSELECT customers.cust_name,\n\t\t\t customers.cust_id,\n\t\t\t COUNT(orders.order_num) AS num_ord\nFROM customers LEFT OUTER JOIN orders\nON customers.cust_id = orders.cust_id\nGROUP BY customers.cust_id;\n```\n\n## 组合查询-UNION\n\n组合使用多条 SELECT 语句, 等效于具有多个 WHERE 子句的单条 SELECT 语句. 两种查询性能优劣不一定\n\n通过在各 SELECT 语句之间加入 UNION 实现\n\n- 示例: \n\n```sql\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE prod_price < 5\nUNION\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE vend_id IN (1001,1002);\n```\n\n等效于\n\n```sql\nSELECT vend_id, prod_id, prod_price\nFROM products\nWHERE prod_price <= 5\nOR vend_id IN (1001,1002);\n```\n\n- UNION 中的每个查询必须包含相同的列, 表达式或聚集函数, 顺序可以不同\n- UNION 从查询结果集中自动去除重复的行\n  - 使用 UNION ALL 返回不去重的全部行 (此时必须使用 UNION 而不能 WHERE)\n- 组合查询可以应用于不同的表\n\n### 对组合查询结果排序\n\n使用 UNION 时, 只能使用一条 ORDER BY 语句, 出现在最后一条 SELECT 之后,\n\n## 全文本搜索\n\n*并非所有引擎都支持全文本搜索*'\n\n对指定列中各词创建一个索引, 针对这些词进行搜索.\n\n- 为进行全文本搜索, 必须索引被搜索的列, 且随着数据的改变不断进行索引(自动进行)\n- 索引后, SELECT 可与 Match() 和 Against() 一起使用执行搜索\n\n全文本搜索的优点:\n\n- 性能更好\n- 明确控制\n- 智能化的结果\n\n启用全文本搜索支持: 在创建表时通过 FULLTEXT 子句, 示例如下\n\n```sql\nCREATE TABLE productnotes\n(\n    note_id\t\tint\t\t\tNOT NULL AUTO_INCREMENT,\n    prod_id\t\tchar(10)\tNOT NULL,\n    note_date\tdatetime\tNOT NULL,\n    note_text\ttext\t\tNULL,\n    PRIMARY KEY(note_id),\n    FULLTEXT(note_text)\n)ENGING=MyISAM\n```\n\n- 这里根据`FULLTEXT(note_text)`对note_text进行索引\n- 定义之后, MySQL会自动维护索引\n\n进行全文本搜索: 使用`Match()`和`Against()`两个函数进行全文本搜索, 其中Match()指定被搜索的列, Against()指定要使用的搜索表达式, 示例如下\n\n```sql\nSELECT note_text\nFROM productnotes\nWHERE Match(note_text) Against('rabbit');\n```\n\n等效于\n\n```sql\nSELECT note_text\nFROM productnotes\nWHERE note_text LIKE '%rabbit%';\n```\n\n- 指定 rabbit 作为搜索文本, 搜索 note_text 列中包含 rabbit 的行\n- 前者以文本匹配良好程度排序的数据, 后者以不特别有用的顺序返回数据\n\n注意事项: \n\n- 传递给 Match() 的值必须与 FULLTEXT() 中定义的相同, 多个列时必须列出他们且次序正确\n\n- 搜索默认不区分大小写 (除非使用 BINARY 方式)\n\n- 指定多个搜索项时, 包含多数匹配词的行将具有更高的等级值\n\n### 使用查询扩展\n\n流程: `Against('值' WITH QUERY EXPANSION)`\n\n1. 先进行一个基本的全文本搜索, 找出与搜索条件匹配的所有行\n2. MySQL 检查这些匹配行并选择有用的词\n3. 再次进行全文本搜索, 使用原来的词 + 有用的词\n\n### 布尔文本搜索\n\n以布尔方式, 提供如下关于内容的细节: \n\n- 要匹配的词\n- 要排斥的词\n- 排列提示(指定某些词比其他词更重要)\n- 表达式分组\n- 另外一些内容\n\n*即使没有FULLTEXT也可以使用布尔方式, 但会非常缓慢*\n\n示例: `WHERE Match(note_text) Against('heavy -rope*' IN BOOLEAN MODE)`\n\n- `-rope*`指示排除包含rope*的词(以rope开始的词)\n- ![image-20210910205020402](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210910205020402.png)\n\n### 使用说明\n\n> - 在索引全文本数据时，短词被忽略且从索引中排除。短词定义为 那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。\n> - MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参 阅MySQL文档以了解如何完成此工作）。\n> - 许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。\n> - 如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词 或者不出现，或者至少出现在50%的行中）。\n> - 忽略词中的单引号。例如，don't索引为dont。\n> - 不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。\n> - 如前所述，仅在MyISAM数据库引擎中支持全文本搜索。\n\n# 插入/更新/删除~09.10~\n\n## 插入数据-INSERT\n\n通常方法:\n\n```sql\nINSERT INTO 表1\nVALUES(NULL,\n      '值1',\n      '值2',\n      NULL,\n      '值3');\n```\n\n- 插入一个新内容到表1中, 按照表中列的顺序输入\n- 若某一列没有值, 需要使用NULL(允许的话)\n\n更安全的方法:\n\n```sql\nINSERT INTO 表2(列名1,\n              列名2,\n              列名3)\n              VALUES('值1',\n                     NULL,\n                     '值2');\n```\n\n- 在表名后给出列名, 与之后的值顺序对应\n- 不需要提供值的列直接不写出列名 (NO NULL且没有默认值(如自增值)的必须赋值)\n\n插入多行: 同时使用以\";\"分隔的多条 INSERT 语句或者单条 INSERT 有多组值(更快)\n\n```sql\nINSERT INTO 表3(列名1,\n               列名2)\n               VALUES(\n                   '值1',\n                   '值2'\n               ),\n               (\n                   '值3',\n                   '值4'\n               );\n```\n\n插入检索出的数据:\n\n```sql\nINSERT INTO 表4(列1,\n               列2)\n               SELECT 列3,\n               \t\t  列4\n               FROM 表5;\n```\n\n## 更新数据-UPDATE\n\n示例:\n\n```sql\nUPDATE 表1\nSET 列1 = '值1',\n\t列2 = '值2'\nWHERE 条件1;\n```\n\n- 使用 WHERE 限定要更新的行, 不然它会更新所有行\n- 更新时如果出现错误, 则整个UPDATE操作被取消, 使用`UPDATE IGNORE 表1`, 即使发生错误也继续更新\n- 通过`SET 列1 = NULL`删去某列的值(假设允许NULL)\n\n## 删除数据-DELETE\n\n示例:\n\n```sql\nDELETE FROM 表2\nWHERE 条件2;\n```\n\n- 删除指定条件的行\n  - 删除指定的列使用UPDATE\n- 不使用WHERE会删除全部行\n\n删除表中所有行使用 TRUNCATE TABLE 更快(删除原来的表并重新创建一个)\n\n**更新/删除前应现用 SELECT 对 WHERE 条件进行测试**\n\n# 创建和操纵表\n\n## 创建表-CREATE\n\n使用交互式工具, 或直接使用MySQL语句\n\n```sql\nCREATE TABLE customers\n(\n    cust_id \t\t\tint \t\tNOT NULL AUTO_INCREMENT,\n    cust_name \t\tchar(50) \tNOT NULL,\n    cust_address \tchar(50) \tNULL,\n  \tcust_num\t\t\tint\t\t\t\tNOT NULL DEFAULT 1,\n    PREMARY KEY (cust_id)\n) ENGINE=InnoDB;\n```\n\n- 使用`PREMARY KEY (列1, 列2)`指定主键, 主键不能有 NULL 与重复值\n- 使用`NOT NULL`指定不允许 NULL , 否则默认为允许\n- 使用`AUTO_INCREMENT`指定对该列自动增量\n  - `SELECT last_insert_id`返回最后一个 AUTO_INCREMENT 值\n- 使用`DEFAULT 值1`指定默认值\n- 使用`ENGINE=引擎名`指定引擎类型, 不指定时使用默认引擎\n  - `InnoDB` : 不支持全文本搜索, 可靠的事务处理引擎\n  - `MEMORY` : 数据存储在内存中, 速度很快, 适合临时表, 功能等同于 `MyISAM`\n  - `MyISAM` : 性能极高, 支持全文本搜索, 不支持事务处理\n  - **外键不能跨引擎**, 引擎混用的缺点\n\n## 更新表-ALTER\n\n理想状态下不应当更新表, 常见用途是定义外键\n\n```sql\nALTER TABLE 表名1\nADD 列名1 数据类型1; \t\t\t-- 添加列1\nDROP COLUMN 列名2;\t\t\t -- 删除列2\nADD CONSTRAINT 外键约束名 FOREIGN KEY (列名3)\t\t-- 添加外键\nREFERENCES 表名2 (列名4)\nADD CONSTRAINT fk_products_vendors FOREIGN KEY (vend_id)\t\t-- 添加外键示例\nREFERENCES vendors (vend_id)\n```\n\n## 删除表-DROP\n\n`DROP TABLE 表名`, 没有确认, 不能撤销\n\n## 重命名表-RENAME\n\n`RENAME TABLE 表名1 TO 表名2`, 可以同时对多个表重命名\n\n# 其他功能~09.11~\n\n## 使用视图\n\n视图示例① : 简化复杂的联结\n\n```sql\nCREATE VIEW productcustomers AS\nSELECT cust_name, cust_contact, prod_id\nFROM customers, orders, orderitems\nWHERE customers.cust_id = order.cust_id\n\tAND orderitems.order_num = orders.order_num;\n```\n\n- 创建了一个名为 `productcutomers` 的视图, 联结三个表, 返回其中的三列\n- 使用 `SELECT * FROM productcutomers` 返回这个视图的三列\n\n视图示例② : 重新格式化检索出的数据\n\n```sql\nCREATE VIEW vendorlocations AS\nSELECT Concat(RTrim(vend_name), '(', RTrim(vend_country), ')')\n\t\tAS vend_title\nFROM vendors\nORDER BY vend_name;\n```\n\n- 之后使用 `SELECT * FROM vendorlocations;` 即可实现\n\n视图的用处:\n\n- 重用 SQL 语句\n- 简化复杂的 SQL 操作\n- 仅使用表的部分组成, 保护数据\n- 更改数据格式和表示\n\n注意点:\n\n- 视图不包含任何数据, 它包含的是一个 SQL 查询\n- 使用视图相当于执行检索, 过于复杂或嵌套过多的视图性能会下降严重\n- 视图必须唯一命名(与表一样)\n- 使用视图时的 ORDER BY 会覆盖视图内部的 ORDER BY\n- 视图可以与表同时使用\n- 视图不能索引\n\n更新视图: 对视图使用 INSERT, UPDATE, DELETE\n\n- 更新视图其实是更新其基表\n- 若要更新的基数据不能被确定, 则无法更新, 即视图定义中有以下操作: 分组, 联结, 子查询, 并, 聚集函数( Min(), Count(), Sum() )等, DISTINCT, 导出列\n- 视图应用于检索而不是更新\n\n## 使用存储过程\n\n为以后的使用保存一条或多条MySQL语句的集合\n\n用处 :\n\n- 把处理封装, 简化复杂的操作\n- 保证所有开发人员使用的代码相同(同一存储过程), 防止错误\n- 简化对变动的管理 (使用存储过程的人员不需要知道这些变化)\n\n优点 : 简单, 安全, 高性能\n\n- 性能更好, 使用存储过程比单独的 SQL 语句更快\n- 用 一些只能用在单个请求中的MySQL元素和特性 编写功能更强更灵活的代码 [示例](#智能存储示例1)\n\n缺陷 : 编写时 更困难,需要安全访问权限 (编写与执行存储过程的权限是分开的)\n\n### 执行存储过程-<a name=\"调用存储过程1\">调用</a>\n\n```sql\nCALL productpricing(@pricelow,\n                   \t@pricehigh,\n                   \t@priceaverage);\n```\n\n- 通过 `@pricelow` 等向存储过程传递参数\n- 所以MySQL变量都必须以 @ 开始\n- 该语句不显示任何值, 使用 `SELECT @pricelow, @pricehigh;` 调用变量\n\n### 创建存储过程\n\n```sql\nCREATE PROCEDURE productpricing()\nBEGIN\n\tSELECT Ave(prod_price) AS priceaverage\n\tFROM products;\nEND;\n```\n\n- 创建名为 `productpricing` 的存储过程\n- 若存储过程接受参数, 在名称后的 () 中列出\n- 通过 `CALL productpricing()` 调用这个存储过程\n\n使用命令行实用程序时需要更改分隔符, `DELIMITER //` 告诉它使用//作为新的语句结束分隔符, 语句结束时再使用 `DELIMITER ;` 换回去\n\n### 删除存储过程\n\n`DROP PROCEDURE productpricing`\n\n- 删除时没有后面的 () \n- 若过程不存在会返回一个错误, 使用 `DROP PROCEDURE IF EXISTS` 不会产生错误\n\n### 使用参数\n\n一般存储过程不显示结果, 而是把结果返回给变量\n\n- 变量: 内存中一个特定的位置, 用来临时存储数据, \n\n示例 1 :\n\n```sql\nCREAT PROCEDURE productpricing(\n\tOUT p1 DECIMAL(8, 2),\n  OUT ph DECIMAL(8, 2),\n  OUT pa DECIMAL(8, 2)\n)\nBEGIN\n\tSELECT Min(prod_price)\n\tINTO p1\n\tFROM products;\n\tSELECT Max(prod_price)\n\tINTO ph\n\tFROM products;\n\tSELECT Avg(prod_price)\n\tINTO pa\n\tFROM products;\nEND;\n```\n\n- 此过程接受三个参数: p1存储产品最低价, ph存储最高价, pa存储平均价\n- 每个参数必须指定类型, 这里用  DECIMAL 指定十进制, (8, 2) 指定小数点左侧最多 8 位, 右侧最多 2 位. (右侧最多为8)\n- 记录集是不允许的类型, 所以不能通过一个参数返回多行列, 此处要使用三个参数\n- 通过[此处示例](#调用存储过程1)调用此过程\n\n示例 2 :\n\n```sql\nCREATE PROCEDURE ordertotal(\n\tIN onumber INT,\n  OUT ototal DECIMAL(8, 2)\n)\nBEGIN\n\tSELECT Sum(item_price * quantity)\n\tFROM orderitems\n\tWHERE order_num = onumber\n\tINTO ototal;\nEND;\n```\n\n- 使用 IN 表示要输入的数据\n- 示例调用 `CALL ordertotal(20005, @total)`\n\n### 建立智能存储\n\n在存储过程内包含业务规则和智能处理, <a name=\"智能存储示例1\">智能存储示例</a>:\n\n```sql\n-- Name: ordertotal\n-- Parameters: onumber = order number\n\t\t\t\t\t\t-- taxable = 0 ifnot taxable, 1 if taxable\n\t\t\t\t\t\t-- ototal\t = order total variable\n\t\t\t\t\t\t\nCREATE PROCEDURE ordertotal(\n\tIN onumber INT,\n  IN taxable BOOLEAN,\n  OUT ototal DECIMAL(8, 2)\n) COMMENT 'Obtain order total, optionally adding tax'\nBEGIN\n\n\t-- Declare variable for total\n\tDECLARE total DECIMAL(8, 2);\n\t-- Declare tax percentage\n\tDECLARE taxrate INT DEFAULT 6;\n\t\n\t-- Get the order total\n\tSELECT Sum(item_price*quantity)\n\tFROM orderitems\n\tWHERE order_num = onumber\n\tINTO total;\n\t\n\t-- Is this taxable?\n\tIF taxable THEN\n\t\t-- Yes, so add taxrate to the total\n\t\tSELECT total+(total/100*taxrate) INTO total;\n\tEND IF;\n\t\n\t-- And finally, save to out variable\n\tSELECT total INTO ototal;\n\t\nEND;\n```\n\n- 前边放置 -- 增加注释\n- 使用 DECLARE 声明两个局部变量\n\n- 若增加营业税, 则输入 taxable 为真, 执行之后的 SELECT , 并将结果存储到局部变量 total\n- 最后用一句 SELECT 将 total 保存到 ototal\n\n- COMMENT 添加一个解释, 会在 SHOW PROCEDURE STATUS 的结果中显示\n\n- 使用 `CALL ordertotal(20005, 0, @total);` 使用这个过程\n\n### 检查存储过程\n\n显示用来创建一个存储过程的CREATE语句: `SHOW CREATE PROCEDURE ordertotal;` \n\n显示何时何人创建等详细信息: `SHOW PROCEDURE STATUS`, 信息太多可以使用 LIKE 过滤\n\n## 使用游标\n\n~~*不怎么用得到...过一下看一眼*~~\n\n*咕了*\n\n## 使用触发器\n\n*同上*\n\n## 管理事务处理\n\n事务处理是一种机制, 用来管理必须成批执行的 MySQL 操作\n\n- 用来维护数据库的完整性, 保证成批的 MySQL 操作要么完全执行, 要么完全不执行\n- 显示事务处理需要所用数据引擎支持\n\n相关名词:\n\n- 事务: 一组 SQL 语句\n- 回退: 撤销指定 SQL 语句的过程\n- 提交: 将未存储的 SQL 语句结果写入数据库表\n- 保留点: 事务处理中设置的临时占位符, 可以对它发布回退(不同于回退整个事务处理)\n\n使用 `START TRANSACTION`; 标识事务的开始\n\n使用 `ROLLBACK` 回退 START TRANSACTION 之后的所有语句\n\n- 不能回退 CREATE 或 DROP 操作\n- 使用后事务会自动关闭\n\n使用 `COMMIT` 提交 START TRANSACTION 之后的所有语句\n\n- 一般情况语句会自动隐式提交, 事务处理时语句需要手动提交\n- 如果前边的语句出错, COMMIT 不会提交\n- 使用后事务会自动关闭\n\n使用 `SAVEPOINT 保留点1`; 创建保留点, 支持回退部分事务处理\n\n- 使用 `ROLLBACK TO 保留点1;` 回退到指定位置\n\n- 保留点在事务处理完成后自动释放 (执行一条 ROLLBACK 或 COMNMIT)\n\n### 使用 `SET autocommit=0` 取消默认提交\n\n- 该标志针对每个连接而不是服务器\n\n## 字符集和校对顺序\n\n字符集: 字母和符号的集合\n\n编码: 某个字符集成员的内部表示\n\n校对: 规定字符如何比较的指令\n\n使用 `SHOW CHARACTER SET;` 显示所有可用的字符集以及每个字符集的描述和默认校对\n\n使用 `SHOW COLLATION;` 查看所支持校对的完整列表以及它们适用的字符集\n\n- 许多校对出现两次, 一次区分大小写(以 `_cs` 表示), 一次不区分大小写(以 `_ci` 表示)\n\n给表指定字符集和校对: 在 `CREATE TABLE()` 语句后附加 `DEFAULT CHARACTER SET 字符集1 COLLATE 校对1;`\n\n还支持给某个列指定字符集和校对, \n\n也支持在 SELLECT 语句末 `COLLATE 校对2`指定校对 (用于临时区分大小写)\n\n## 安全管理\n\n创建用户, 管理用户权限等\n\n## 数据库维护\n\n备份数据, 数据库维护, 诊断启动问题, 查看日志文件等\n\n\n\n\n\n\n\n\n\n\n\n\n\n事务处理\n\n设置保留点\n\n中途出错回退到保留点\n\n之后的语句呢?","slug":"MySQL笔记","published":1,"updated":"2022-06-16T13:16:49.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txos0008osu77f8n17dr","content":"<h1 id=\"初识09-06\"><a href=\"#初识09-06\" class=\"headerlink\" title=\"初识09.06\"></a>初识<del>09.06</del></h1><h2 id=\"数据库术语\"><a href=\"#数据库术语\" class=\"headerlink\" title=\"数据库术语\"></a>数据库术语</h2><ul>\n<li>数据库 database : 保存有组织的数据的容器</li>\n<li>表 table : 某种特定类型数据的结构化清单<ul>\n<li>相同数据库不能使用相同表名</li>\n</ul>\n</li>\n<li>模式 schema : 关于数据库和表的布局及特性的信息 (有时用作数据库的同义词)</li>\n<li>列 column : 表中的一个字段<ul>\n<li>表由一个或多个列组成</li>\n</ul>\n</li>\n<li>数据类型 datatype : 所容许的数据的类型</li>\n<li>行 row : 表中的一个记录</li>\n<li>主键 primary key :  一列（或一组列），其值能够唯一区分表 中每个行<ul>\n<li>任意两行主键值不同 (一组列时, 所有列值的组合唯一)</li>\n<li>每行都有主键值(不允许NULL)</li>\n<li>好习惯 : <ul>\n<li>不更新主键列中的值</li>\n<li>不重用主键列的值</li>\n<li>不在主键列中使用可能会更改的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>外键 foreign key : 某个表中的一列, 它包含另一个表的主键值, 定义了两个表之间的关系 <ul>\n<li>列名可以与原主键不同, 数据类型要相同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SQL简介\"><a href=\"#SQL简介\" class=\"headerlink\" title=\"SQL简介\"></a>SQL简介</h2><p>sequel是结构化查询语言 Structured Query Language 的缩写, 一种专门用来与数据库通信的语言</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL是一种DBMS, 即一种数据库软件</p>\n<h1 id=\"使用MySQL\"><a href=\"#使用MySQL\" class=\"headerlink\" title=\"使用MySQL\"></a>使用MySQL</h1><p>选择数据库: <code>USE 数据库名</code></p>\n<p>返回可用数据库列表: SHOW DATABASES</p>\n<ul>\n<li>包含MySQL内部使用的数据库</li>\n</ul>\n<p><code>SHOW</code> : 查看数据库, 表和内部信息</p>\n<h1 id=\"检索数据-SELECT09-08\"><a href=\"#检索数据-SELECT09-08\" class=\"headerlink\" title=\"检索数据-SELECT09.08\"></a>检索数据-SELECT<del>09.08</del></h1><h2 id=\"SELECT基础\"><a href=\"#SELECT基础\" class=\"headerlink\" title=\"SELECT基础\"></a>SELECT基础</h2><p><code>SELECT 列名 FROM 表名</code></p>\n<ul>\n<li>SQL语句应以 ; 分隔\\结束</li>\n<li>SQL语句不区分大小写, 但是推荐大写</li>\n<li>SQL语句中的所有空格都被忽略</li>\n</ul>\n<p>检索多个列: <code>SELECT 列名,列名 FROM 表名</code></p>\n<p>检索所有列: <code>SELECT * FROM 表名</code></p>\n<ul>\n<li>这样可以检索未知列</li>\n</ul>\n<p>只检索具有不同值的列表: <code>SELECT DISTINCT 列名 FROM 表名</code></p>\n<p>限制不多于五行: <code>SELECT 列名 FROM 表名 LIMIT 5</code><br>返回从第四行开始的五行: <code>SELECT 列名 FROM 表名 LIMIT 4,5</code> , 同义于<code>SELECT 列名 FROM 表名 LIMIT 5 OFFSET 4</code></p>\n<ul>\n<li>检索出来的<strong>第一行是行0</strong></li>\n</ul>\n<p>使用完全限定的列名, 表名: <code>SELECT 表名.列名 FROM 连接名.表名</code></p>\n<h2 id=\"排序检索数据-ORDER-BY\"><a href=\"#排序检索数据-ORDER-BY\" class=\"headerlink\" title=\"排序检索数据-ORDER BY\"></a>排序检索数据-ORDER BY</h2><ul>\n<li>如果不排序, 数据一般以它在底层表中出现的顺序显示 (更新或删除后会受到影响)</li>\n</ul>\n<p>使用 OREDR BY : <code>SELECT 列名1 FROM 表名 ORDER BY 列名2</code></p>\n<ul>\n<li>可以用<code>,</code>分隔以多列排序</li>\n<li>默认以升序排序(ASC), 在列名后附加<code> DESC</code>指定该列以降序排序</li>\n</ul>\n<h2 id=\"条件过滤数据-WHERE\"><a href=\"#条件过滤数据-WHERE\" class=\"headerlink\" title=\"条件过滤数据-WHERE\"></a>条件过滤数据-WHERE</h2><p>使用 WHERE : <code>SELECT 列名1 FROM 表名 WHERE 条件</code></p>\n<ul>\n<li><strong><code>ORDER BY</code>应位于<code>WHERE</code>之后</strong></li>\n<li>WHERE 支持的子句操作符: =, &lt;&gt;(不等于), !=(不等于), &lt;, &lt;=, &gt;, &gt;=, BETWEEN(在指定的两个数据之间</li>\n<li>字符串以单引号括住, 数字不需要</li>\n<li>BETWEEN 示例: <code>SELECT 列名1 FROM 表名 WHERE 列名2 BETWEEN 数值a AND 数值b</code><ul>\n<li>BETWEEN 的范围是&gt;=a , &lt;=b</li>\n</ul>\n</li>\n<li>空值检查: <code>WHERE 列名 IS NULL</code><ul>\n<li>不匹配搜索(使用不等号)不会返回具有NULL值的行</li>\n</ul>\n</li>\n</ul>\n<p>组合 WHERE 语句, 使用AND, OR : <code>WHERE 条件1 AND 条件2</code></p>\n<ul>\n<li>AND 的优先级比 OR 高, 需要使用圆括号正确组合操作符</li>\n</ul>\n<p>通过 IN 指定条件范围: <code>WHERE 列名 IN (值1, 值2)</code></p>\n<ul>\n<li>IN 比等效的 OR 执行更快</li>\n<li>IN 可以包含其他 SELECT 语句</li>\n</ul>\n<p>通过 NOT 否定后跟条件的关键字: <code>WHERE 列名 NOT IN (值1, 值2)</code></p>\n<ul>\n<li>MySQL支持 NOT 对IN, BETWEEN, EXISTS取反</li>\n<li>NOT 只否定后边紧跟的一个条件</li>\n</ul>\n<p>通过 LIKE 使用通配符: <code>WHERE 列名 LIKE &#39;jet%&#39;</code> , 找出所有词以jet起头的内容</p>\n<ul>\n<li>通配符 % 表示任意字符出现任意次数(包括0个字符), 此处即接受jet后的任意字符<ul>\n<li><code>LIKE &#39;%&#39;</code>不能匹配NULL </li>\n</ul>\n</li>\n<li>通配符可以在任意位置出现任意次</li>\n<li>通配符 _ 只匹配单个字符, 不包括0个字符</li>\n<li>通配符运行效率较差, 尽量使用其他语句<br>使用多个条件搜索时应当将通配符相关的搜索条件放在靠后执行的位置</li>\n</ul>\n<h3 id=\"正则表达式-REGEXP\"><a href=\"#正则表达式-REGEXP\" class=\"headerlink\" title=\"正则表达式-REGEXP\"></a>正则表达式-REGEXP</h3><p>REGEXP 后所跟的东西作为正则表达式</p>\n<ul>\n<li>例: <code>WHERE 列名 REGEXP &#39;1000&#39;</code>, 检索列中包含文本 1000 的所有行</li>\n<li><code>.</code>是正则表达式语言中一个特殊的字符, 表示匹配任意一个字符</li>\n<li>默认不区分大小写, 使用<code>BINARY</code>关键字区分大小写</li>\n</ul>\n<p>OR 匹配: <code>WHERE 列名 REGEXP &#39;1000 | 2000 | 3000&#39;</code></p>\n<p>[] 匹配一组字符中的任意一个: <code>REGEXP [123]000</code>, 等效上一句</p>\n<ul>\n<li><code>[^123]</code>匹配除1, 2, 3以外的任何内容</li>\n<li><code>[0-9]</code>匹配 0~9 任意数字</li>\n</ul>\n<p>特殊匹配规则:</p>\n<ul>\n<li><p>匹配”-“与”.”等特殊字符: 使用\\为前导, 进行转义 <code>\\\\-</code> </p>\n</li>\n<li><p><code>\\\\ </code>也用来引用元字符: 如<code>\\\\n</code>表示换行</p>\n</li>\n<li><p>匹配字符类: 如<code>[:alnum:]</code>表示任意字母和数字, 同<code>[a-zA-Z0-9]</code></p>\n</li>\n</ul>\n<p>匹配多个实例: 默认只对其前边的一个字符有效</p>\n<ul>\n<li><code>*</code> : 0个或多个匹配</li>\n<li><code>+</code> : 1个或多个匹配, 等于<code>&#123;1, &#125;</code></li>\n<li><code>?</code> : 0个或一个匹配, 等于 <code>&#123;0,1&#125;</code></li>\n<li><code>&#123;数值&#125;</code> : 指定数目的匹配</li>\n<li><code>&#123;数值, &#125;</code> : 不少于指定数目的匹配</li>\n<li><code>&#123;数值1, 数值2&#125;</code> : 匹配数目的范围 (数值2不超过255)</li>\n<li>示例: <ol>\n<li><code>REGEXP &#39;\\\\([0-9] sticks?\\\\)&#39;</code> : 此句中 ? 使最后的 s 成为可选字符, 有没有s都会被检出, 有其他字符不会</li>\n<li><code>REGEXP &#39;[[:digit:]]&#123;4&#125;</code> : 匹配连在一起的任意四位数字, 等效于<code>&#39;[0-9][0-9][0-9][0-9]&#39;</code></li>\n</ol>\n</li>\n</ul>\n<p>匹配特定位置的文本: </p>\n<ul>\n<li><code>^</code> : 文本的开始</li>\n<li><code>$</code> : 文本的结尾</li>\n<li><code>[[:&lt;:]]</code> : 词的开始</li>\n<li><code>[[:&gt;:]]</code> : 词的结尾</li>\n<li>示例: <code>REGEXP &#39;^[0-9\\\\.]</code> 在 . 或任意数字为串中第一个字符时匹配</li>\n<li>通过^开始每个表达式, $结束每个表达式, 可以使REGEXP的作用与LIKE一样</li>\n</ul>\n<h2 id=\"创建计算字段\"><a href=\"#创建计算字段\" class=\"headerlink\" title=\"创建计算字段\"></a>创建计算字段</h2><p>字段: 基本与 列 相同</p>\n<p>Concat()函数 拼接: 将值连在一起构成单个值</p>\n<ul>\n<li>示例: <code>SELECT Concat(列名1, &#39; (&#39;, 列名2, &#39;)&#39;)</code><br>会输出<code>值1 (值2)</code></li>\n<li>Concat 的多个串以”,”分隔</li>\n</ul>\n<p>删除数据多余的空格: Trim()函数</p>\n<ul>\n<li><code>RTrim(列名)</code>去掉值右边的空格</li>\n<li><code>LTrim(列名)</code>去掉值左边的空格</li>\n<li><code>Trim(列名)</code>去掉左右两边的空格</li>\n</ul>\n<p>AS 使用别名: 新计算的列没有名字无法引用, 赋予别名解决这个问题</p>\n<ul>\n<li>示例: <code>SELECT Concat(列名1, &#39; (&#39;, 列名2, &#39;)&#39;) AS 别名</code></li>\n<li>在原名不合法时重命名它, 易误解时扩充它</li>\n<li>别名也称导出列</li>\n</ul>\n<p>计算: 支持 +, -, *, / 四个基本操作运算符, 可用圆括号区分优先顺序</p>\n<ul>\n<li>示例: <code>SELECT 列名1 + 列名2 AS 别名</code></li>\n</ul>\n<h2 id=\"数据处理函数\"><a href=\"#数据处理函数\" class=\"headerlink\" title=\"数据处理函数\"></a>数据处理函数</h2><p><em>函数的可移植性较差, 使用时建议做好注释</em></p>\n<p>文本处理函数:</p>\n<ul>\n<li>示例 <code>WHERE Soundex(列名) = Soundex(&#39;Lie&#39;)</code>, 匹配发音与Lie类似的值(如Lee)</li>\n</ul>\n<p>日期和时间处理函数:</p>\n<ul>\n<li>日期格式应为 <code>yyyy-mm-dd</code></li>\n<li>基本日期条件过滤: <code>WHERE 列名 = &#39;yyyy-mm-dd&#39;</code><ul>\n<li>默认具体时间为<code>00:00:00</code>, 如果表中值为<code>yyyy-mm-dd 11:30:05</code>不会匹配</li>\n<li>使用Date()函数, 仅比较给出的日期(即只比较<code>yyyy-mm-dd</code>), 相应的Time函数只比较时间: <code>WHERE Date(列名) = &#39;yyyy-mm-dd&#39;</code></li>\n<li>使用Year(), Month()等只返回年份, 月份</li>\n</ul>\n</li>\n</ul>\n<p>数值处理函数: 一般用于代数, 三角或几何运算</p>\n<h2 id=\"汇总数据\"><a href=\"#汇总数据\" class=\"headerlink\" title=\"汇总数据\"></a>汇总数据</h2><blockquote>\n<p>有时返回具体数据是对时间和资源的浪费</p>\n</blockquote>\n<p>SQL的五个聚集函数:</p>\n<table border=\"2\">\n    <tr>\n        <th>函数</th>\n        <td>AVG()</td>\n        <td>COUNT()</td>\n        <td>MAX()</td>\n        <td>MIN()</td>\n        <td>SUM()</td>\n    </tr>\n    <tr>\n        <th>功能</th>\n        <td>平均值</td>\n        <td>行数</td>\n        <td>最大值</td>\n        <td>最小值</td>\n        <td>总和</td>\n    </tr>\n</table>\nAVG() : `SELECT AVG(列名) AS 别名 FROM 表名` , 得到这一列的平均值\n\n<p>COUNT() : </p>\n<ul>\n<li><code>SELECT COUNT(*)</code> : 对表中包括空值的所有行计数</li>\n<li><code>COUNT(列名)</code> : 对特定列中具有值的行计数, 不计算NULL</li>\n</ul>\n<p>MAX() 与 MIN() 与 SUM() : 要求指定列名, 会忽略NULL</p>\n<p>**使用<code>DISTINCT</code>参数, 只考虑不同的内容: **</p>\n<ul>\n<li>示例: <code>AVG(DISTINCT 列名)</code>, 计算平均值时只取不同的值</li>\n<li>必须指定列名</li>\n<li><em>有一个对应的参数<code>ALL</code>, 是没什么用的默认值</em></li>\n</ul>\n<p>组合聚集参数: 使用”,”隔开不同语句, 可以换行好看些</p>\n<h2 id=\"分组数据-GROUP-BY09-09\"><a href=\"#分组数据-GROUP-BY09-09\" class=\"headerlink\" title=\"分组数据-GROUP BY09.09\"></a>分组数据-GROUP BY<del>09.09</del></h2><p>把数据分成多个逻辑组, 以便对每个组进行聚集计算</p>\n<ul>\n<li><p>示例: <code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id</code><br>输出: <img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909130806621.png\" alt=\"image-20210909130806621\"></p>\n</li>\n<li><p>GROUP BY子句可以包含任意数目的列, 使得可以通过对分组嵌套达到更细致的控制</p>\n</li>\n<li><p>GROUP BY子句中不能使用别名, 若在 SELECT 中使用表达式, GROUP BY 子句中须指定相同的表达式</p>\n</li>\n<li><p>除聚集计算语句外, SELECT 中每个列都需要在GROUP BY 子句中给出</p>\n</li>\n<li><p>一个或多个NULL值也会被分为一组</p>\n</li>\n<li><p><strong>GROUP BY 子句应在 WHERE 之后, ORDER BY 之前</strong></p>\n</li>\n<li><p><strong>使用 GROUP BY 子句时, 应当给出 ORDER BY 子句保证正确排序</strong></p>\n</li>\n<li><p>后边附加<code>WITH ROLLUP</code>, 可以获得所有分组汇总的值</p>\n</li>\n</ul>\n<h3 id=\"过滤分组-HAVING\"><a href=\"#过滤分组-HAVING\" class=\"headerlink\" title=\"过滤分组-HAVING\"></a>过滤分组-HAVING</h3><p>HAVING 非常类似于 WHERE (WHERE 在分组前进行过滤, HAVING 在分组后进行过滤)</p>\n<ul>\n<li>示例: <code>SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;=2</code><br>过滤两个以上的 COUNT(*) 的分组</li>\n<li>不能使用别名</li>\n<li><strong>HAVING支持所有WHERE操作符</strong></li>\n</ul>\n<h2 id=\"SELECT-子句顺序\"><a href=\"#SELECT-子句顺序\" class=\"headerlink\" title=\"SELECT 子句顺序\"></a>SELECT 子句顺序</h2><p>SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY → LIMIT</p>\n<h2 id=\"子查询-嵌套\"><a href=\"#子查询-嵌套\" class=\"headerlink\" title=\"子查询-嵌套\"></a>子查询-嵌套</h2><p>嵌套在其他查询中的查询 : 将一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句</p>\n<ul>\n<li><a name=\"子查询1\">示例</a>:</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact\n<span class=\"token keyword\">FROM</span> customers\n<span class=\"token keyword\">WHERE</span> cust_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> cust_id\n                  <span class=\"token keyword\">FROM</span> orders\n                  <span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> order_num\n                                      <span class=\"token keyword\">FROM</span> orderitems\n                                      <span class=\"token keyword\">WHERE</span> prod_id <span class=\"token operator\">=</span><span class=\"token string\">'TNT2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>上边的例子在性能上不一定是最好的, <a href=\"#%E8%81%94%E7%BB%93%E6%9F%A5%E8%AF%A21\">之后的联结查询</a>会给出一个更好的方法</li>\n<li>子查询一般与 IN 操作符结合使用, 也可以用 =, &lt;&gt; 等</li>\n<li>作为计算字段使用子查询示例:<ul>\n<li>这里嵌套内的 WHERE 使用了完全限定列名, 告诉 SQL 比较 orders 表中的 cust_id 与当前正从customers 表中检索的 cust_id</li>\n<li>这种称为相关子查询, 只要列名可能有多义性, 就必须使用这种语法</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span>\n\t\t\t cust_state<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">FROM</span> orders\n        <span class=\"token keyword\">WHERE</span> orders<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> orders\n<span class=\"token keyword\">FROM</span> customers\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> cust_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>建议先用硬编码数据建立和测试外层查询, 并且仅在确认它正常后才嵌入子查询</p>\n</blockquote>\n<h2 id=\"联结表-划重点\"><a href=\"#联结表-划重点\" class=\"headerlink\" title=\"联结表(划重点)\"></a>联结表(划重点)</h2><p>联结是一种机制, 用来在一条 SELECT 语句中关联表, 可以联结多个表返回一组输出</p>\n<ul>\n<li><p><a name=\"示例-联结表1\">示例</a>: </p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> vendors<span class=\"token punctuation\">,</span> products\n<span class=\"token keyword\">WHERE</span> vendors<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里三个列分别在两个表中, 通过 WHERE 语句正确联结两个表, 需要完全限定列名</p>\n</li>\n<li><p>没有联结条件的表关系返回结果为笛卡尔积, 检索出的行数是第一个表中行数乘以第二个表中行数</p>\n</li>\n<li><p>叉联结是一种笛卡尔积的联结类型</p>\n</li>\n</ul>\n<h3 id=\"内部联结-等值联结\"><a href=\"#内部联结-等值联结\" class=\"headerlink\" title=\"内部联结(等值联结)\"></a>内部联结(等值联结)</h3><p>即<a href=\"#%E7%A4%BA%E4%BE%8B-%E8%81%94%E7%BB%93%E8%A1%A81\">上边示例</a>的联结方式, 可以这样明确指定联结的类型:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> vendors <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> products\n<span class=\"token keyword\">ON</span> vendors<span class=\"token punctuation\">.</span>vend_id <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>联结条件用特定的 ON 子句而不是 WHERE 子句给出</p>\n<h3 id=\"联结多个表\"><a href=\"#联结多个表\" class=\"headerlink\" title=\"联结多个表\"></a>联结多个表</h3><p>联结太多表性能下降会很严重</p>\n<p><a name=\"联结查询1\">示例1</a>: 使用联结查询优化<a href=\"#%E5%AD%90%E6%9F%A5%E8%AF%A21\">上边的子查询</a></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact\n<span class=\"token keyword\">FROM</span> customers<span class=\"token punctuation\">,</span> orders<span class=\"token punctuation\">,</span> orderitems\n<span class=\"token keyword\">WHERE</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>cust_id\n\t<span class=\"token operator\">AND</span> orderitems<span class=\"token punctuation\">.</span>order_num <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>order_num\n\t<span class=\"token operator\">AND</span> prod_id<span class=\"token operator\">=</span><span class=\"token string\">'TNT2'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高级联结\"><a href=\"#高级联结\" class=\"headerlink\" title=\"高级联结\"></a>高级联结</h3><h4 id=\"使用表别名\"><a href=\"#使用表别名\" class=\"headerlink\" title=\"使用表别名\"></a>使用表别名</h4><ul>\n<li>缩短SQL语句</li>\n<li><strong>允许在单条 SELECT 语句中多次使用相同的表</strong> <code>FROM employee AS a, employee AS b</code></li>\n</ul>\n<h4 id=\"自联结\"><a href=\"#自联结\" class=\"headerlink\" title=\"自联结\"></a>自联结</h4><p>以下两种解决方案结果相同, 第二种自联结方式效率高于第一种子查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> prod_id<span class=\"token punctuation\">,</span> prod_name\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> vend_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> vend_id\n                 <span class=\"token keyword\">FROM</span> products\n                <span class=\"token keyword\">WHERE</span> prod_id <span class=\"token operator\">=</span> <span class=\"token string\">'DTNTR'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> p1<span class=\"token punctuation\">.</span>prod_id<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>prod_name\n<span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">AS</span> p1<span class=\"token punctuation\">,</span> products <span class=\"token keyword\">AS</span> p2\n<span class=\"token keyword\">WHERE</span> p1<span class=\"token punctuation\">.</span>vend_id <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>vend_id\n\t<span class=\"token operator\">AND</span> p2<span class=\"token punctuation\">.</span>prod_id <span class=\"token operator\">=</span> <span class=\"token string\">'DTNTR'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"自然联结\"><a href=\"#自然联结\" class=\"headerlink\" title=\"自然联结\"></a>自然联结</h4><p>自然联结排除多次出现, 使每个列只返回一次</p>\n<ul>\n<li>需要自己手动完成</li>\n</ul>\n<h4 id=\"外部联结\"><a href=\"#外部联结\" class=\"headerlink\" title=\"外部联结\"></a>外部联结</h4><p>包含了在相关表中没有关联行的行</p>\n<ul>\n<li><p>必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表 (包括OUTER JOIN 右边或左边的表) , 即从右边或左边表中选择所有行</p>\n</li>\n<li><p>内部, 外部联结的区别示例|<br><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183350173.png\" alt=\"image-20210909183350173\"><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183441236.png\" alt=\"image-20210909183441236\"></p>\n</li>\n</ul>\n<h4 id=\"带聚集函数的联结\"><a href=\"#带聚集函数的联结\" class=\"headerlink\" title=\"带聚集函数的联结\"></a>带聚集函数的联结</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> customers<span class=\"token punctuation\">.</span>cust_name<span class=\"token punctuation\">,</span>\n\t\t\t customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">.</span>order_num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_ord\n<span class=\"token keyword\">FROM</span> customers <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> orders\n<span class=\"token keyword\">ON</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>cust_id\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"组合查询-UNION\"><a href=\"#组合查询-UNION\" class=\"headerlink\" title=\"组合查询-UNION\"></a>组合查询-UNION</h2><p>组合使用多条 SELECT 语句, 等效于具有多个 WHERE 子句的单条 SELECT 语句. 两种查询性能优劣不一定</p>\n<p>通过在各 SELECT 语句之间加入 UNION 实现</p>\n<ul>\n<li>示例: </li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> prod_price <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> vend_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>等效于</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> prod_price <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">OR</span> vend_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>UNION 中的每个查询必须包含相同的列, 表达式或聚集函数, 顺序可以不同</li>\n<li>UNION 从查询结果集中自动去除重复的行<ul>\n<li>使用 UNION ALL 返回不去重的全部行 (此时必须使用 UNION 而不能 WHERE)</li>\n</ul>\n</li>\n<li>组合查询可以应用于不同的表</li>\n</ul>\n<h3 id=\"对组合查询结果排序\"><a href=\"#对组合查询结果排序\" class=\"headerlink\" title=\"对组合查询结果排序\"></a>对组合查询结果排序</h3><p>使用 UNION 时, 只能使用一条 ORDER BY 语句, 出现在最后一条 SELECT 之后,</p>\n<h2 id=\"全文本搜索\"><a href=\"#全文本搜索\" class=\"headerlink\" title=\"全文本搜索\"></a>全文本搜索</h2><p><em>并非所有引擎都支持全文本搜索</em>‘</p>\n<p>对指定列中各词创建一个索引, 针对这些词进行搜索.</p>\n<ul>\n<li>为进行全文本搜索, 必须索引被搜索的列, 且随着数据的改变不断进行索引(自动进行)</li>\n<li>索引后, SELECT 可与 Match() 和 Against() 一起使用执行搜索</li>\n</ul>\n<p>全文本搜索的优点:</p>\n<ul>\n<li>性能更好</li>\n<li>明确控制</li>\n<li>智能化的结果</li>\n</ul>\n<p>启用全文本搜索支持: 在创建表时通过 FULLTEXT 子句, 示例如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> productnotes\n<span class=\"token punctuation\">(</span>\n    note_id\t\t<span class=\"token keyword\">int</span>\t\t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    prod_id\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    note_date\t<span class=\"token keyword\">datetime</span>\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    note_text\t<span class=\"token keyword\">text</span>\t\t<span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>note_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    FULLTEXT<span class=\"token punctuation\">(</span>note_text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>ENGING<span class=\"token operator\">=</span>MyISAM<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里根据<code>FULLTEXT(note_text)</code>对note_text进行索引</li>\n<li>定义之后, MySQL会自动维护索引</li>\n</ul>\n<p>进行全文本搜索: 使用<code>Match()</code>和<code>Against()</code>两个函数进行全文本搜索, 其中Match()指定被搜索的列, Against()指定要使用的搜索表达式, 示例如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> note_text\n<span class=\"token keyword\">FROM</span> productnotes\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">Match</span><span class=\"token punctuation\">(</span>note_text<span class=\"token punctuation\">)</span> Against<span class=\"token punctuation\">(</span><span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>等效于</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> note_text\n<span class=\"token keyword\">FROM</span> productnotes\n<span class=\"token keyword\">WHERE</span> note_text <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%rabbit%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>指定 rabbit 作为搜索文本, 搜索 note_text 列中包含 rabbit 的行</li>\n<li>前者以文本匹配良好程度排序的数据, 后者以不特别有用的顺序返回数据</li>\n</ul>\n<p>注意事项: </p>\n<ul>\n<li><p>传递给 Match() 的值必须与 FULLTEXT() 中定义的相同, 多个列时必须列出他们且次序正确</p>\n</li>\n<li><p>搜索默认不区分大小写 (除非使用 BINARY 方式)</p>\n</li>\n<li><p>指定多个搜索项时, 包含多数匹配词的行将具有更高的等级值</p>\n</li>\n</ul>\n<h3 id=\"使用查询扩展\"><a href=\"#使用查询扩展\" class=\"headerlink\" title=\"使用查询扩展\"></a>使用查询扩展</h3><p>流程: <code>Against(&#39;值&#39; WITH QUERY EXPANSION)</code></p>\n<ol>\n<li>先进行一个基本的全文本搜索, 找出与搜索条件匹配的所有行</li>\n<li>MySQL 检查这些匹配行并选择有用的词</li>\n<li>再次进行全文本搜索, 使用原来的词 + 有用的词</li>\n</ol>\n<h3 id=\"布尔文本搜索\"><a href=\"#布尔文本搜索\" class=\"headerlink\" title=\"布尔文本搜索\"></a>布尔文本搜索</h3><p>以布尔方式, 提供如下关于内容的细节: </p>\n<ul>\n<li>要匹配的词</li>\n<li>要排斥的词</li>\n<li>排列提示(指定某些词比其他词更重要)</li>\n<li>表达式分组</li>\n<li>另外一些内容</li>\n</ul>\n<p><em>即使没有FULLTEXT也可以使用布尔方式, 但会非常缓慢</em></p>\n<p>示例: <code>WHERE Match(note_text) Against(&#39;heavy -rope*&#39; IN BOOLEAN MODE)</code></p>\n<ul>\n<li><code>-rope*</code>指示排除包含rope*的词(以rope开始的词)</li>\n<li><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210910205020402.png\" alt=\"image-20210910205020402\"></li>\n</ul>\n<h3 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h3><blockquote>\n<ul>\n<li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为 那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li>\n<li>MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参 阅MySQL文档以了解如何完成此工作）。</li>\n<li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。</li>\n<li>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词 或者不出现，或者至少出现在50%的行中）。</li>\n<li>忽略词中的单引号。例如，don’t索引为dont。</li>\n<li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li>\n<li>如前所述，仅在MyISAM数据库引擎中支持全文本搜索。</li>\n</ul>\n</blockquote>\n<h1 id=\"插入-更新-删除09-10\"><a href=\"#插入-更新-删除09-10\" class=\"headerlink\" title=\"插入/更新/删除09.10\"></a>插入/更新/删除<del>09.10</del></h1><h2 id=\"插入数据-INSERT\"><a href=\"#插入数据-INSERT\" class=\"headerlink\" title=\"插入数据-INSERT\"></a>插入数据-INSERT</h2><p>通常方法:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">1</span>\n<span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>插入一个新内容到表1中, 按照表中列的顺序输入</li>\n<li>若某一列没有值, 需要使用NULL(允许的话)</li>\n</ul>\n<p>更安全的方法:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>列名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n              列名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n              列名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在表名后给出列名, 与之后的值顺序对应</li>\n<li>不需要提供值的列直接不写出列名 (NO NULL且没有默认值(如自增值)的必须赋值)</li>\n</ul>\n<p>插入多行: 同时使用以”;”分隔的多条 INSERT 语句或者单条 INSERT 有多组值(更快)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">3</span><span class=\"token punctuation\">(</span>列名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n               列名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'值2'</span>\n               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">(</span>\n                   <span class=\"token string\">'值3'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'值4'</span>\n               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>插入检索出的数据:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">4</span><span class=\"token punctuation\">(</span>列<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n               列<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">SELECT</span> 列<span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n               \t\t  列<span class=\"token number\">4</span>\n               <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"更新数据-UPDATE\"><a href=\"#更新数据-UPDATE\" class=\"headerlink\" title=\"更新数据-UPDATE\"></a>更新数据-UPDATE</h2><p>示例:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> 表<span class=\"token number\">1</span>\n<span class=\"token keyword\">SET</span> 列<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n\t列<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'值2'</span>\n<span class=\"token keyword\">WHERE</span> 条件<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用 WHERE 限定要更新的行, 不然它会更新所有行</li>\n<li>更新时如果出现错误, 则整个UPDATE操作被取消, 使用<code>UPDATE IGNORE 表1</code>, 即使发生错误也继续更新</li>\n<li>通过<code>SET 列1 = NULL</code>删去某列的值(假设允许NULL)</li>\n</ul>\n<h2 id=\"删除数据-DELETE\"><a href=\"#删除数据-DELETE\" class=\"headerlink\" title=\"删除数据-DELETE\"></a>删除数据-DELETE</h2><p>示例:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">2</span>\n<span class=\"token keyword\">WHERE</span> 条件<span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>删除指定条件的行<ul>\n<li>删除指定的列使用UPDATE</li>\n</ul>\n</li>\n<li>不使用WHERE会删除全部行</li>\n</ul>\n<p>删除表中所有行使用 TRUNCATE TABLE 更快(删除原来的表并重新创建一个)</p>\n<p><strong>更新/删除前应现用 SELECT 对 WHERE 条件进行测试</strong></p>\n<h1 id=\"创建和操纵表\"><a href=\"#创建和操纵表\" class=\"headerlink\" title=\"创建和操纵表\"></a>创建和操纵表</h1><h2 id=\"创建表-CREATE\"><a href=\"#创建表-CREATE\" class=\"headerlink\" title=\"创建表-CREATE\"></a>创建表-CREATE</h2><p>使用交互式工具, 或直接使用MySQL语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> customers\n<span class=\"token punctuation\">(</span>\n    cust_id \t\t\t<span class=\"token keyword\">int</span> \t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    cust_name \t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    cust_address \t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \t<span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  \tcust_num\t\t\t<span class=\"token keyword\">int</span>\t\t\t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    PREMARY <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>cust_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用<code>PREMARY KEY (列1, 列2)</code>指定主键, 主键不能有 NULL 与重复值</li>\n<li>使用<code>NOT NULL</code>指定不允许 NULL , 否则默认为允许</li>\n<li>使用<code>AUTO_INCREMENT</code>指定对该列自动增量<ul>\n<li><code>SELECT last_insert_id</code>返回最后一个 AUTO_INCREMENT 值</li>\n</ul>\n</li>\n<li>使用<code>DEFAULT 值1</code>指定默认值</li>\n<li>使用<code>ENGINE=引擎名</code>指定引擎类型, 不指定时使用默认引擎<ul>\n<li><code>InnoDB</code> : 不支持全文本搜索, 可靠的事务处理引擎</li>\n<li><code>MEMORY</code> : 数据存储在内存中, 速度很快, 适合临时表, 功能等同于 <code>MyISAM</code></li>\n<li><code>MyISAM</code> : 性能极高, 支持全文本搜索, 不支持事务处理</li>\n<li><strong>外键不能跨引擎</strong>, 引擎混用的缺点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"更新表-ALTER\"><a href=\"#更新表-ALTER\" class=\"headerlink\" title=\"更新表-ALTER\"></a>更新表-ALTER</h2><p>理想状态下不应当更新表, 常见用途是定义外键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token number\">1</span>\n<span class=\"token keyword\">ADD</span> 列名<span class=\"token number\">1</span> 数据类型<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">-- 添加列1</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">COLUMN</span> 列名<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">-- 删除列2</span>\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键约束名 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>列名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">-- 添加外键</span>\n<span class=\"token keyword\">REFERENCES</span> 表名<span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>列名<span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> fk_products_vendors <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>vend_id<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">-- 添加外键示例</span>\n<span class=\"token keyword\">REFERENCES</span> vendors <span class=\"token punctuation\">(</span>vend_id<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除表-DROP\"><a href=\"#删除表-DROP\" class=\"headerlink\" title=\"删除表-DROP\"></a>删除表-DROP</h2><p><code>DROP TABLE 表名</code>, 没有确认, 不能撤销</p>\n<h2 id=\"重命名表-RENAME\"><a href=\"#重命名表-RENAME\" class=\"headerlink\" title=\"重命名表-RENAME\"></a>重命名表-RENAME</h2><p><code>RENAME TABLE 表名1 TO 表名2</code>, 可以同时对多个表重命名</p>\n<h1 id=\"其他功能09-11\"><a href=\"#其他功能09-11\" class=\"headerlink\" title=\"其他功能09.11\"></a>其他功能<del>09.11</del></h1><h2 id=\"使用视图\"><a href=\"#使用视图\" class=\"headerlink\" title=\"使用视图\"></a>使用视图</h2><p>视图示例① : 简化复杂的联结</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> productcustomers <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact<span class=\"token punctuation\">,</span> prod_id\n<span class=\"token keyword\">FROM</span> customers<span class=\"token punctuation\">,</span> orders<span class=\"token punctuation\">,</span> orderitems\n<span class=\"token keyword\">WHERE</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> <span class=\"token keyword\">order</span><span class=\"token punctuation\">.</span>cust_id\n\t<span class=\"token operator\">AND</span> orderitems<span class=\"token punctuation\">.</span>order_num <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>order_num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>创建了一个名为 <code>productcutomers</code> 的视图, 联结三个表, 返回其中的三列</li>\n<li>使用 <code>SELECT * FROM productcutomers</code> 返回这个视图的三列</li>\n</ul>\n<p>视图示例② : 重新格式化检索出的数据</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> vendorlocations <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> Concat<span class=\"token punctuation\">(</span>RTrim<span class=\"token punctuation\">(</span>vend_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> RTrim<span class=\"token punctuation\">(</span>vend_country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">AS</span> vend_title\n<span class=\"token keyword\">FROM</span> vendors\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> vend_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>之后使用 <code>SELECT * FROM vendorlocations;</code> 即可实现</li>\n</ul>\n<p>视图的用处:</p>\n<ul>\n<li>重用 SQL 语句</li>\n<li>简化复杂的 SQL 操作</li>\n<li>仅使用表的部分组成, 保护数据</li>\n<li>更改数据格式和表示</li>\n</ul>\n<p>注意点:</p>\n<ul>\n<li>视图不包含任何数据, 它包含的是一个 SQL 查询</li>\n<li>使用视图相当于执行检索, 过于复杂或嵌套过多的视图性能会下降严重</li>\n<li>视图必须唯一命名(与表一样)</li>\n<li>使用视图时的 ORDER BY 会覆盖视图内部的 ORDER BY</li>\n<li>视图可以与表同时使用</li>\n<li>视图不能索引</li>\n</ul>\n<p>更新视图: 对视图使用 INSERT, UPDATE, DELETE</p>\n<ul>\n<li>更新视图其实是更新其基表</li>\n<li>若要更新的基数据不能被确定, 则无法更新, 即视图定义中有以下操作: 分组, 联结, 子查询, 并, 聚集函数( Min(), Count(), Sum() )等, DISTINCT, 导出列</li>\n<li>视图应用于检索而不是更新</li>\n</ul>\n<h2 id=\"使用存储过程\"><a href=\"#使用存储过程\" class=\"headerlink\" title=\"使用存储过程\"></a>使用存储过程</h2><p>为以后的使用保存一条或多条MySQL语句的集合</p>\n<p>用处 :</p>\n<ul>\n<li>把处理封装, 简化复杂的操作</li>\n<li>保证所有开发人员使用的代码相同(同一存储过程), 防止错误</li>\n<li>简化对变动的管理 (使用存储过程的人员不需要知道这些变化)</li>\n</ul>\n<p>优点 : 简单, 安全, 高性能</p>\n<ul>\n<li>性能更好, 使用存储过程比单独的 SQL 语句更快</li>\n<li>用 一些只能用在单个请求中的MySQL元素和特性 编写功能更强更灵活的代码 <a href=\"#%E6%99%BA%E8%83%BD%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1\">示例</a></li>\n</ul>\n<p>缺陷 : 编写时 更困难,需要安全访问权限 (编写与执行存储过程的权限是分开的)</p>\n<h3 id=\"执行存储过程-调用\"><a href=\"#执行存储过程-调用\" class=\"headerlink\" title=\"执行存储过程-调用\"></a>执行存储过程-<a name=\"调用存储过程1\">调用</a></h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CALL</span> productpricing<span class=\"token punctuation\">(</span><span class=\"token variable\">@pricelow</span><span class=\"token punctuation\">,</span>\n                   \t<span class=\"token variable\">@pricehigh</span><span class=\"token punctuation\">,</span>\n                   \t<span class=\"token variable\">@priceaverage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>通过 <code>@pricelow</code> 等向存储过程传递参数</li>\n<li>所以MySQL变量都必须以 @ 开始</li>\n<li>该语句不显示任何值, 使用 <code>SELECT @pricelow, @pricehigh;</code> 调用变量</li>\n</ul>\n<h3 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> productpricing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> Ave<span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> priceaverage\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>创建名为 <code>productpricing</code> 的存储过程</li>\n<li>若存储过程接受参数, 在名称后的 () 中列出</li>\n<li>通过 <code>CALL productpricing()</code> 调用这个存储过程</li>\n</ul>\n<p>使用命令行实用程序时需要更改分隔符, <code>DELIMITER //</code> 告诉它使用//作为新的语句结束分隔符, 语句结束时再使用 <code>DELIMITER ;</code> 换回去</p>\n<h3 id=\"删除存储过程\"><a href=\"#删除存储过程\" class=\"headerlink\" title=\"删除存储过程\"></a>删除存储过程</h3><p><code>DROP PROCEDURE productpricing</code></p>\n<ul>\n<li>删除时没有后面的 () </li>\n<li>若过程不存在会返回一个错误, 使用 <code>DROP PROCEDURE IF EXISTS</code> 不会产生错误</li>\n</ul>\n<h3 id=\"使用参数\"><a href=\"#使用参数\" class=\"headerlink\" title=\"使用参数\"></a>使用参数</h3><p>一般存储过程不显示结果, 而是把结果返回给变量</p>\n<ul>\n<li>变量: 内存中一个特定的位置, 用来临时存储数据, </li>\n</ul>\n<p>示例 1 :</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREAT <span class=\"token keyword\">PROCEDURE</span> productpricing<span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">OUT</span> p1 <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ph <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> pa <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> p1\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> ph\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> pa\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>此过程接受三个参数: p1存储产品最低价, ph存储最高价, pa存储平均价</li>\n<li>每个参数必须指定类型, 这里用  DECIMAL 指定十进制, (8, 2) 指定小数点左侧最多 8 位, 右侧最多 2 位. (右侧最多为8)</li>\n<li>记录集是不允许的类型, 所以不能通过一个参数返回多行列, 此处要使用三个参数</li>\n<li>通过<a href=\"#%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B1\">此处示例</a>调用此过程</li>\n</ul>\n<p>示例 2 :</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> ordertotal<span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">IN</span> onumber <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ototal <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>item_price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">FROM</span> orderitems\n\t<span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">=</span> onumber\n\t<span class=\"token keyword\">INTO</span> ototal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用 IN 表示要输入的数据</li>\n<li>示例调用 <code>CALL ordertotal(20005, @total)</code></li>\n</ul>\n<h3 id=\"建立智能存储\"><a href=\"#建立智能存储\" class=\"headerlink\" title=\"建立智能存储\"></a>建立智能存储</h3><p>在存储过程内包含业务规则和智能处理, <a name=\"智能存储示例1\">智能存储示例</a>:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Name: ordertotal</span>\n<span class=\"token comment\">-- Parameters: onumber = order number</span>\n\t\t\t\t\t\t<span class=\"token comment\">-- taxable = 0 ifnot taxable, 1 if taxable</span>\n\t\t\t\t\t\t<span class=\"token comment\">-- ototal\t = order total variable</span>\n\t\t\t\t\t\t\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> ordertotal<span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">IN</span> onumber <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">IN</span> taxable <span class=\"token keyword\">BOOLEAN</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ototal <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'Obtain order total, optionally adding tax'</span>\n<span class=\"token keyword\">BEGIN</span>\n\n\t<span class=\"token comment\">-- Declare variable for total</span>\n\t<span class=\"token keyword\">DECLARE</span> total <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">-- Declare tax percentage</span>\n\t<span class=\"token keyword\">DECLARE</span> taxrate <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- Get the order total</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>item_price<span class=\"token operator\">*</span>quantity<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">FROM</span> orderitems\n\t<span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">=</span> onumber\n\t<span class=\"token keyword\">INTO</span> total<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- Is this taxable?</span>\n\t<span class=\"token keyword\">IF</span> taxable <span class=\"token keyword\">THEN</span>\n\t\t<span class=\"token comment\">-- Yes, so add taxrate to the total</span>\n\t\t<span class=\"token keyword\">SELECT</span> total<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>total<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token operator\">*</span>taxrate<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> total<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- And finally, save to out variable</span>\n\t<span class=\"token keyword\">SELECT</span> total <span class=\"token keyword\">INTO</span> ototal<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>前边放置 – 增加注释</p>\n</li>\n<li><p>使用 DECLARE 声明两个局部变量</p>\n</li>\n<li><p>若增加营业税, 则输入 taxable 为真, 执行之后的 SELECT , 并将结果存储到局部变量 total</p>\n</li>\n<li><p>最后用一句 SELECT 将 total 保存到 ototal</p>\n</li>\n<li><p>COMMENT 添加一个解释, 会在 SHOW PROCEDURE STATUS 的结果中显示</p>\n</li>\n<li><p>使用 <code>CALL ordertotal(20005, 0, @total);</code> 使用这个过程</p>\n</li>\n</ul>\n<h3 id=\"检查存储过程\"><a href=\"#检查存储过程\" class=\"headerlink\" title=\"检查存储过程\"></a>检查存储过程</h3><p>显示用来创建一个存储过程的CREATE语句: <code>SHOW CREATE PROCEDURE ordertotal;</code> </p>\n<p>显示何时何人创建等详细信息: <code>SHOW PROCEDURE STATUS</code>, 信息太多可以使用 LIKE 过滤</p>\n<h2 id=\"使用游标\"><a href=\"#使用游标\" class=\"headerlink\" title=\"使用游标\"></a>使用游标</h2><p><del><em>不怎么用得到…过一下看一眼</em></del></p>\n<p><em>咕了</em></p>\n<h2 id=\"使用触发器\"><a href=\"#使用触发器\" class=\"headerlink\" title=\"使用触发器\"></a>使用触发器</h2><p><em>同上</em></p>\n<h2 id=\"管理事务处理\"><a href=\"#管理事务处理\" class=\"headerlink\" title=\"管理事务处理\"></a>管理事务处理</h2><p>事务处理是一种机制, 用来管理必须成批执行的 MySQL 操作</p>\n<ul>\n<li>用来维护数据库的完整性, 保证成批的 MySQL 操作要么完全执行, 要么完全不执行</li>\n<li>显示事务处理需要所用数据引擎支持</li>\n</ul>\n<p>相关名词:</p>\n<ul>\n<li>事务: 一组 SQL 语句</li>\n<li>回退: 撤销指定 SQL 语句的过程</li>\n<li>提交: 将未存储的 SQL 语句结果写入数据库表</li>\n<li>保留点: 事务处理中设置的临时占位符, 可以对它发布回退(不同于回退整个事务处理)</li>\n</ul>\n<p>使用 <code>START TRANSACTION</code>; 标识事务的开始</p>\n<p>使用 <code>ROLLBACK</code> 回退 START TRANSACTION 之后的所有语句</p>\n<ul>\n<li>不能回退 CREATE 或 DROP 操作</li>\n<li>使用后事务会自动关闭</li>\n</ul>\n<p>使用 <code>COMMIT</code> 提交 START TRANSACTION 之后的所有语句</p>\n<ul>\n<li>一般情况语句会自动隐式提交, 事务处理时语句需要手动提交</li>\n<li>如果前边的语句出错, COMMIT 不会提交</li>\n<li>使用后事务会自动关闭</li>\n</ul>\n<p>使用 <code>SAVEPOINT 保留点1</code>; 创建保留点, 支持回退部分事务处理</p>\n<ul>\n<li><p>使用 <code>ROLLBACK TO 保留点1;</code> 回退到指定位置</p>\n</li>\n<li><p>保留点在事务处理完成后自动释放 (执行一条 ROLLBACK 或 COMNMIT)</p>\n</li>\n</ul>\n<h3 id=\"使用-SET-autocommit-0-取消默认提交\"><a href=\"#使用-SET-autocommit-0-取消默认提交\" class=\"headerlink\" title=\"使用 SET autocommit=0 取消默认提交\"></a>使用 <code>SET autocommit=0</code> 取消默认提交</h3><ul>\n<li>该标志针对每个连接而不是服务器</li>\n</ul>\n<h2 id=\"字符集和校对顺序\"><a href=\"#字符集和校对顺序\" class=\"headerlink\" title=\"字符集和校对顺序\"></a>字符集和校对顺序</h2><p>字符集: 字母和符号的集合</p>\n<p>编码: 某个字符集成员的内部表示</p>\n<p>校对: 规定字符如何比较的指令</p>\n<p>使用 <code>SHOW CHARACTER SET;</code> 显示所有可用的字符集以及每个字符集的描述和默认校对</p>\n<p>使用 <code>SHOW COLLATION;</code> 查看所支持校对的完整列表以及它们适用的字符集</p>\n<ul>\n<li>许多校对出现两次, 一次区分大小写(以 <code>_cs</code> 表示), 一次不区分大小写(以 <code>_ci</code> 表示)</li>\n</ul>\n<p>给表指定字符集和校对: 在 <code>CREATE TABLE()</code> 语句后附加 <code>DEFAULT CHARACTER SET 字符集1 COLLATE 校对1;</code></p>\n<p>还支持给某个列指定字符集和校对, </p>\n<p>也支持在 SELLECT 语句末 <code>COLLATE 校对2</code>指定校对 (用于临时区分大小写)</p>\n<h2 id=\"安全管理\"><a href=\"#安全管理\" class=\"headerlink\" title=\"安全管理\"></a>安全管理</h2><p>创建用户, 管理用户权限等</p>\n<h2 id=\"数据库维护\"><a href=\"#数据库维护\" class=\"headerlink\" title=\"数据库维护\"></a>数据库维护</h2><p>备份数据, 数据库维护, 诊断启动问题, 查看日志文件等</p>\n<p>事务处理</p>\n<p>设置保留点</p>\n<p>中途出错回退到保留点</p>\n<p>之后的语句呢?</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"初识09-06\"><a href=\"#初识09-06\" class=\"headerlink\" title=\"初识09.06\"></a>初识<del>09.06</del></h1><h2 id=\"数据库术语\"><a href=\"#数据库术语\" class=\"headerlink\" title=\"数据库术语\"></a>数据库术语</h2><ul>\n<li>数据库 database : 保存有组织的数据的容器</li>\n<li>表 table : 某种特定类型数据的结构化清单<ul>\n<li>相同数据库不能使用相同表名</li>\n</ul>\n</li>\n<li>模式 schema : 关于数据库和表的布局及特性的信息 (有时用作数据库的同义词)</li>\n<li>列 column : 表中的一个字段<ul>\n<li>表由一个或多个列组成</li>\n</ul>\n</li>\n<li>数据类型 datatype : 所容许的数据的类型</li>\n<li>行 row : 表中的一个记录</li>\n<li>主键 primary key :  一列（或一组列），其值能够唯一区分表 中每个行<ul>\n<li>任意两行主键值不同 (一组列时, 所有列值的组合唯一)</li>\n<li>每行都有主键值(不允许NULL)</li>\n<li>好习惯 : <ul>\n<li>不更新主键列中的值</li>\n<li>不重用主键列的值</li>\n<li>不在主键列中使用可能会更改的值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>外键 foreign key : 某个表中的一列, 它包含另一个表的主键值, 定义了两个表之间的关系 <ul>\n<li>列名可以与原主键不同, 数据类型要相同</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"SQL简介\"><a href=\"#SQL简介\" class=\"headerlink\" title=\"SQL简介\"></a>SQL简介</h2><p>sequel是结构化查询语言 Structured Query Language 的缩写, 一种专门用来与数据库通信的语言</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><p>MySQL是一种DBMS, 即一种数据库软件</p>\n<h1 id=\"使用MySQL\"><a href=\"#使用MySQL\" class=\"headerlink\" title=\"使用MySQL\"></a>使用MySQL</h1><p>选择数据库: <code>USE 数据库名</code></p>\n<p>返回可用数据库列表: SHOW DATABASES</p>\n<ul>\n<li>包含MySQL内部使用的数据库</li>\n</ul>\n<p><code>SHOW</code> : 查看数据库, 表和内部信息</p>\n<h1 id=\"检索数据-SELECT09-08\"><a href=\"#检索数据-SELECT09-08\" class=\"headerlink\" title=\"检索数据-SELECT09.08\"></a>检索数据-SELECT<del>09.08</del></h1><h2 id=\"SELECT基础\"><a href=\"#SELECT基础\" class=\"headerlink\" title=\"SELECT基础\"></a>SELECT基础</h2><p><code>SELECT 列名 FROM 表名</code></p>\n<ul>\n<li>SQL语句应以 ; 分隔\\结束</li>\n<li>SQL语句不区分大小写, 但是推荐大写</li>\n<li>SQL语句中的所有空格都被忽略</li>\n</ul>\n<p>检索多个列: <code>SELECT 列名,列名 FROM 表名</code></p>\n<p>检索所有列: <code>SELECT * FROM 表名</code></p>\n<ul>\n<li>这样可以检索未知列</li>\n</ul>\n<p>只检索具有不同值的列表: <code>SELECT DISTINCT 列名 FROM 表名</code></p>\n<p>限制不多于五行: <code>SELECT 列名 FROM 表名 LIMIT 5</code><br>返回从第四行开始的五行: <code>SELECT 列名 FROM 表名 LIMIT 4,5</code> , 同义于<code>SELECT 列名 FROM 表名 LIMIT 5 OFFSET 4</code></p>\n<ul>\n<li>检索出来的<strong>第一行是行0</strong></li>\n</ul>\n<p>使用完全限定的列名, 表名: <code>SELECT 表名.列名 FROM 连接名.表名</code></p>\n<h2 id=\"排序检索数据-ORDER-BY\"><a href=\"#排序检索数据-ORDER-BY\" class=\"headerlink\" title=\"排序检索数据-ORDER BY\"></a>排序检索数据-ORDER BY</h2><ul>\n<li>如果不排序, 数据一般以它在底层表中出现的顺序显示 (更新或删除后会受到影响)</li>\n</ul>\n<p>使用 OREDR BY : <code>SELECT 列名1 FROM 表名 ORDER BY 列名2</code></p>\n<ul>\n<li>可以用<code>,</code>分隔以多列排序</li>\n<li>默认以升序排序(ASC), 在列名后附加<code> DESC</code>指定该列以降序排序</li>\n</ul>\n<h2 id=\"条件过滤数据-WHERE\"><a href=\"#条件过滤数据-WHERE\" class=\"headerlink\" title=\"条件过滤数据-WHERE\"></a>条件过滤数据-WHERE</h2><p>使用 WHERE : <code>SELECT 列名1 FROM 表名 WHERE 条件</code></p>\n<ul>\n<li><strong><code>ORDER BY</code>应位于<code>WHERE</code>之后</strong></li>\n<li>WHERE 支持的子句操作符: =, &lt;&gt;(不等于), !=(不等于), &lt;, &lt;=, &gt;, &gt;=, BETWEEN(在指定的两个数据之间</li>\n<li>字符串以单引号括住, 数字不需要</li>\n<li>BETWEEN 示例: <code>SELECT 列名1 FROM 表名 WHERE 列名2 BETWEEN 数值a AND 数值b</code><ul>\n<li>BETWEEN 的范围是&gt;=a , &lt;=b</li>\n</ul>\n</li>\n<li>空值检查: <code>WHERE 列名 IS NULL</code><ul>\n<li>不匹配搜索(使用不等号)不会返回具有NULL值的行</li>\n</ul>\n</li>\n</ul>\n<p>组合 WHERE 语句, 使用AND, OR : <code>WHERE 条件1 AND 条件2</code></p>\n<ul>\n<li>AND 的优先级比 OR 高, 需要使用圆括号正确组合操作符</li>\n</ul>\n<p>通过 IN 指定条件范围: <code>WHERE 列名 IN (值1, 值2)</code></p>\n<ul>\n<li>IN 比等效的 OR 执行更快</li>\n<li>IN 可以包含其他 SELECT 语句</li>\n</ul>\n<p>通过 NOT 否定后跟条件的关键字: <code>WHERE 列名 NOT IN (值1, 值2)</code></p>\n<ul>\n<li>MySQL支持 NOT 对IN, BETWEEN, EXISTS取反</li>\n<li>NOT 只否定后边紧跟的一个条件</li>\n</ul>\n<p>通过 LIKE 使用通配符: <code>WHERE 列名 LIKE &#39;jet%&#39;</code> , 找出所有词以jet起头的内容</p>\n<ul>\n<li>通配符 % 表示任意字符出现任意次数(包括0个字符), 此处即接受jet后的任意字符<ul>\n<li><code>LIKE &#39;%&#39;</code>不能匹配NULL </li>\n</ul>\n</li>\n<li>通配符可以在任意位置出现任意次</li>\n<li>通配符 _ 只匹配单个字符, 不包括0个字符</li>\n<li>通配符运行效率较差, 尽量使用其他语句<br>使用多个条件搜索时应当将通配符相关的搜索条件放在靠后执行的位置</li>\n</ul>\n<h3 id=\"正则表达式-REGEXP\"><a href=\"#正则表达式-REGEXP\" class=\"headerlink\" title=\"正则表达式-REGEXP\"></a>正则表达式-REGEXP</h3><p>REGEXP 后所跟的东西作为正则表达式</p>\n<ul>\n<li>例: <code>WHERE 列名 REGEXP &#39;1000&#39;</code>, 检索列中包含文本 1000 的所有行</li>\n<li><code>.</code>是正则表达式语言中一个特殊的字符, 表示匹配任意一个字符</li>\n<li>默认不区分大小写, 使用<code>BINARY</code>关键字区分大小写</li>\n</ul>\n<p>OR 匹配: <code>WHERE 列名 REGEXP &#39;1000 | 2000 | 3000&#39;</code></p>\n<p>[] 匹配一组字符中的任意一个: <code>REGEXP [123]000</code>, 等效上一句</p>\n<ul>\n<li><code>[^123]</code>匹配除1, 2, 3以外的任何内容</li>\n<li><code>[0-9]</code>匹配 0~9 任意数字</li>\n</ul>\n<p>特殊匹配规则:</p>\n<ul>\n<li><p>匹配”-“与”.”等特殊字符: 使用\\为前导, 进行转义 <code>\\\\-</code> </p>\n</li>\n<li><p><code>\\\\ </code>也用来引用元字符: 如<code>\\\\n</code>表示换行</p>\n</li>\n<li><p>匹配字符类: 如<code>[:alnum:]</code>表示任意字母和数字, 同<code>[a-zA-Z0-9]</code></p>\n</li>\n</ul>\n<p>匹配多个实例: 默认只对其前边的一个字符有效</p>\n<ul>\n<li><code>*</code> : 0个或多个匹配</li>\n<li><code>+</code> : 1个或多个匹配, 等于<code>&#123;1, &#125;</code></li>\n<li><code>?</code> : 0个或一个匹配, 等于 <code>&#123;0,1&#125;</code></li>\n<li><code>&#123;数值&#125;</code> : 指定数目的匹配</li>\n<li><code>&#123;数值, &#125;</code> : 不少于指定数目的匹配</li>\n<li><code>&#123;数值1, 数值2&#125;</code> : 匹配数目的范围 (数值2不超过255)</li>\n<li>示例: <ol>\n<li><code>REGEXP &#39;\\\\([0-9] sticks?\\\\)&#39;</code> : 此句中 ? 使最后的 s 成为可选字符, 有没有s都会被检出, 有其他字符不会</li>\n<li><code>REGEXP &#39;[[:digit:]]&#123;4&#125;</code> : 匹配连在一起的任意四位数字, 等效于<code>&#39;[0-9][0-9][0-9][0-9]&#39;</code></li>\n</ol>\n</li>\n</ul>\n<p>匹配特定位置的文本: </p>\n<ul>\n<li><code>^</code> : 文本的开始</li>\n<li><code>$</code> : 文本的结尾</li>\n<li><code>[[:&lt;:]]</code> : 词的开始</li>\n<li><code>[[:&gt;:]]</code> : 词的结尾</li>\n<li>示例: <code>REGEXP &#39;^[0-9\\\\.]</code> 在 . 或任意数字为串中第一个字符时匹配</li>\n<li>通过^开始每个表达式, $结束每个表达式, 可以使REGEXP的作用与LIKE一样</li>\n</ul>\n<h2 id=\"创建计算字段\"><a href=\"#创建计算字段\" class=\"headerlink\" title=\"创建计算字段\"></a>创建计算字段</h2><p>字段: 基本与 列 相同</p>\n<p>Concat()函数 拼接: 将值连在一起构成单个值</p>\n<ul>\n<li>示例: <code>SELECT Concat(列名1, &#39; (&#39;, 列名2, &#39;)&#39;)</code><br>会输出<code>值1 (值2)</code></li>\n<li>Concat 的多个串以”,”分隔</li>\n</ul>\n<p>删除数据多余的空格: Trim()函数</p>\n<ul>\n<li><code>RTrim(列名)</code>去掉值右边的空格</li>\n<li><code>LTrim(列名)</code>去掉值左边的空格</li>\n<li><code>Trim(列名)</code>去掉左右两边的空格</li>\n</ul>\n<p>AS 使用别名: 新计算的列没有名字无法引用, 赋予别名解决这个问题</p>\n<ul>\n<li>示例: <code>SELECT Concat(列名1, &#39; (&#39;, 列名2, &#39;)&#39;) AS 别名</code></li>\n<li>在原名不合法时重命名它, 易误解时扩充它</li>\n<li>别名也称导出列</li>\n</ul>\n<p>计算: 支持 +, -, *, / 四个基本操作运算符, 可用圆括号区分优先顺序</p>\n<ul>\n<li>示例: <code>SELECT 列名1 + 列名2 AS 别名</code></li>\n</ul>\n<h2 id=\"数据处理函数\"><a href=\"#数据处理函数\" class=\"headerlink\" title=\"数据处理函数\"></a>数据处理函数</h2><p><em>函数的可移植性较差, 使用时建议做好注释</em></p>\n<p>文本处理函数:</p>\n<ul>\n<li>示例 <code>WHERE Soundex(列名) = Soundex(&#39;Lie&#39;)</code>, 匹配发音与Lie类似的值(如Lee)</li>\n</ul>\n<p>日期和时间处理函数:</p>\n<ul>\n<li>日期格式应为 <code>yyyy-mm-dd</code></li>\n<li>基本日期条件过滤: <code>WHERE 列名 = &#39;yyyy-mm-dd&#39;</code><ul>\n<li>默认具体时间为<code>00:00:00</code>, 如果表中值为<code>yyyy-mm-dd 11:30:05</code>不会匹配</li>\n<li>使用Date()函数, 仅比较给出的日期(即只比较<code>yyyy-mm-dd</code>), 相应的Time函数只比较时间: <code>WHERE Date(列名) = &#39;yyyy-mm-dd&#39;</code></li>\n<li>使用Year(), Month()等只返回年份, 月份</li>\n</ul>\n</li>\n</ul>\n<p>数值处理函数: 一般用于代数, 三角或几何运算</p>\n<h2 id=\"汇总数据\"><a href=\"#汇总数据\" class=\"headerlink\" title=\"汇总数据\"></a>汇总数据</h2><blockquote>\n<p>有时返回具体数据是对时间和资源的浪费</p>\n</blockquote>\n<p>SQL的五个聚集函数:</p>\n<table border=\"2\">\n    <tr>\n        <th>函数</th>\n        <td>AVG()</td>\n        <td>COUNT()</td>\n        <td>MAX()</td>\n        <td>MIN()</td>\n        <td>SUM()</td>\n    </tr>\n    <tr>\n        <th>功能</th>\n        <td>平均值</td>\n        <td>行数</td>\n        <td>最大值</td>\n        <td>最小值</td>\n        <td>总和</td>\n    </tr>\n</table>\nAVG() : `SELECT AVG(列名) AS 别名 FROM 表名` , 得到这一列的平均值\n\n<p>COUNT() : </p>\n<ul>\n<li><code>SELECT COUNT(*)</code> : 对表中包括空值的所有行计数</li>\n<li><code>COUNT(列名)</code> : 对特定列中具有值的行计数, 不计算NULL</li>\n</ul>\n<p>MAX() 与 MIN() 与 SUM() : 要求指定列名, 会忽略NULL</p>\n<p>**使用<code>DISTINCT</code>参数, 只考虑不同的内容: **</p>\n<ul>\n<li>示例: <code>AVG(DISTINCT 列名)</code>, 计算平均值时只取不同的值</li>\n<li>必须指定列名</li>\n<li><em>有一个对应的参数<code>ALL</code>, 是没什么用的默认值</em></li>\n</ul>\n<p>组合聚集参数: 使用”,”隔开不同语句, 可以换行好看些</p>\n<h2 id=\"分组数据-GROUP-BY09-09\"><a href=\"#分组数据-GROUP-BY09-09\" class=\"headerlink\" title=\"分组数据-GROUP BY09.09\"></a>分组数据-GROUP BY<del>09.09</del></h2><p>把数据分成多个逻辑组, 以便对每个组进行聚集计算</p>\n<ul>\n<li><p>示例: <code>SELECT vend_id, COUNT(*) AS num_prods FROM products GROUP BY vend_id</code><br>输出: <img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909130806621.png\" alt=\"image-20210909130806621\"></p>\n</li>\n<li><p>GROUP BY子句可以包含任意数目的列, 使得可以通过对分组嵌套达到更细致的控制</p>\n</li>\n<li><p>GROUP BY子句中不能使用别名, 若在 SELECT 中使用表达式, GROUP BY 子句中须指定相同的表达式</p>\n</li>\n<li><p>除聚集计算语句外, SELECT 中每个列都需要在GROUP BY 子句中给出</p>\n</li>\n<li><p>一个或多个NULL值也会被分为一组</p>\n</li>\n<li><p><strong>GROUP BY 子句应在 WHERE 之后, ORDER BY 之前</strong></p>\n</li>\n<li><p><strong>使用 GROUP BY 子句时, 应当给出 ORDER BY 子句保证正确排序</strong></p>\n</li>\n<li><p>后边附加<code>WITH ROLLUP</code>, 可以获得所有分组汇总的值</p>\n</li>\n</ul>\n<h3 id=\"过滤分组-HAVING\"><a href=\"#过滤分组-HAVING\" class=\"headerlink\" title=\"过滤分组-HAVING\"></a>过滤分组-HAVING</h3><p>HAVING 非常类似于 WHERE (WHERE 在分组前进行过滤, HAVING 在分组后进行过滤)</p>\n<ul>\n<li>示例: <code>SELECT cust_id, COUNT(*) AS orders FROM orders GROUP BY cust_id HAVING COUNT(*) &gt;=2</code><br>过滤两个以上的 COUNT(*) 的分组</li>\n<li>不能使用别名</li>\n<li><strong>HAVING支持所有WHERE操作符</strong></li>\n</ul>\n<h2 id=\"SELECT-子句顺序\"><a href=\"#SELECT-子句顺序\" class=\"headerlink\" title=\"SELECT 子句顺序\"></a>SELECT 子句顺序</h2><p>SELECT → FROM → WHERE → GROUP BY → HAVING → ORDER BY → LIMIT</p>\n<h2 id=\"子查询-嵌套\"><a href=\"#子查询-嵌套\" class=\"headerlink\" title=\"子查询-嵌套\"></a>子查询-嵌套</h2><p>嵌套在其他查询中的查询 : 将一条 SELECT 语句返回的结果用于另一条 SELECT 语句的 WHERE 子句</p>\n<ul>\n<li><a name=\"子查询1\">示例</a>:</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact\n<span class=\"token keyword\">FROM</span> customers\n<span class=\"token keyword\">WHERE</span> cust_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> cust_id\n                  <span class=\"token keyword\">FROM</span> orders\n                  <span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> order_num\n                                      <span class=\"token keyword\">FROM</span> orderitems\n                                      <span class=\"token keyword\">WHERE</span> prod_id <span class=\"token operator\">=</span><span class=\"token string\">'TNT2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>上边的例子在性能上不一定是最好的, <a href=\"#%E8%81%94%E7%BB%93%E6%9F%A5%E8%AF%A21\">之后的联结查询</a>会给出一个更好的方法</li>\n<li>子查询一般与 IN 操作符结合使用, 也可以用 =, &lt;&gt; 等</li>\n<li>作为计算字段使用子查询示例:<ul>\n<li>这里嵌套内的 WHERE 使用了完全限定列名, 告诉 SQL 比较 orders 表中的 cust_id 与当前正从customers 表中检索的 cust_id</li>\n<li>这种称为相关子查询, 只要列名可能有多义性, 就必须使用这种语法</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span>\n\t\t\t cust_state<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">FROM</span> orders\n        <span class=\"token keyword\">WHERE</span> orders<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> orders\n<span class=\"token keyword\">FROM</span> customers\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> cust_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>建议先用硬编码数据建立和测试外层查询, 并且仅在确认它正常后才嵌入子查询</p>\n</blockquote>\n<h2 id=\"联结表-划重点\"><a href=\"#联结表-划重点\" class=\"headerlink\" title=\"联结表(划重点)\"></a>联结表(划重点)</h2><p>联结是一种机制, 用来在一条 SELECT 语句中关联表, 可以联结多个表返回一组输出</p>\n<ul>\n<li><p><a name=\"示例-联结表1\">示例</a>: </p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> vendors<span class=\"token punctuation\">,</span> products\n<span class=\"token keyword\">WHERE</span> vendors<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里三个列分别在两个表中, 通过 WHERE 语句正确联结两个表, 需要完全限定列名</p>\n</li>\n<li><p>没有联结条件的表关系返回结果为笛卡尔积, 检索出的行数是第一个表中行数乘以第二个表中行数</p>\n</li>\n<li><p>叉联结是一种笛卡尔积的联结类型</p>\n</li>\n</ul>\n<h3 id=\"内部联结-等值联结\"><a href=\"#内部联结-等值联结\" class=\"headerlink\" title=\"内部联结(等值联结)\"></a>内部联结(等值联结)</h3><p>即<a href=\"#%E7%A4%BA%E4%BE%8B-%E8%81%94%E7%BB%93%E8%A1%A81\">上边示例</a>的联结方式, 可以这样明确指定联结的类型:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_name<span class=\"token punctuation\">,</span> prod_name<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> vendors <span class=\"token keyword\">INNER</span> <span class=\"token keyword\">JOIN</span> products\n<span class=\"token keyword\">ON</span> vendors<span class=\"token punctuation\">.</span>vend_id <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span>vend<span class=\"token punctuation\">.</span>id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>联结条件用特定的 ON 子句而不是 WHERE 子句给出</p>\n<h3 id=\"联结多个表\"><a href=\"#联结多个表\" class=\"headerlink\" title=\"联结多个表\"></a>联结多个表</h3><p>联结太多表性能下降会很严重</p>\n<p><a name=\"联结查询1\">示例1</a>: 使用联结查询优化<a href=\"#%E5%AD%90%E6%9F%A5%E8%AF%A21\">上边的子查询</a></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact\n<span class=\"token keyword\">FROM</span> customers<span class=\"token punctuation\">,</span> orders<span class=\"token punctuation\">,</span> orderitems\n<span class=\"token keyword\">WHERE</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>cust_id\n\t<span class=\"token operator\">AND</span> orderitems<span class=\"token punctuation\">.</span>order_num <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>order_num\n\t<span class=\"token operator\">AND</span> prod_id<span class=\"token operator\">=</span><span class=\"token string\">'TNT2'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"高级联结\"><a href=\"#高级联结\" class=\"headerlink\" title=\"高级联结\"></a>高级联结</h3><h4 id=\"使用表别名\"><a href=\"#使用表别名\" class=\"headerlink\" title=\"使用表别名\"></a>使用表别名</h4><ul>\n<li>缩短SQL语句</li>\n<li><strong>允许在单条 SELECT 语句中多次使用相同的表</strong> <code>FROM employee AS a, employee AS b</code></li>\n</ul>\n<h4 id=\"自联结\"><a href=\"#自联结\" class=\"headerlink\" title=\"自联结\"></a>自联结</h4><p>以下两种解决方案结果相同, 第二种自联结方式效率高于第一种子查询</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> prod_id<span class=\"token punctuation\">,</span> prod_name\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> vend_id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> vend_id\n                 <span class=\"token keyword\">FROM</span> products\n                <span class=\"token keyword\">WHERE</span> prod_id <span class=\"token operator\">=</span> <span class=\"token string\">'DTNTR'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> p1<span class=\"token punctuation\">.</span>prod_id<span class=\"token punctuation\">,</span> p1<span class=\"token punctuation\">.</span>prod_name\n<span class=\"token keyword\">FROM</span> products <span class=\"token keyword\">AS</span> p1<span class=\"token punctuation\">,</span> products <span class=\"token keyword\">AS</span> p2\n<span class=\"token keyword\">WHERE</span> p1<span class=\"token punctuation\">.</span>vend_id <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span>vend_id\n\t<span class=\"token operator\">AND</span> p2<span class=\"token punctuation\">.</span>prod_id <span class=\"token operator\">=</span> <span class=\"token string\">'DTNTR'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"自然联结\"><a href=\"#自然联结\" class=\"headerlink\" title=\"自然联结\"></a>自然联结</h4><p>自然联结排除多次出现, 使每个列只返回一次</p>\n<ul>\n<li>需要自己手动完成</li>\n</ul>\n<h4 id=\"外部联结\"><a href=\"#外部联结\" class=\"headerlink\" title=\"外部联结\"></a>外部联结</h4><p>包含了在相关表中没有关联行的行</p>\n<ul>\n<li><p>必须使用 RIGHT 或 LEFT 关键字指定包括其所有行的表 (包括OUTER JOIN 右边或左边的表) , 即从右边或左边表中选择所有行</p>\n</li>\n<li><p>内部, 外部联结的区别示例|<br><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183350173.png\" alt=\"image-20210909183350173\"><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210909183441236.png\" alt=\"image-20210909183441236\"></p>\n</li>\n</ul>\n<h4 id=\"带聚集函数的联结\"><a href=\"#带聚集函数的联结\" class=\"headerlink\" title=\"带聚集函数的联结\"></a>带聚集函数的联结</h4><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> customers<span class=\"token punctuation\">.</span>cust_name<span class=\"token punctuation\">,</span>\n\t\t\t customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span>orders<span class=\"token punctuation\">.</span>order_num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> num_ord\n<span class=\"token keyword\">FROM</span> customers <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">OUTER</span> <span class=\"token keyword\">JOIN</span> orders\n<span class=\"token keyword\">ON</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>cust_id\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> customers<span class=\"token punctuation\">.</span>cust_id<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"组合查询-UNION\"><a href=\"#组合查询-UNION\" class=\"headerlink\" title=\"组合查询-UNION\"></a>组合查询-UNION</h2><p>组合使用多条 SELECT 语句, 等效于具有多个 WHERE 子句的单条 SELECT 语句. 两种查询性能优劣不一定</p>\n<p>通过在各 SELECT 语句之间加入 UNION 实现</p>\n<ul>\n<li>示例: </li>\n</ul>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> prod_price <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span>\n<span class=\"token keyword\">UNION</span>\n<span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> vend_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>等效于</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> vend_id<span class=\"token punctuation\">,</span> prod_id<span class=\"token punctuation\">,</span> prod_price\n<span class=\"token keyword\">FROM</span> products\n<span class=\"token keyword\">WHERE</span> prod_price <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span>\n<span class=\"token operator\">OR</span> vend_id <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1001</span><span class=\"token punctuation\">,</span><span class=\"token number\">1002</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>UNION 中的每个查询必须包含相同的列, 表达式或聚集函数, 顺序可以不同</li>\n<li>UNION 从查询结果集中自动去除重复的行<ul>\n<li>使用 UNION ALL 返回不去重的全部行 (此时必须使用 UNION 而不能 WHERE)</li>\n</ul>\n</li>\n<li>组合查询可以应用于不同的表</li>\n</ul>\n<h3 id=\"对组合查询结果排序\"><a href=\"#对组合查询结果排序\" class=\"headerlink\" title=\"对组合查询结果排序\"></a>对组合查询结果排序</h3><p>使用 UNION 时, 只能使用一条 ORDER BY 语句, 出现在最后一条 SELECT 之后,</p>\n<h2 id=\"全文本搜索\"><a href=\"#全文本搜索\" class=\"headerlink\" title=\"全文本搜索\"></a>全文本搜索</h2><p><em>并非所有引擎都支持全文本搜索</em>‘</p>\n<p>对指定列中各词创建一个索引, 针对这些词进行搜索.</p>\n<ul>\n<li>为进行全文本搜索, 必须索引被搜索的列, 且随着数据的改变不断进行索引(自动进行)</li>\n<li>索引后, SELECT 可与 Match() 和 Against() 一起使用执行搜索</li>\n</ul>\n<p>全文本搜索的优点:</p>\n<ul>\n<li>性能更好</li>\n<li>明确控制</li>\n<li>智能化的结果</li>\n</ul>\n<p>启用全文本搜索支持: 在创建表时通过 FULLTEXT 子句, 示例如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> productnotes\n<span class=\"token punctuation\">(</span>\n    note_id\t\t<span class=\"token keyword\">int</span>\t\t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    prod_id\t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    note_date\t<span class=\"token keyword\">datetime</span>\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    note_text\t<span class=\"token keyword\">text</span>\t\t<span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span><span class=\"token punctuation\">(</span>note_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    FULLTEXT<span class=\"token punctuation\">(</span>note_text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>ENGING<span class=\"token operator\">=</span>MyISAM<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>这里根据<code>FULLTEXT(note_text)</code>对note_text进行索引</li>\n<li>定义之后, MySQL会自动维护索引</li>\n</ul>\n<p>进行全文本搜索: 使用<code>Match()</code>和<code>Against()</code>两个函数进行全文本搜索, 其中Match()指定被搜索的列, Against()指定要使用的搜索表达式, 示例如下</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> note_text\n<span class=\"token keyword\">FROM</span> productnotes\n<span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">Match</span><span class=\"token punctuation\">(</span>note_text<span class=\"token punctuation\">)</span> Against<span class=\"token punctuation\">(</span><span class=\"token string\">'rabbit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>等效于</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> note_text\n<span class=\"token keyword\">FROM</span> productnotes\n<span class=\"token keyword\">WHERE</span> note_text <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%rabbit%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>指定 rabbit 作为搜索文本, 搜索 note_text 列中包含 rabbit 的行</li>\n<li>前者以文本匹配良好程度排序的数据, 后者以不特别有用的顺序返回数据</li>\n</ul>\n<p>注意事项: </p>\n<ul>\n<li><p>传递给 Match() 的值必须与 FULLTEXT() 中定义的相同, 多个列时必须列出他们且次序正确</p>\n</li>\n<li><p>搜索默认不区分大小写 (除非使用 BINARY 方式)</p>\n</li>\n<li><p>指定多个搜索项时, 包含多数匹配词的行将具有更高的等级值</p>\n</li>\n</ul>\n<h3 id=\"使用查询扩展\"><a href=\"#使用查询扩展\" class=\"headerlink\" title=\"使用查询扩展\"></a>使用查询扩展</h3><p>流程: <code>Against(&#39;值&#39; WITH QUERY EXPANSION)</code></p>\n<ol>\n<li>先进行一个基本的全文本搜索, 找出与搜索条件匹配的所有行</li>\n<li>MySQL 检查这些匹配行并选择有用的词</li>\n<li>再次进行全文本搜索, 使用原来的词 + 有用的词</li>\n</ol>\n<h3 id=\"布尔文本搜索\"><a href=\"#布尔文本搜索\" class=\"headerlink\" title=\"布尔文本搜索\"></a>布尔文本搜索</h3><p>以布尔方式, 提供如下关于内容的细节: </p>\n<ul>\n<li>要匹配的词</li>\n<li>要排斥的词</li>\n<li>排列提示(指定某些词比其他词更重要)</li>\n<li>表达式分组</li>\n<li>另外一些内容</li>\n</ul>\n<p><em>即使没有FULLTEXT也可以使用布尔方式, 但会非常缓慢</em></p>\n<p>示例: <code>WHERE Match(note_text) Against(&#39;heavy -rope*&#39; IN BOOLEAN MODE)</code></p>\n<ul>\n<li><code>-rope*</code>指示排除包含rope*的词(以rope开始的词)</li>\n<li><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210910205020402.png\" alt=\"image-20210910205020402\"></li>\n</ul>\n<h3 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h3><blockquote>\n<ul>\n<li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为 那些具有3个或3个以下字符的词（如果需要，这个数目可以更改）。</li>\n<li>MySQL带有一个内建的非用词（stopword）列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表（请参 阅MySQL文档以了解如何完成此工作）。</li>\n<li>许多词出现的频率很高，搜索它们没有用处（返回太多的结果）。因此，MySQL规定了一条50%规则，如果一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。</li>\n<li>如果表中的行数少于3行，则全文本搜索不返回结果（因为每个词 或者不出现，或者至少出现在50%的行中）。</li>\n<li>忽略词中的单引号。例如，don’t索引为dont。</li>\n<li>不具有词分隔符（包括日语和汉语）的语言不能恰当地返回全文本搜索结果。</li>\n<li>如前所述，仅在MyISAM数据库引擎中支持全文本搜索。</li>\n</ul>\n</blockquote>\n<h1 id=\"插入-更新-删除09-10\"><a href=\"#插入-更新-删除09-10\" class=\"headerlink\" title=\"插入/更新/删除09.10\"></a>插入/更新/删除<del>09.10</del></h1><h2 id=\"插入数据-INSERT\"><a href=\"#插入数据-INSERT\" class=\"headerlink\" title=\"插入数据-INSERT\"></a>插入数据-INSERT</h2><p>通常方法:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">1</span>\n<span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值2'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'值3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>插入一个新内容到表1中, 按照表中列的顺序输入</li>\n<li>若某一列没有值, 需要使用NULL(允许的话)</li>\n</ul>\n<p>更安全的方法:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">2</span><span class=\"token punctuation\">(</span>列名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n              列名<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n              列名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n                     <span class=\"token string\">'值2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>在表名后给出列名, 与之后的值顺序对应</li>\n<li>不需要提供值的列直接不写出列名 (NO NULL且没有默认值(如自增值)的必须赋值)</li>\n</ul>\n<p>插入多行: 同时使用以”;”分隔的多条 INSERT 语句或者单条 INSERT 有多组值(更快)</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">3</span><span class=\"token punctuation\">(</span>列名<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n               列名<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'值2'</span>\n               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n               <span class=\"token punctuation\">(</span>\n                   <span class=\"token string\">'值3'</span><span class=\"token punctuation\">,</span>\n                   <span class=\"token string\">'值4'</span>\n               <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>插入检索出的数据:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> 表<span class=\"token number\">4</span><span class=\"token punctuation\">(</span>列<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n               列<span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n               <span class=\"token keyword\">SELECT</span> 列<span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n               \t\t  列<span class=\"token number\">4</span>\n               <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"更新数据-UPDATE\"><a href=\"#更新数据-UPDATE\" class=\"headerlink\" title=\"更新数据-UPDATE\"></a>更新数据-UPDATE</h2><p>示例:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">UPDATE</span> 表<span class=\"token number\">1</span>\n<span class=\"token keyword\">SET</span> 列<span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">'值1'</span><span class=\"token punctuation\">,</span>\n\t列<span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token string\">'值2'</span>\n<span class=\"token keyword\">WHERE</span> 条件<span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用 WHERE 限定要更新的行, 不然它会更新所有行</li>\n<li>更新时如果出现错误, 则整个UPDATE操作被取消, 使用<code>UPDATE IGNORE 表1</code>, 即使发生错误也继续更新</li>\n<li>通过<code>SET 列1 = NULL</code>删去某列的值(假设允许NULL)</li>\n</ul>\n<h2 id=\"删除数据-DELETE\"><a href=\"#删除数据-DELETE\" class=\"headerlink\" title=\"删除数据-DELETE\"></a>删除数据-DELETE</h2><p>示例:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> 表<span class=\"token number\">2</span>\n<span class=\"token keyword\">WHERE</span> 条件<span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li>删除指定条件的行<ul>\n<li>删除指定的列使用UPDATE</li>\n</ul>\n</li>\n<li>不使用WHERE会删除全部行</li>\n</ul>\n<p>删除表中所有行使用 TRUNCATE TABLE 更快(删除原来的表并重新创建一个)</p>\n<p><strong>更新/删除前应现用 SELECT 对 WHERE 条件进行测试</strong></p>\n<h1 id=\"创建和操纵表\"><a href=\"#创建和操纵表\" class=\"headerlink\" title=\"创建和操纵表\"></a>创建和操纵表</h1><h2 id=\"创建表-CREATE\"><a href=\"#创建表-CREATE\" class=\"headerlink\" title=\"创建表-CREATE\"></a>创建表-CREATE</h2><p>使用交互式工具, 或直接使用MySQL语句</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> customers\n<span class=\"token punctuation\">(</span>\n    cust_id \t\t\t<span class=\"token keyword\">int</span> \t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span>\n    cust_name \t\t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n    cust_address \t<span class=\"token keyword\">char</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> \t<span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span>\n  \tcust_num\t\t\t<span class=\"token keyword\">int</span>\t\t\t\t<span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    PREMARY <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>cust_id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用<code>PREMARY KEY (列1, 列2)</code>指定主键, 主键不能有 NULL 与重复值</li>\n<li>使用<code>NOT NULL</code>指定不允许 NULL , 否则默认为允许</li>\n<li>使用<code>AUTO_INCREMENT</code>指定对该列自动增量<ul>\n<li><code>SELECT last_insert_id</code>返回最后一个 AUTO_INCREMENT 值</li>\n</ul>\n</li>\n<li>使用<code>DEFAULT 值1</code>指定默认值</li>\n<li>使用<code>ENGINE=引擎名</code>指定引擎类型, 不指定时使用默认引擎<ul>\n<li><code>InnoDB</code> : 不支持全文本搜索, 可靠的事务处理引擎</li>\n<li><code>MEMORY</code> : 数据存储在内存中, 速度很快, 适合临时表, 功能等同于 <code>MyISAM</code></li>\n<li><code>MyISAM</code> : 性能极高, 支持全文本搜索, 不支持事务处理</li>\n<li><strong>外键不能跨引擎</strong>, 引擎混用的缺点</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"更新表-ALTER\"><a href=\"#更新表-ALTER\" class=\"headerlink\" title=\"更新表-ALTER\"></a>更新表-ALTER</h2><p>理想状态下不应当更新表, 常见用途是定义外键</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> 表名<span class=\"token number\">1</span>\n<span class=\"token keyword\">ADD</span> 列名<span class=\"token number\">1</span> 数据类型<span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \t\t\t<span class=\"token comment\">-- 添加列1</span>\n<span class=\"token keyword\">DROP</span> <span class=\"token keyword\">COLUMN</span> 列名<span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\t\t\t <span class=\"token comment\">-- 删除列2</span>\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> 外键约束名 <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>列名<span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">-- 添加外键</span>\n<span class=\"token keyword\">REFERENCES</span> 表名<span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>列名<span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">ADD</span> <span class=\"token keyword\">CONSTRAINT</span> fk_products_vendors <span class=\"token keyword\">FOREIGN</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>vend_id<span class=\"token punctuation\">)</span>\t\t<span class=\"token comment\">-- 添加外键示例</span>\n<span class=\"token keyword\">REFERENCES</span> vendors <span class=\"token punctuation\">(</span>vend_id<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"删除表-DROP\"><a href=\"#删除表-DROP\" class=\"headerlink\" title=\"删除表-DROP\"></a>删除表-DROP</h2><p><code>DROP TABLE 表名</code>, 没有确认, 不能撤销</p>\n<h2 id=\"重命名表-RENAME\"><a href=\"#重命名表-RENAME\" class=\"headerlink\" title=\"重命名表-RENAME\"></a>重命名表-RENAME</h2><p><code>RENAME TABLE 表名1 TO 表名2</code>, 可以同时对多个表重命名</p>\n<h1 id=\"其他功能09-11\"><a href=\"#其他功能09-11\" class=\"headerlink\" title=\"其他功能09.11\"></a>其他功能<del>09.11</del></h1><h2 id=\"使用视图\"><a href=\"#使用视图\" class=\"headerlink\" title=\"使用视图\"></a>使用视图</h2><p>视图示例① : 简化复杂的联结</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> productcustomers <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> cust_name<span class=\"token punctuation\">,</span> cust_contact<span class=\"token punctuation\">,</span> prod_id\n<span class=\"token keyword\">FROM</span> customers<span class=\"token punctuation\">,</span> orders<span class=\"token punctuation\">,</span> orderitems\n<span class=\"token keyword\">WHERE</span> customers<span class=\"token punctuation\">.</span>cust_id <span class=\"token operator\">=</span> <span class=\"token keyword\">order</span><span class=\"token punctuation\">.</span>cust_id\n\t<span class=\"token operator\">AND</span> orderitems<span class=\"token punctuation\">.</span>order_num <span class=\"token operator\">=</span> orders<span class=\"token punctuation\">.</span>order_num<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>创建了一个名为 <code>productcutomers</code> 的视图, 联结三个表, 返回其中的三列</li>\n<li>使用 <code>SELECT * FROM productcutomers</code> 返回这个视图的三列</li>\n</ul>\n<p>视图示例② : 重新格式化检索出的数据</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> vendorlocations <span class=\"token keyword\">AS</span>\n<span class=\"token keyword\">SELECT</span> Concat<span class=\"token punctuation\">(</span>RTrim<span class=\"token punctuation\">(</span>vend_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> RTrim<span class=\"token punctuation\">(</span>vend_country<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">AS</span> vend_title\n<span class=\"token keyword\">FROM</span> vendors\n<span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> vend_name<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>之后使用 <code>SELECT * FROM vendorlocations;</code> 即可实现</li>\n</ul>\n<p>视图的用处:</p>\n<ul>\n<li>重用 SQL 语句</li>\n<li>简化复杂的 SQL 操作</li>\n<li>仅使用表的部分组成, 保护数据</li>\n<li>更改数据格式和表示</li>\n</ul>\n<p>注意点:</p>\n<ul>\n<li>视图不包含任何数据, 它包含的是一个 SQL 查询</li>\n<li>使用视图相当于执行检索, 过于复杂或嵌套过多的视图性能会下降严重</li>\n<li>视图必须唯一命名(与表一样)</li>\n<li>使用视图时的 ORDER BY 会覆盖视图内部的 ORDER BY</li>\n<li>视图可以与表同时使用</li>\n<li>视图不能索引</li>\n</ul>\n<p>更新视图: 对视图使用 INSERT, UPDATE, DELETE</p>\n<ul>\n<li>更新视图其实是更新其基表</li>\n<li>若要更新的基数据不能被确定, 则无法更新, 即视图定义中有以下操作: 分组, 联结, 子查询, 并, 聚集函数( Min(), Count(), Sum() )等, DISTINCT, 导出列</li>\n<li>视图应用于检索而不是更新</li>\n</ul>\n<h2 id=\"使用存储过程\"><a href=\"#使用存储过程\" class=\"headerlink\" title=\"使用存储过程\"></a>使用存储过程</h2><p>为以后的使用保存一条或多条MySQL语句的集合</p>\n<p>用处 :</p>\n<ul>\n<li>把处理封装, 简化复杂的操作</li>\n<li>保证所有开发人员使用的代码相同(同一存储过程), 防止错误</li>\n<li>简化对变动的管理 (使用存储过程的人员不需要知道这些变化)</li>\n</ul>\n<p>优点 : 简单, 安全, 高性能</p>\n<ul>\n<li>性能更好, 使用存储过程比单独的 SQL 语句更快</li>\n<li>用 一些只能用在单个请求中的MySQL元素和特性 编写功能更强更灵活的代码 <a href=\"#%E6%99%BA%E8%83%BD%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B1\">示例</a></li>\n</ul>\n<p>缺陷 : 编写时 更困难,需要安全访问权限 (编写与执行存储过程的权限是分开的)</p>\n<h3 id=\"执行存储过程-调用\"><a href=\"#执行存储过程-调用\" class=\"headerlink\" title=\"执行存储过程-调用\"></a>执行存储过程-<a name=\"调用存储过程1\">调用</a></h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CALL</span> productpricing<span class=\"token punctuation\">(</span><span class=\"token variable\">@pricelow</span><span class=\"token punctuation\">,</span>\n                   \t<span class=\"token variable\">@pricehigh</span><span class=\"token punctuation\">,</span>\n                   \t<span class=\"token variable\">@priceaverage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>通过 <code>@pricelow</code> 等向存储过程传递参数</li>\n<li>所以MySQL变量都必须以 @ 开始</li>\n<li>该语句不显示任何值, 使用 <code>SELECT @pricelow, @pricehigh;</code> 调用变量</li>\n</ul>\n<h3 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h3><pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> productpricing<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> Ave<span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> priceaverage\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>创建名为 <code>productpricing</code> 的存储过程</li>\n<li>若存储过程接受参数, 在名称后的 () 中列出</li>\n<li>通过 <code>CALL productpricing()</code> 调用这个存储过程</li>\n</ul>\n<p>使用命令行实用程序时需要更改分隔符, <code>DELIMITER //</code> 告诉它使用//作为新的语句结束分隔符, 语句结束时再使用 <code>DELIMITER ;</code> 换回去</p>\n<h3 id=\"删除存储过程\"><a href=\"#删除存储过程\" class=\"headerlink\" title=\"删除存储过程\"></a>删除存储过程</h3><p><code>DROP PROCEDURE productpricing</code></p>\n<ul>\n<li>删除时没有后面的 () </li>\n<li>若过程不存在会返回一个错误, 使用 <code>DROP PROCEDURE IF EXISTS</code> 不会产生错误</li>\n</ul>\n<h3 id=\"使用参数\"><a href=\"#使用参数\" class=\"headerlink\" title=\"使用参数\"></a>使用参数</h3><p>一般存储过程不显示结果, 而是把结果返回给变量</p>\n<ul>\n<li>变量: 内存中一个特定的位置, 用来临时存储数据, </li>\n</ul>\n<p>示例 1 :</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">CREAT <span class=\"token keyword\">PROCEDURE</span> productpricing<span class=\"token punctuation\">(</span>\n\t<span class=\"token keyword\">OUT</span> p1 <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ph <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> pa <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Min</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> p1\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> ph\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Avg</span><span class=\"token punctuation\">(</span>prod_price<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">INTO</span> pa\n\t<span class=\"token keyword\">FROM</span> products<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>此过程接受三个参数: p1存储产品最低价, ph存储最高价, pa存储平均价</li>\n<li>每个参数必须指定类型, 这里用  DECIMAL 指定十进制, (8, 2) 指定小数点左侧最多 8 位, 右侧最多 2 位. (右侧最多为8)</li>\n<li>记录集是不允许的类型, 所以不能通过一个参数返回多行列, 此处要使用三个参数</li>\n<li>通过<a href=\"#%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B1\">此处示例</a>调用此过程</li>\n</ul>\n<p>示例 2 :</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> ordertotal<span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">IN</span> onumber <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ototal <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">BEGIN</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>item_price <span class=\"token operator\">*</span> quantity<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">FROM</span> orderitems\n\t<span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">=</span> onumber\n\t<span class=\"token keyword\">INTO</span> ototal<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>使用 IN 表示要输入的数据</li>\n<li>示例调用 <code>CALL ordertotal(20005, @total)</code></li>\n</ul>\n<h3 id=\"建立智能存储\"><a href=\"#建立智能存储\" class=\"headerlink\" title=\"建立智能存储\"></a>建立智能存储</h3><p>在存储过程内包含业务规则和智能处理, <a name=\"智能存储示例1\">智能存储示例</a>:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Name: ordertotal</span>\n<span class=\"token comment\">-- Parameters: onumber = order number</span>\n\t\t\t\t\t\t<span class=\"token comment\">-- taxable = 0 ifnot taxable, 1 if taxable</span>\n\t\t\t\t\t\t<span class=\"token comment\">-- ototal\t = order total variable</span>\n\t\t\t\t\t\t\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> ordertotal<span class=\"token punctuation\">(</span>\n\t<span class=\"token operator\">IN</span> onumber <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">IN</span> taxable <span class=\"token keyword\">BOOLEAN</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">OUT</span> ototal <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'Obtain order total, optionally adding tax'</span>\n<span class=\"token keyword\">BEGIN</span>\n\n\t<span class=\"token comment\">-- Declare variable for total</span>\n\t<span class=\"token keyword\">DECLARE</span> total <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">-- Declare tax percentage</span>\n\t<span class=\"token keyword\">DECLARE</span> taxrate <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- Get the order total</span>\n\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>item_price<span class=\"token operator\">*</span>quantity<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">FROM</span> orderitems\n\t<span class=\"token keyword\">WHERE</span> order_num <span class=\"token operator\">=</span> onumber\n\t<span class=\"token keyword\">INTO</span> total<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- Is this taxable?</span>\n\t<span class=\"token keyword\">IF</span> taxable <span class=\"token keyword\">THEN</span>\n\t\t<span class=\"token comment\">-- Yes, so add taxrate to the total</span>\n\t\t<span class=\"token keyword\">SELECT</span> total<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>total<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token operator\">*</span>taxrate<span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> total<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">-- And finally, save to out variable</span>\n\t<span class=\"token keyword\">SELECT</span> total <span class=\"token keyword\">INTO</span> ototal<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>前边放置 – 增加注释</p>\n</li>\n<li><p>使用 DECLARE 声明两个局部变量</p>\n</li>\n<li><p>若增加营业税, 则输入 taxable 为真, 执行之后的 SELECT , 并将结果存储到局部变量 total</p>\n</li>\n<li><p>最后用一句 SELECT 将 total 保存到 ototal</p>\n</li>\n<li><p>COMMENT 添加一个解释, 会在 SHOW PROCEDURE STATUS 的结果中显示</p>\n</li>\n<li><p>使用 <code>CALL ordertotal(20005, 0, @total);</code> 使用这个过程</p>\n</li>\n</ul>\n<h3 id=\"检查存储过程\"><a href=\"#检查存储过程\" class=\"headerlink\" title=\"检查存储过程\"></a>检查存储过程</h3><p>显示用来创建一个存储过程的CREATE语句: <code>SHOW CREATE PROCEDURE ordertotal;</code> </p>\n<p>显示何时何人创建等详细信息: <code>SHOW PROCEDURE STATUS</code>, 信息太多可以使用 LIKE 过滤</p>\n<h2 id=\"使用游标\"><a href=\"#使用游标\" class=\"headerlink\" title=\"使用游标\"></a>使用游标</h2><p><del><em>不怎么用得到…过一下看一眼</em></del></p>\n<p><em>咕了</em></p>\n<h2 id=\"使用触发器\"><a href=\"#使用触发器\" class=\"headerlink\" title=\"使用触发器\"></a>使用触发器</h2><p><em>同上</em></p>\n<h2 id=\"管理事务处理\"><a href=\"#管理事务处理\" class=\"headerlink\" title=\"管理事务处理\"></a>管理事务处理</h2><p>事务处理是一种机制, 用来管理必须成批执行的 MySQL 操作</p>\n<ul>\n<li>用来维护数据库的完整性, 保证成批的 MySQL 操作要么完全执行, 要么完全不执行</li>\n<li>显示事务处理需要所用数据引擎支持</li>\n</ul>\n<p>相关名词:</p>\n<ul>\n<li>事务: 一组 SQL 语句</li>\n<li>回退: 撤销指定 SQL 语句的过程</li>\n<li>提交: 将未存储的 SQL 语句结果写入数据库表</li>\n<li>保留点: 事务处理中设置的临时占位符, 可以对它发布回退(不同于回退整个事务处理)</li>\n</ul>\n<p>使用 <code>START TRANSACTION</code>; 标识事务的开始</p>\n<p>使用 <code>ROLLBACK</code> 回退 START TRANSACTION 之后的所有语句</p>\n<ul>\n<li>不能回退 CREATE 或 DROP 操作</li>\n<li>使用后事务会自动关闭</li>\n</ul>\n<p>使用 <code>COMMIT</code> 提交 START TRANSACTION 之后的所有语句</p>\n<ul>\n<li>一般情况语句会自动隐式提交, 事务处理时语句需要手动提交</li>\n<li>如果前边的语句出错, COMMIT 不会提交</li>\n<li>使用后事务会自动关闭</li>\n</ul>\n<p>使用 <code>SAVEPOINT 保留点1</code>; 创建保留点, 支持回退部分事务处理</p>\n<ul>\n<li><p>使用 <code>ROLLBACK TO 保留点1;</code> 回退到指定位置</p>\n</li>\n<li><p>保留点在事务处理完成后自动释放 (执行一条 ROLLBACK 或 COMNMIT)</p>\n</li>\n</ul>\n<h3 id=\"使用-SET-autocommit-0-取消默认提交\"><a href=\"#使用-SET-autocommit-0-取消默认提交\" class=\"headerlink\" title=\"使用 SET autocommit=0 取消默认提交\"></a>使用 <code>SET autocommit=0</code> 取消默认提交</h3><ul>\n<li>该标志针对每个连接而不是服务器</li>\n</ul>\n<h2 id=\"字符集和校对顺序\"><a href=\"#字符集和校对顺序\" class=\"headerlink\" title=\"字符集和校对顺序\"></a>字符集和校对顺序</h2><p>字符集: 字母和符号的集合</p>\n<p>编码: 某个字符集成员的内部表示</p>\n<p>校对: 规定字符如何比较的指令</p>\n<p>使用 <code>SHOW CHARACTER SET;</code> 显示所有可用的字符集以及每个字符集的描述和默认校对</p>\n<p>使用 <code>SHOW COLLATION;</code> 查看所支持校对的完整列表以及它们适用的字符集</p>\n<ul>\n<li>许多校对出现两次, 一次区分大小写(以 <code>_cs</code> 表示), 一次不区分大小写(以 <code>_ci</code> 表示)</li>\n</ul>\n<p>给表指定字符集和校对: 在 <code>CREATE TABLE()</code> 语句后附加 <code>DEFAULT CHARACTER SET 字符集1 COLLATE 校对1;</code></p>\n<p>还支持给某个列指定字符集和校对, </p>\n<p>也支持在 SELLECT 语句末 <code>COLLATE 校对2</code>指定校对 (用于临时区分大小写)</p>\n<h2 id=\"安全管理\"><a href=\"#安全管理\" class=\"headerlink\" title=\"安全管理\"></a>安全管理</h2><p>创建用户, 管理用户权限等</p>\n<h2 id=\"数据库维护\"><a href=\"#数据库维护\" class=\"headerlink\" title=\"数据库维护\"></a>数据库维护</h2><p>备份数据, 数据库维护, 诊断启动问题, 查看日志文件等</p>\n<p>事务处理</p>\n<p>设置保留点</p>\n<p>中途出错回退到保留点</p>\n<p>之后的语句呢?</p>\n"},{"title":"Java访问权限修饰符","date":"2021-09-20T16:00:00.000Z","_content":"\n\n\n# 访问权限修饰符\n\nJava 为 类、属性字段、方法 提供了四种访问权限 : default, public, private, protected\n\n## default (friendly) - 包访问权限\n\n> 是默认访问权限, 没有任何关键字\n\nJava 中不声明任何访问权限修饰符则默认为此, 包内其他成员可访问\n\n- 其他包的子类不可见\n- 若两个类存放在同一个目录下且没有设定包名称, Java 自动将它们看作隶属于该目录的默认包中\n\n## public - 接口访问权限\n\n对任何人都可访问\n\n## private - 无法访问\n\n任何其他类无法访问\n\n- 子类不可见\n\n## protected - 继承访问权限\n\n相同包可见, 子类可见\n\n","source":"_posts/Java 类成员的四种访问权限.md","raw":"---\ntitle: Java访问权限修饰符\ndate: 2021-09-21\ntags: [java]\n---\n\n\n\n# 访问权限修饰符\n\nJava 为 类、属性字段、方法 提供了四种访问权限 : default, public, private, protected\n\n## default (friendly) - 包访问权限\n\n> 是默认访问权限, 没有任何关键字\n\nJava 中不声明任何访问权限修饰符则默认为此, 包内其他成员可访问\n\n- 其他包的子类不可见\n- 若两个类存放在同一个目录下且没有设定包名称, Java 自动将它们看作隶属于该目录的默认包中\n\n## public - 接口访问权限\n\n对任何人都可访问\n\n## private - 无法访问\n\n任何其他类无法访问\n\n- 子类不可见\n\n## protected - 继承访问权限\n\n相同包可见, 子类可见\n\n","slug":"Java 类成员的四种访问权限","published":1,"updated":"2022-06-16T13:16:49.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txot000aosu78crx630n","content":"<h1 id=\"访问权限修饰符\"><a href=\"#访问权限修饰符\" class=\"headerlink\" title=\"访问权限修饰符\"></a>访问权限修饰符</h1><p>Java 为 类、属性字段、方法 提供了四种访问权限 : default, public, private, protected</p>\n<h2 id=\"default-friendly-包访问权限\"><a href=\"#default-friendly-包访问权限\" class=\"headerlink\" title=\"default (friendly) - 包访问权限\"></a>default (friendly) - 包访问权限</h2><blockquote>\n<p>是默认访问权限, 没有任何关键字</p>\n</blockquote>\n<p>Java 中不声明任何访问权限修饰符则默认为此, 包内其他成员可访问</p>\n<ul>\n<li>其他包的子类不可见</li>\n<li>若两个类存放在同一个目录下且没有设定包名称, Java 自动将它们看作隶属于该目录的默认包中</li>\n</ul>\n<h2 id=\"public-接口访问权限\"><a href=\"#public-接口访问权限\" class=\"headerlink\" title=\"public - 接口访问权限\"></a>public - 接口访问权限</h2><p>对任何人都可访问</p>\n<h2 id=\"private-无法访问\"><a href=\"#private-无法访问\" class=\"headerlink\" title=\"private - 无法访问\"></a>private - 无法访问</h2><p>任何其他类无法访问</p>\n<ul>\n<li>子类不可见</li>\n</ul>\n<h2 id=\"protected-继承访问权限\"><a href=\"#protected-继承访问权限\" class=\"headerlink\" title=\"protected - 继承访问权限\"></a>protected - 继承访问权限</h2><p>相同包可见, 子类可见</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"访问权限修饰符\"><a href=\"#访问权限修饰符\" class=\"headerlink\" title=\"访问权限修饰符\"></a>访问权限修饰符</h1><p>Java 为 类、属性字段、方法 提供了四种访问权限 : default, public, private, protected</p>\n<h2 id=\"default-friendly-包访问权限\"><a href=\"#default-friendly-包访问权限\" class=\"headerlink\" title=\"default (friendly) - 包访问权限\"></a>default (friendly) - 包访问权限</h2><blockquote>\n<p>是默认访问权限, 没有任何关键字</p>\n</blockquote>\n<p>Java 中不声明任何访问权限修饰符则默认为此, 包内其他成员可访问</p>\n<ul>\n<li>其他包的子类不可见</li>\n<li>若两个类存放在同一个目录下且没有设定包名称, Java 自动将它们看作隶属于该目录的默认包中</li>\n</ul>\n<h2 id=\"public-接口访问权限\"><a href=\"#public-接口访问权限\" class=\"headerlink\" title=\"public - 接口访问权限\"></a>public - 接口访问权限</h2><p>对任何人都可访问</p>\n<h2 id=\"private-无法访问\"><a href=\"#private-无法访问\" class=\"headerlink\" title=\"private - 无法访问\"></a>private - 无法访问</h2><p>任何其他类无法访问</p>\n<ul>\n<li>子类不可见</li>\n</ul>\n<h2 id=\"protected-继承访问权限\"><a href=\"#protected-继承访问权限\" class=\"headerlink\" title=\"protected - 继承访问权限\"></a>protected - 继承访问权限</h2><p>相同包可见, 子类可见</p>\n"},{"title":"SQL 中使用 boolean logic 代替 CASE","date":"2021-10-29T16:00:00.000Z","_content":"\n# SQL WHERE clauses: Avoid CASE, use Boolean logic\n\n## Why ?\n\n- portable\n- easier to read\n- ❤ efficient\n\n## How ?\n\nFirst off, when I say “conditional logic”, I am talking about something like this: `IF A THEN B`\n\nWhere A and B are both conditions. For example, in a WHERE clause, you might want to implement a condition like this: `IF (@ReturnAll <>1) THEN (EmpID = @EmpID)`\n\nIn other words, if the @ReturnAll parameter is 1, then return all of the rows, but if @ReturnAll is not 1, then only return rows where EmpID is equal to the @EmpID parameter supplied.\n\nTo express this logic in the WHERE clause, many people might code it like this:\n\n`WHERE EmpID = CASE WHEN @ReturnAll<>1 THEN @EmpID ELSE EmpID END`\n\nHowever, this is kind of counter-intuitive (why should we check that EmpID = EmpID ?) and can be really tough to implement when the condition spans more than 1 column in the table (you need multiple CASE's). Also, if EmpID is null this will fail.\n\nThe alternative is to translate the condition into a regular boolean expression using only AND, OR and NOT. The logical translation of “IF A then B” is: `(Not A) or B`\n\nIf you work it out on paper, you will see it makes sense. To translate our WHERE clause requirement using the above logic, it becomes: `WHERE (@ReturnAll =1) OR (EmpID = @EmpID)`\n\n## More examples\n\n### A\n\nSuppose we wish to say: `IF @Filter=1 THEN Date= @Date and Cust= @Cust and Emp= @Emp`\n\nExpressing this in a CASE clause results in:\n\n```sql\nWHERE Date = CASE WHEN @Filter=1 THEN @Date ELSE Date END AND\nCust = CASE WHEN @Filter=1 THEN @Cust ELSE Cust END AND\nEmp = CASE WHEN @Filter=1 THEN @Emp ELSE Emp END\n```\n\nA little hard to read and quite inefficient – all 3 case expressions must be evaluated for each row in the result set. Without CASE, we get: `WHERE @Filter<>1 OR (Date= @Date and Cust= @Cust and Emp= @Emp)`\n\nMuch easier to read and maintain, and faster – if @Filter <>1, the rest of the expression can be ignored by the optimizer. \n\n### B\n\nUsing a single variable to implement the optional filter. For example: `IF @CustID is not null THEN CustID = @CustID`\n\nThis is often implemented using ISNULL() or COALESCE() like this: `WHERE CustID = ISNULL(@CustID, CustID)`\n\nThis is basically the same as writing a CASE expression in that it will not use an index on our column and doesn't implement solid boolean logic. \n\nConverting that IF to a simple boolean expression results in a nice WHERE clause of: `WHERE (@CustID is null OR CustID = @CustID)`\n\nWhich, again, is the preferred way to implement this type of logic in SQL.  It is short, simple, portable, easy to read and maintain, and efficient.\n\n## Finally,\n\nTo express: `IF A THEN B ELSE C`\nYou would write it as: `((Not A) or B) AND (A or C)`\n\nA little harder, but it does the job! No need for CASE in the WHERE clause\n\n## Reference\n\n[SQL WHERE clauses: Avoid CASE, use Boolean logic](https://weblogs.sqlteam.com/jeffs/2003/11/14/513/)\n\n","source":"_posts/SQL 中使用 boolean logic 代替 case.md","raw":"---\ntitle: SQL 中使用 boolean logic 代替 CASE\ndate: 2021-10-30\ntags: [sql]\n---\n\n# SQL WHERE clauses: Avoid CASE, use Boolean logic\n\n## Why ?\n\n- portable\n- easier to read\n- ❤ efficient\n\n## How ?\n\nFirst off, when I say “conditional logic”, I am talking about something like this: `IF A THEN B`\n\nWhere A and B are both conditions. For example, in a WHERE clause, you might want to implement a condition like this: `IF (@ReturnAll <>1) THEN (EmpID = @EmpID)`\n\nIn other words, if the @ReturnAll parameter is 1, then return all of the rows, but if @ReturnAll is not 1, then only return rows where EmpID is equal to the @EmpID parameter supplied.\n\nTo express this logic in the WHERE clause, many people might code it like this:\n\n`WHERE EmpID = CASE WHEN @ReturnAll<>1 THEN @EmpID ELSE EmpID END`\n\nHowever, this is kind of counter-intuitive (why should we check that EmpID = EmpID ?) and can be really tough to implement when the condition spans more than 1 column in the table (you need multiple CASE's). Also, if EmpID is null this will fail.\n\nThe alternative is to translate the condition into a regular boolean expression using only AND, OR and NOT. The logical translation of “IF A then B” is: `(Not A) or B`\n\nIf you work it out on paper, you will see it makes sense. To translate our WHERE clause requirement using the above logic, it becomes: `WHERE (@ReturnAll =1) OR (EmpID = @EmpID)`\n\n## More examples\n\n### A\n\nSuppose we wish to say: `IF @Filter=1 THEN Date= @Date and Cust= @Cust and Emp= @Emp`\n\nExpressing this in a CASE clause results in:\n\n```sql\nWHERE Date = CASE WHEN @Filter=1 THEN @Date ELSE Date END AND\nCust = CASE WHEN @Filter=1 THEN @Cust ELSE Cust END AND\nEmp = CASE WHEN @Filter=1 THEN @Emp ELSE Emp END\n```\n\nA little hard to read and quite inefficient – all 3 case expressions must be evaluated for each row in the result set. Without CASE, we get: `WHERE @Filter<>1 OR (Date= @Date and Cust= @Cust and Emp= @Emp)`\n\nMuch easier to read and maintain, and faster – if @Filter <>1, the rest of the expression can be ignored by the optimizer. \n\n### B\n\nUsing a single variable to implement the optional filter. For example: `IF @CustID is not null THEN CustID = @CustID`\n\nThis is often implemented using ISNULL() or COALESCE() like this: `WHERE CustID = ISNULL(@CustID, CustID)`\n\nThis is basically the same as writing a CASE expression in that it will not use an index on our column and doesn't implement solid boolean logic. \n\nConverting that IF to a simple boolean expression results in a nice WHERE clause of: `WHERE (@CustID is null OR CustID = @CustID)`\n\nWhich, again, is the preferred way to implement this type of logic in SQL.  It is short, simple, portable, easy to read and maintain, and efficient.\n\n## Finally,\n\nTo express: `IF A THEN B ELSE C`\nYou would write it as: `((Not A) or B) AND (A or C)`\n\nA little harder, but it does the job! No need for CASE in the WHERE clause\n\n## Reference\n\n[SQL WHERE clauses: Avoid CASE, use Boolean logic](https://weblogs.sqlteam.com/jeffs/2003/11/14/513/)\n\n","slug":"SQL 中使用 boolean logic 代替 case","published":1,"updated":"2022-06-16T13:16:49.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txou000dosu7dnav70it","content":"<h1 id=\"SQL-WHERE-clauses-Avoid-CASE-use-Boolean-logic\"><a href=\"#SQL-WHERE-clauses-Avoid-CASE-use-Boolean-logic\" class=\"headerlink\" title=\"SQL WHERE clauses: Avoid CASE, use Boolean logic\"></a>SQL WHERE clauses: Avoid CASE, use Boolean logic</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why ?\"></a>Why ?</h2><ul>\n<li>portable</li>\n<li>easier to read</li>\n<li>❤ efficient</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How ?\"></a>How ?</h2><p>First off, when I say “conditional logic”, I am talking about something like this: <code>IF A THEN B</code></p>\n<p>Where A and B are both conditions. For example, in a WHERE clause, you might want to implement a condition like this: <code>IF (@ReturnAll &lt;&gt;1) THEN (EmpID = @EmpID)</code></p>\n<p>In other words, if the @ReturnAll parameter is 1, then return all of the rows, but if @ReturnAll is not 1, then only return rows where EmpID is equal to the @EmpID parameter supplied.</p>\n<p>To express this logic in the WHERE clause, many people might code it like this:</p>\n<p><code>WHERE EmpID = CASE WHEN @ReturnAll&lt;&gt;1 THEN @EmpID ELSE EmpID END</code></p>\n<p>However, this is kind of counter-intuitive (why should we check that EmpID = EmpID ?) and can be really tough to implement when the condition spans more than 1 column in the table (you need multiple CASE’s). Also, if EmpID is null this will fail.</p>\n<p>The alternative is to translate the condition into a regular boolean expression using only AND, OR and NOT. The logical translation of “IF A then B” is: <code>(Not A) or B</code></p>\n<p>If you work it out on paper, you will see it makes sense. To translate our WHERE clause requirement using the above logic, it becomes: <code>WHERE (@ReturnAll =1) OR (EmpID = @EmpID)</code></p>\n<h2 id=\"More-examples\"><a href=\"#More-examples\" class=\"headerlink\" title=\"More examples\"></a>More examples</h2><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>Suppose we wish to say: <code>IF @Filter=1 THEN Date= @Date and Cust= @Cust and Emp= @Emp</code></p>\n<p>Expressing this in a CASE clause results in:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">Date</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Date</span> <span class=\"token keyword\">ELSE</span> <span class=\"token keyword\">Date</span> <span class=\"token keyword\">END</span> <span class=\"token operator\">AND</span>\nCust <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Cust</span> <span class=\"token keyword\">ELSE</span> Cust <span class=\"token keyword\">END</span> <span class=\"token operator\">AND</span>\nEmp <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Emp</span> <span class=\"token keyword\">ELSE</span> Emp <span class=\"token keyword\">END</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>A little hard to read and quite inefficient – all 3 case expressions must be evaluated for each row in the result set. Without CASE, we get: <code>WHERE @Filter&lt;&gt;1 OR (Date= @Date and Cust= @Cust and Emp= @Emp)</code></p>\n<p>Much easier to read and maintain, and faster – if @Filter &lt;&gt;1, the rest of the expression can be ignored by the optimizer. </p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p>Using a single variable to implement the optional filter. For example: <code>IF @CustID is not null THEN CustID = @CustID</code></p>\n<p>This is often implemented using ISNULL() or COALESCE() like this: <code>WHERE CustID = ISNULL(@CustID, CustID)</code></p>\n<p>This is basically the same as writing a CASE expression in that it will not use an index on our column and doesn’t implement solid boolean logic. </p>\n<p>Converting that IF to a simple boolean expression results in a nice WHERE clause of: <code>WHERE (@CustID is null OR CustID = @CustID)</code></p>\n<p>Which, again, is the preferred way to implement this type of logic in SQL.  It is short, simple, portable, easy to read and maintain, and efficient.</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally,\"></a>Finally,</h2><p>To express: <code>IF A THEN B ELSE C</code><br>You would write it as: <code>((Not A) or B) AND (A or C)</code></p>\n<p>A little harder, but it does the job! No need for CASE in the WHERE clause</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://weblogs.sqlteam.com/jeffs/2003/11/14/513/\">SQL WHERE clauses: Avoid CASE, use Boolean logic</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SQL-WHERE-clauses-Avoid-CASE-use-Boolean-logic\"><a href=\"#SQL-WHERE-clauses-Avoid-CASE-use-Boolean-logic\" class=\"headerlink\" title=\"SQL WHERE clauses: Avoid CASE, use Boolean logic\"></a>SQL WHERE clauses: Avoid CASE, use Boolean logic</h1><h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why ?\"></a>Why ?</h2><ul>\n<li>portable</li>\n<li>easier to read</li>\n<li>❤ efficient</li>\n</ul>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How ?\"></a>How ?</h2><p>First off, when I say “conditional logic”, I am talking about something like this: <code>IF A THEN B</code></p>\n<p>Where A and B are both conditions. For example, in a WHERE clause, you might want to implement a condition like this: <code>IF (@ReturnAll &lt;&gt;1) THEN (EmpID = @EmpID)</code></p>\n<p>In other words, if the @ReturnAll parameter is 1, then return all of the rows, but if @ReturnAll is not 1, then only return rows where EmpID is equal to the @EmpID parameter supplied.</p>\n<p>To express this logic in the WHERE clause, many people might code it like this:</p>\n<p><code>WHERE EmpID = CASE WHEN @ReturnAll&lt;&gt;1 THEN @EmpID ELSE EmpID END</code></p>\n<p>However, this is kind of counter-intuitive (why should we check that EmpID = EmpID ?) and can be really tough to implement when the condition spans more than 1 column in the table (you need multiple CASE’s). Also, if EmpID is null this will fail.</p>\n<p>The alternative is to translate the condition into a regular boolean expression using only AND, OR and NOT. The logical translation of “IF A then B” is: <code>(Not A) or B</code></p>\n<p>If you work it out on paper, you will see it makes sense. To translate our WHERE clause requirement using the above logic, it becomes: <code>WHERE (@ReturnAll =1) OR (EmpID = @EmpID)</code></p>\n<h2 id=\"More-examples\"><a href=\"#More-examples\" class=\"headerlink\" title=\"More examples\"></a>More examples</h2><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A\"></a>A</h3><p>Suppose we wish to say: <code>IF @Filter=1 THEN Date= @Date and Cust= @Cust and Emp= @Emp</code></p>\n<p>Expressing this in a CASE clause results in:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">Date</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Date</span> <span class=\"token keyword\">ELSE</span> <span class=\"token keyword\">Date</span> <span class=\"token keyword\">END</span> <span class=\"token operator\">AND</span>\nCust <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Cust</span> <span class=\"token keyword\">ELSE</span> Cust <span class=\"token keyword\">END</span> <span class=\"token operator\">AND</span>\nEmp <span class=\"token operator\">=</span> <span class=\"token keyword\">CASE</span> <span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@Filter</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@Emp</span> <span class=\"token keyword\">ELSE</span> Emp <span class=\"token keyword\">END</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>A little hard to read and quite inefficient – all 3 case expressions must be evaluated for each row in the result set. Without CASE, we get: <code>WHERE @Filter&lt;&gt;1 OR (Date= @Date and Cust= @Cust and Emp= @Emp)</code></p>\n<p>Much easier to read and maintain, and faster – if @Filter &lt;&gt;1, the rest of the expression can be ignored by the optimizer. </p>\n<h3 id=\"B\"><a href=\"#B\" class=\"headerlink\" title=\"B\"></a>B</h3><p>Using a single variable to implement the optional filter. For example: <code>IF @CustID is not null THEN CustID = @CustID</code></p>\n<p>This is often implemented using ISNULL() or COALESCE() like this: <code>WHERE CustID = ISNULL(@CustID, CustID)</code></p>\n<p>This is basically the same as writing a CASE expression in that it will not use an index on our column and doesn’t implement solid boolean logic. </p>\n<p>Converting that IF to a simple boolean expression results in a nice WHERE clause of: <code>WHERE (@CustID is null OR CustID = @CustID)</code></p>\n<p>Which, again, is the preferred way to implement this type of logic in SQL.  It is short, simple, portable, easy to read and maintain, and efficient.</p>\n<h2 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally,\"></a>Finally,</h2><p>To express: <code>IF A THEN B ELSE C</code><br>You would write it as: <code>((Not A) or B) AND (A or C)</code></p>\n<p>A little harder, but it does the job! No need for CASE in the WHERE clause</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://weblogs.sqlteam.com/jeffs/2003/11/14/513/\">SQL WHERE clauses: Avoid CASE, use Boolean logic</a></p>\n"},{"title":"SpringBoot 3.0 预览","date":"2022-03-01T16:00:00.000Z","_content":"\n# Spring Boot 3.0 预览\n\n1 月 20 日, Spring 发布了新的 Spring Boot 3.0 里程碑版本 Spring Boot 3.0.0-M1 , 并预计每两月发布一个新的里程碑版本, 11月下旬发布 GA 版本\n\n>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available\n\n## 依赖版本变动\n\n> 这听起来虽然有些激进，但请注意，我们讨论的是 2022 年第四季度的发布。到那时，JDK 17 早已取代 JDK 11 成为下一个长期支持版本一年多了，而且它本身也将被 JDK 18 和 JDK  19 所取代，作为特性发布版本，它们已经可用了，而且 JDK 20 也接近其功能冻结期。\n>\n> 对于 Jakarta EE 9 也是如此。我们预计 Jakarta  EE 10 届时业已发布，并且新一代的 Tomcat、Jetty 和其他的运行时方案将会支持它们。保持上述最低限度的基线，可以在 Spring  Framework 6.x 一代中获得进一步的 Java 进化，而 Java 17 和 Jakarta EE 9 只是一个开始。\n\n### Java 8 → Java 17\n\njava 17 是 2021.09.14 推出的新 LTS 版本 (Long Term Support) \n\n### Java EE → Jakarta EE\n\nJava EE 在几年前被 Eclipse 基金会改名为 Jakarta EE , 重命名了很多规范\n\n- 需要将命名空间 javax 改为 jakarta\n- 一些依赖Java EE API的第三方库，目前还没有得到很好的支持，在Spring Boot 3中暂时会先移除\n  ( 见 [暂时移除的依赖](#暂时移除的依赖) )\n\n### Spring Framework 5.3 → 6.0\n\n预计于 2022.08 发布第一个 GA 版本\n\n#### 关注点: \n\n排除点和变更点\n\n- 可能 XML 配置格式会成为过去式。\n- 一些 Java EE API（ EJB、JCA、JAX-WS）过期。\n- RPC 支持（不知道怎么翻译 HTTP Invoker ）过期\n\n迁移至Jakarta EE 9+\n\n- `jakarta.servlet`(Tomcat 10、Jetty 11相关)。\n- `jakarta.persistence`(Hibernate ORM 6?)。\n\n云原生\n\n改进对**GraalVM**和**Project Leyden**(一个Java静态图项目)的支持。\n\n#### M1 版本特性: \n\n- 关于 Commons FileUpload and Tiles, 和 FreeMarker JSP 的集成将被移除\n\n- @RequestMapping without @Controller registered as handler\n\n  > https://github.com/spring-projects/spring-framework/issues/22154\n\n- HttpMethod 从枚举升级为一个类\n\n  > https://github.com/spring-projects/spring-framework/issues/27697\n\n> 更多新特性: https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\n\n### 其他依赖版本升级\n\nSpring Boot 3.0.0-M1 moves to new versions of several Spring projects:\n\n- Micrometer 2.0.0-M1\n- Spring AMQP 3.0.0-M1\n- Spring Batch 5.0.0-M1\n- Spring Data 2022.0.0-M1\n- [Spring Framework 6.0.0-M2](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2)\n- Spring Integration 6.0.0-M1\n- [Spring HATEOAS 2.0.0-M1](https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.0-M1)\n- Spring Kafka 3.0.0-M1\n- [Spring LDAP 3.0.0-M1](https://github.com/spring-projects/spring-ldap/releases/tag/3.0.0-M1)\n- [Spring REST Docs 3.0.0-M1](https://github.com/spring-projects/spring-restdocs/releases/tag/v3.0.0-M1)\n  - 在 M2 版本中升级为 Spring REST Docs 3.0.0-M2\n- [Spring Security 6.0.0-M1](https://github.com/spring-projects/spring-security/releases/tag/6.0.0-M1)\n- Spring Session 2022.0.0-M1\n- Spring Web Services 4.0.0-M1\n\nNumerous third-party dependencies have also been updated, some of the more noteworthy of which are the following:\n\n- Artemis 2.20.0\n- Hazelcast 5.0\n- Hibernate Validator 7.0\n- Jakarta Activation 2.0\n- Jakarta Annotation 2.0\n- Jakarta JMS 3.0\n- Jakarta JSON 2.0\n- Jakarta JSON Bind 3.0\n- Jakarta Mail 2.0\n- Jakarta Persistence 3.0\n- Jakarta Servlet 5.0\n- Jakarta Servlet JSP JSTL 2.0\n- Jakarta Transaction 2.0\n- Jakarta Validation 3.0\n- Jakarta WebSocket 2.0\n- Jakarta WS RS 3.0\n- Jakarta XML Bind 3.0\n- Jakarta XML Soap 2.0\n- Jetty 11\n- jOOQ 3.16\n- Tomcat 10\n\n## 暂时移除的依赖\n\n- EhCache 3 \n- H2’s web console\n  - 已在 M2 版本中恢复\n- Hibernate’s metrics\n- Infinispan\n- Jolokia\n- Pooled JMS\n- REST Assured\n  - 已在 M2 版本中恢复: REST Assured 4.5\n- SMTP appending with Logback\n- SMTP appending with Log4j 2\n\n## Reference\n\n> - Spring Boot 3.0.0 M1 Release Notes : https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes\n> - Spring Boot 3.0.0 M2 Release Notes : https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes\n> - Upgrading to Spring Framework 6.x : https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x\n> - Spring Framework v6.0.0-M1 : https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\n> - Spring Framework v6.0.0-M2 : https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\n> - Spring Framework 6 将使用 Java 17 和 Jakarta EE 9 作为基线版本 : https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8\n> - Java 近期新闻综述 : https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb\n\n","source":"_posts/SpringBoot 3.0预览.md","raw":"---\ntitle: SpringBoot 3.0 预览\ndate: 2022-03-02\ntags: [springboot, spring, java]\n---\n\n# Spring Boot 3.0 预览\n\n1 月 20 日, Spring 发布了新的 Spring Boot 3.0 里程碑版本 Spring Boot 3.0.0-M1 , 并预计每两月发布一个新的里程碑版本, 11月下旬发布 GA 版本\n\n>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available\n\n## 依赖版本变动\n\n> 这听起来虽然有些激进，但请注意，我们讨论的是 2022 年第四季度的发布。到那时，JDK 17 早已取代 JDK 11 成为下一个长期支持版本一年多了，而且它本身也将被 JDK 18 和 JDK  19 所取代，作为特性发布版本，它们已经可用了，而且 JDK 20 也接近其功能冻结期。\n>\n> 对于 Jakarta EE 9 也是如此。我们预计 Jakarta  EE 10 届时业已发布，并且新一代的 Tomcat、Jetty 和其他的运行时方案将会支持它们。保持上述最低限度的基线，可以在 Spring  Framework 6.x 一代中获得进一步的 Java 进化，而 Java 17 和 Jakarta EE 9 只是一个开始。\n\n### Java 8 → Java 17\n\njava 17 是 2021.09.14 推出的新 LTS 版本 (Long Term Support) \n\n### Java EE → Jakarta EE\n\nJava EE 在几年前被 Eclipse 基金会改名为 Jakarta EE , 重命名了很多规范\n\n- 需要将命名空间 javax 改为 jakarta\n- 一些依赖Java EE API的第三方库，目前还没有得到很好的支持，在Spring Boot 3中暂时会先移除\n  ( 见 [暂时移除的依赖](#暂时移除的依赖) )\n\n### Spring Framework 5.3 → 6.0\n\n预计于 2022.08 发布第一个 GA 版本\n\n#### 关注点: \n\n排除点和变更点\n\n- 可能 XML 配置格式会成为过去式。\n- 一些 Java EE API（ EJB、JCA、JAX-WS）过期。\n- RPC 支持（不知道怎么翻译 HTTP Invoker ）过期\n\n迁移至Jakarta EE 9+\n\n- `jakarta.servlet`(Tomcat 10、Jetty 11相关)。\n- `jakarta.persistence`(Hibernate ORM 6?)。\n\n云原生\n\n改进对**GraalVM**和**Project Leyden**(一个Java静态图项目)的支持。\n\n#### M1 版本特性: \n\n- 关于 Commons FileUpload and Tiles, 和 FreeMarker JSP 的集成将被移除\n\n- @RequestMapping without @Controller registered as handler\n\n  > https://github.com/spring-projects/spring-framework/issues/22154\n\n- HttpMethod 从枚举升级为一个类\n\n  > https://github.com/spring-projects/spring-framework/issues/27697\n\n> 更多新特性: https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\n\n### 其他依赖版本升级\n\nSpring Boot 3.0.0-M1 moves to new versions of several Spring projects:\n\n- Micrometer 2.0.0-M1\n- Spring AMQP 3.0.0-M1\n- Spring Batch 5.0.0-M1\n- Spring Data 2022.0.0-M1\n- [Spring Framework 6.0.0-M2](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2)\n- Spring Integration 6.0.0-M1\n- [Spring HATEOAS 2.0.0-M1](https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.0-M1)\n- Spring Kafka 3.0.0-M1\n- [Spring LDAP 3.0.0-M1](https://github.com/spring-projects/spring-ldap/releases/tag/3.0.0-M1)\n- [Spring REST Docs 3.0.0-M1](https://github.com/spring-projects/spring-restdocs/releases/tag/v3.0.0-M1)\n  - 在 M2 版本中升级为 Spring REST Docs 3.0.0-M2\n- [Spring Security 6.0.0-M1](https://github.com/spring-projects/spring-security/releases/tag/6.0.0-M1)\n- Spring Session 2022.0.0-M1\n- Spring Web Services 4.0.0-M1\n\nNumerous third-party dependencies have also been updated, some of the more noteworthy of which are the following:\n\n- Artemis 2.20.0\n- Hazelcast 5.0\n- Hibernate Validator 7.0\n- Jakarta Activation 2.0\n- Jakarta Annotation 2.0\n- Jakarta JMS 3.0\n- Jakarta JSON 2.0\n- Jakarta JSON Bind 3.0\n- Jakarta Mail 2.0\n- Jakarta Persistence 3.0\n- Jakarta Servlet 5.0\n- Jakarta Servlet JSP JSTL 2.0\n- Jakarta Transaction 2.0\n- Jakarta Validation 3.0\n- Jakarta WebSocket 2.0\n- Jakarta WS RS 3.0\n- Jakarta XML Bind 3.0\n- Jakarta XML Soap 2.0\n- Jetty 11\n- jOOQ 3.16\n- Tomcat 10\n\n## 暂时移除的依赖\n\n- EhCache 3 \n- H2’s web console\n  - 已在 M2 版本中恢复\n- Hibernate’s metrics\n- Infinispan\n- Jolokia\n- Pooled JMS\n- REST Assured\n  - 已在 M2 版本中恢复: REST Assured 4.5\n- SMTP appending with Logback\n- SMTP appending with Log4j 2\n\n## Reference\n\n> - Spring Boot 3.0.0 M1 Release Notes : https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes\n> - Spring Boot 3.0.0 M2 Release Notes : https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes\n> - Upgrading to Spring Framework 6.x : https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x\n> - Spring Framework v6.0.0-M1 : https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\n> - Spring Framework v6.0.0-M2 : https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\n> - Spring Framework 6 将使用 Java 17 和 Jakarta EE 9 作为基线版本 : https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8\n> - Java 近期新闻综述 : https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb\n\n","slug":"SpringBoot 3.0预览","published":1,"updated":"2022-06-16T13:16:49.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txov000eosu77geu2dde","content":"<h1 id=\"Spring-Boot-3-0-预览\"><a href=\"#Spring-Boot-3-0-预览\" class=\"headerlink\" title=\"Spring Boot 3.0 预览\"></a>Spring Boot 3.0 预览</h1><p>1 月 20 日, Spring 发布了新的 Spring Boot 3.0 里程碑版本 Spring Boot 3.0.0-M1 , 并预计每两月发布一个新的里程碑版本, 11月下旬发布 GA 版本</p>\n<blockquote>\n<p><a href=\"https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available\">https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</a></p>\n</blockquote>\n<h2 id=\"依赖版本变动\"><a href=\"#依赖版本变动\" class=\"headerlink\" title=\"依赖版本变动\"></a>依赖版本变动</h2><blockquote>\n<p>这听起来虽然有些激进，但请注意，我们讨论的是 2022 年第四季度的发布。到那时，JDK 17 早已取代 JDK 11 成为下一个长期支持版本一年多了，而且它本身也将被 JDK 18 和 JDK  19 所取代，作为特性发布版本，它们已经可用了，而且 JDK 20 也接近其功能冻结期。</p>\n<p>对于 Jakarta EE 9 也是如此。我们预计 Jakarta  EE 10 届时业已发布，并且新一代的 Tomcat、Jetty 和其他的运行时方案将会支持它们。保持上述最低限度的基线，可以在 Spring  Framework 6.x 一代中获得进一步的 Java 进化，而 Java 17 和 Jakarta EE 9 只是一个开始。</p>\n</blockquote>\n<h3 id=\"Java-8-→-Java-17\"><a href=\"#Java-8-→-Java-17\" class=\"headerlink\" title=\"Java 8 → Java 17\"></a>Java 8 → Java 17</h3><p>java 17 是 2021.09.14 推出的新 LTS 版本 (Long Term Support) </p>\n<h3 id=\"Java-EE-→-Jakarta-EE\"><a href=\"#Java-EE-→-Jakarta-EE\" class=\"headerlink\" title=\"Java EE → Jakarta EE\"></a>Java EE → Jakarta EE</h3><p>Java EE 在几年前被 Eclipse 基金会改名为 Jakarta EE , 重命名了很多规范</p>\n<ul>\n<li>需要将命名空间 javax 改为 jakarta</li>\n<li>一些依赖Java EE API的第三方库，目前还没有得到很好的支持，在Spring Boot 3中暂时会先移除<br>( 见 <a href=\"#%E6%9A%82%E6%97%B6%E7%A7%BB%E9%99%A4%E7%9A%84%E4%BE%9D%E8%B5%96\">暂时移除的依赖</a> )</li>\n</ul>\n<h3 id=\"Spring-Framework-5-3-→-6-0\"><a href=\"#Spring-Framework-5-3-→-6-0\" class=\"headerlink\" title=\"Spring Framework 5.3 → 6.0\"></a>Spring Framework 5.3 → 6.0</h3><p>预计于 2022.08 发布第一个 GA 版本</p>\n<h4 id=\"关注点\"><a href=\"#关注点\" class=\"headerlink\" title=\"关注点:\"></a>关注点:</h4><p>排除点和变更点</p>\n<ul>\n<li>可能 XML 配置格式会成为过去式。</li>\n<li>一些 Java EE API（ EJB、JCA、JAX-WS）过期。</li>\n<li>RPC 支持（不知道怎么翻译 HTTP Invoker ）过期</li>\n</ul>\n<p>迁移至Jakarta EE 9+</p>\n<ul>\n<li><code>jakarta.servlet</code>(Tomcat 10、Jetty 11相关)。</li>\n<li><code>jakarta.persistence</code>(Hibernate ORM 6?)。</li>\n</ul>\n<p>云原生</p>\n<p>改进对<strong>GraalVM</strong>和<strong>Project Leyden</strong>(一个Java静态图项目)的支持。</p>\n<h4 id=\"M1-版本特性\"><a href=\"#M1-版本特性\" class=\"headerlink\" title=\"M1 版本特性:\"></a>M1 版本特性:</h4><ul>\n<li><p>关于 Commons FileUpload and Tiles, 和 FreeMarker JSP 的集成将被移除</p>\n</li>\n<li><p>@RequestMapping without @Controller registered as handler</p>\n<blockquote>\n<p><a href=\"https://github.com/spring-projects/spring-framework/issues/22154\">https://github.com/spring-projects/spring-framework/issues/22154</a></p>\n</blockquote>\n</li>\n<li><p>HttpMethod 从枚举升级为一个类</p>\n<blockquote>\n<p><a href=\"https://github.com/spring-projects/spring-framework/issues/27697\">https://github.com/spring-projects/spring-framework/issues/27697</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>更多新特性: <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1</a></p>\n</blockquote>\n<h3 id=\"其他依赖版本升级\"><a href=\"#其他依赖版本升级\" class=\"headerlink\" title=\"其他依赖版本升级\"></a>其他依赖版本升级</h3><p>Spring Boot 3.0.0-M1 moves to new versions of several Spring projects:</p>\n<ul>\n<li>Micrometer 2.0.0-M1</li>\n<li>Spring AMQP 3.0.0-M1</li>\n<li>Spring Batch 5.0.0-M1</li>\n<li>Spring Data 2022.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\">Spring Framework 6.0.0-M2</a></li>\n<li>Spring Integration 6.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.0-M1\">Spring HATEOAS 2.0.0-M1</a></li>\n<li>Spring Kafka 3.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-ldap/releases/tag/3.0.0-M1\">Spring LDAP 3.0.0-M1</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-restdocs/releases/tag/v3.0.0-M1\">Spring REST Docs 3.0.0-M1</a><ul>\n<li>在 M2 版本中升级为 Spring REST Docs 3.0.0-M2</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.0.0-M1\">Spring Security 6.0.0-M1</a></li>\n<li>Spring Session 2022.0.0-M1</li>\n<li>Spring Web Services 4.0.0-M1</li>\n</ul>\n<p>Numerous third-party dependencies have also been updated, some of the more noteworthy of which are the following:</p>\n<ul>\n<li>Artemis 2.20.0</li>\n<li>Hazelcast 5.0</li>\n<li>Hibernate Validator 7.0</li>\n<li>Jakarta Activation 2.0</li>\n<li>Jakarta Annotation 2.0</li>\n<li>Jakarta JMS 3.0</li>\n<li>Jakarta JSON 2.0</li>\n<li>Jakarta JSON Bind 3.0</li>\n<li>Jakarta Mail 2.0</li>\n<li>Jakarta Persistence 3.0</li>\n<li>Jakarta Servlet 5.0</li>\n<li>Jakarta Servlet JSP JSTL 2.0</li>\n<li>Jakarta Transaction 2.0</li>\n<li>Jakarta Validation 3.0</li>\n<li>Jakarta WebSocket 2.0</li>\n<li>Jakarta WS RS 3.0</li>\n<li>Jakarta XML Bind 3.0</li>\n<li>Jakarta XML Soap 2.0</li>\n<li>Jetty 11</li>\n<li>jOOQ 3.16</li>\n<li>Tomcat 10</li>\n</ul>\n<h2 id=\"暂时移除的依赖\"><a href=\"#暂时移除的依赖\" class=\"headerlink\" title=\"暂时移除的依赖\"></a>暂时移除的依赖</h2><ul>\n<li>EhCache 3 </li>\n<li>H2’s web console<ul>\n<li>已在 M2 版本中恢复</li>\n</ul>\n</li>\n<li>Hibernate’s metrics</li>\n<li>Infinispan</li>\n<li>Jolokia</li>\n<li>Pooled JMS</li>\n<li>REST Assured<ul>\n<li>已在 M2 版本中恢复: REST Assured 4.5</li>\n</ul>\n</li>\n<li>SMTP appending with Logback</li>\n<li>SMTP appending with Log4j 2</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote>\n<ul>\n<li>Spring Boot 3.0.0 M1 Release Notes : <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes\">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes</a></li>\n<li>Spring Boot 3.0.0 M2 Release Notes : <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes\">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes</a></li>\n<li>Upgrading to Spring Framework 6.x : <a href=\"https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x\">https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x</a></li>\n<li>Spring Framework v6.0.0-M1 : <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1</a></li>\n<li>Spring Framework v6.0.0-M2 : <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2</a></li>\n<li>Spring Framework 6 将使用 Java 17 和 Jakarta EE 9 作为基线版本 : <a href=\"https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8\">https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8</a></li>\n<li>Java 近期新闻综述 : <a href=\"https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb\">https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Spring-Boot-3-0-预览\"><a href=\"#Spring-Boot-3-0-预览\" class=\"headerlink\" title=\"Spring Boot 3.0 预览\"></a>Spring Boot 3.0 预览</h1><p>1 月 20 日, Spring 发布了新的 Spring Boot 3.0 里程碑版本 Spring Boot 3.0.0-M1 , 并预计每两月发布一个新的里程碑版本, 11月下旬发布 GA 版本</p>\n<blockquote>\n<p><a href=\"https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available\">https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</a></p>\n</blockquote>\n<h2 id=\"依赖版本变动\"><a href=\"#依赖版本变动\" class=\"headerlink\" title=\"依赖版本变动\"></a>依赖版本变动</h2><blockquote>\n<p>这听起来虽然有些激进，但请注意，我们讨论的是 2022 年第四季度的发布。到那时，JDK 17 早已取代 JDK 11 成为下一个长期支持版本一年多了，而且它本身也将被 JDK 18 和 JDK  19 所取代，作为特性发布版本，它们已经可用了，而且 JDK 20 也接近其功能冻结期。</p>\n<p>对于 Jakarta EE 9 也是如此。我们预计 Jakarta  EE 10 届时业已发布，并且新一代的 Tomcat、Jetty 和其他的运行时方案将会支持它们。保持上述最低限度的基线，可以在 Spring  Framework 6.x 一代中获得进一步的 Java 进化，而 Java 17 和 Jakarta EE 9 只是一个开始。</p>\n</blockquote>\n<h3 id=\"Java-8-→-Java-17\"><a href=\"#Java-8-→-Java-17\" class=\"headerlink\" title=\"Java 8 → Java 17\"></a>Java 8 → Java 17</h3><p>java 17 是 2021.09.14 推出的新 LTS 版本 (Long Term Support) </p>\n<h3 id=\"Java-EE-→-Jakarta-EE\"><a href=\"#Java-EE-→-Jakarta-EE\" class=\"headerlink\" title=\"Java EE → Jakarta EE\"></a>Java EE → Jakarta EE</h3><p>Java EE 在几年前被 Eclipse 基金会改名为 Jakarta EE , 重命名了很多规范</p>\n<ul>\n<li>需要将命名空间 javax 改为 jakarta</li>\n<li>一些依赖Java EE API的第三方库，目前还没有得到很好的支持，在Spring Boot 3中暂时会先移除<br>( 见 <a href=\"#%E6%9A%82%E6%97%B6%E7%A7%BB%E9%99%A4%E7%9A%84%E4%BE%9D%E8%B5%96\">暂时移除的依赖</a> )</li>\n</ul>\n<h3 id=\"Spring-Framework-5-3-→-6-0\"><a href=\"#Spring-Framework-5-3-→-6-0\" class=\"headerlink\" title=\"Spring Framework 5.3 → 6.0\"></a>Spring Framework 5.3 → 6.0</h3><p>预计于 2022.08 发布第一个 GA 版本</p>\n<h4 id=\"关注点\"><a href=\"#关注点\" class=\"headerlink\" title=\"关注点:\"></a>关注点:</h4><p>排除点和变更点</p>\n<ul>\n<li>可能 XML 配置格式会成为过去式。</li>\n<li>一些 Java EE API（ EJB、JCA、JAX-WS）过期。</li>\n<li>RPC 支持（不知道怎么翻译 HTTP Invoker ）过期</li>\n</ul>\n<p>迁移至Jakarta EE 9+</p>\n<ul>\n<li><code>jakarta.servlet</code>(Tomcat 10、Jetty 11相关)。</li>\n<li><code>jakarta.persistence</code>(Hibernate ORM 6?)。</li>\n</ul>\n<p>云原生</p>\n<p>改进对<strong>GraalVM</strong>和<strong>Project Leyden</strong>(一个Java静态图项目)的支持。</p>\n<h4 id=\"M1-版本特性\"><a href=\"#M1-版本特性\" class=\"headerlink\" title=\"M1 版本特性:\"></a>M1 版本特性:</h4><ul>\n<li><p>关于 Commons FileUpload and Tiles, 和 FreeMarker JSP 的集成将被移除</p>\n</li>\n<li><p>@RequestMapping without @Controller registered as handler</p>\n<blockquote>\n<p><a href=\"https://github.com/spring-projects/spring-framework/issues/22154\">https://github.com/spring-projects/spring-framework/issues/22154</a></p>\n</blockquote>\n</li>\n<li><p>HttpMethod 从枚举升级为一个类</p>\n<blockquote>\n<p><a href=\"https://github.com/spring-projects/spring-framework/issues/27697\">https://github.com/spring-projects/spring-framework/issues/27697</a></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>更多新特性: <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1</a></p>\n</blockquote>\n<h3 id=\"其他依赖版本升级\"><a href=\"#其他依赖版本升级\" class=\"headerlink\" title=\"其他依赖版本升级\"></a>其他依赖版本升级</h3><p>Spring Boot 3.0.0-M1 moves to new versions of several Spring projects:</p>\n<ul>\n<li>Micrometer 2.0.0-M1</li>\n<li>Spring AMQP 3.0.0-M1</li>\n<li>Spring Batch 5.0.0-M1</li>\n<li>Spring Data 2022.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\">Spring Framework 6.0.0-M2</a></li>\n<li>Spring Integration 6.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-hateoas/releases/tag/2.0.0-M1\">Spring HATEOAS 2.0.0-M1</a></li>\n<li>Spring Kafka 3.0.0-M1</li>\n<li><a href=\"https://github.com/spring-projects/spring-ldap/releases/tag/3.0.0-M1\">Spring LDAP 3.0.0-M1</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-restdocs/releases/tag/v3.0.0-M1\">Spring REST Docs 3.0.0-M1</a><ul>\n<li>在 M2 版本中升级为 Spring REST Docs 3.0.0-M2</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/spring-projects/spring-security/releases/tag/6.0.0-M1\">Spring Security 6.0.0-M1</a></li>\n<li>Spring Session 2022.0.0-M1</li>\n<li>Spring Web Services 4.0.0-M1</li>\n</ul>\n<p>Numerous third-party dependencies have also been updated, some of the more noteworthy of which are the following:</p>\n<ul>\n<li>Artemis 2.20.0</li>\n<li>Hazelcast 5.0</li>\n<li>Hibernate Validator 7.0</li>\n<li>Jakarta Activation 2.0</li>\n<li>Jakarta Annotation 2.0</li>\n<li>Jakarta JMS 3.0</li>\n<li>Jakarta JSON 2.0</li>\n<li>Jakarta JSON Bind 3.0</li>\n<li>Jakarta Mail 2.0</li>\n<li>Jakarta Persistence 3.0</li>\n<li>Jakarta Servlet 5.0</li>\n<li>Jakarta Servlet JSP JSTL 2.0</li>\n<li>Jakarta Transaction 2.0</li>\n<li>Jakarta Validation 3.0</li>\n<li>Jakarta WebSocket 2.0</li>\n<li>Jakarta WS RS 3.0</li>\n<li>Jakarta XML Bind 3.0</li>\n<li>Jakarta XML Soap 2.0</li>\n<li>Jetty 11</li>\n<li>jOOQ 3.16</li>\n<li>Tomcat 10</li>\n</ul>\n<h2 id=\"暂时移除的依赖\"><a href=\"#暂时移除的依赖\" class=\"headerlink\" title=\"暂时移除的依赖\"></a>暂时移除的依赖</h2><ul>\n<li>EhCache 3 </li>\n<li>H2’s web console<ul>\n<li>已在 M2 版本中恢复</li>\n</ul>\n</li>\n<li>Hibernate’s metrics</li>\n<li>Infinispan</li>\n<li>Jolokia</li>\n<li>Pooled JMS</li>\n<li>REST Assured<ul>\n<li>已在 M2 版本中恢复: REST Assured 4.5</li>\n</ul>\n</li>\n<li>SMTP appending with Logback</li>\n<li>SMTP appending with Log4j 2</li>\n</ul>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote>\n<ul>\n<li>Spring Boot 3.0.0 M1 Release Notes : <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes\">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M1-Release-Notes</a></li>\n<li>Spring Boot 3.0.0 M2 Release Notes : <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes\">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0.0-M2-Release-Notes</a></li>\n<li>Upgrading to Spring Framework 6.x : <a href=\"https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x\">https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x</a></li>\n<li>Spring Framework v6.0.0-M1 : <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M1</a></li>\n<li>Spring Framework v6.0.0-M2 : <a href=\"https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2\">https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M2</a></li>\n<li>Spring Framework 6 将使用 Java 17 和 Jakarta EE 9 作为基线版本 : <a href=\"https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8\">https://www.infoq.cn/article/4JBuzJI4sbFdoYHfF3h8</a></li>\n<li>Java 近期新闻综述 : <a href=\"https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb\">https://www.infoq.cn/article/1c0wxeozk33n3ki36gzb</a></li>\n</ul>\n</blockquote>\n"},{"title":"修图&嵌字功能笔记","date":"2021-09-03T16:00:00.000Z","_content":"\n## 基础设置\n\n每次PS崩溃后，都要重新检查一遍颜色设置-工作空间-灰色gaama2.2（与windows的默认显示器灰度系数相同的等价灰度）\n\n嵌字段落设置: 行间距自动, 字符比例间距0%, 不要自动加粗, AA方式选择平滑, 对齐中自动行距125(背景字部分135)\n\n复制图层为非背景层方便对比\n\n## 修图\n\n**某个滤镜解决不了的时候 就要去尝试用别的滤镜 不同滤镜各自有各自的特长**\n\n碰到TIFF文件格式就要首先想到索引模式! 遇到索引模式的图应该果断先转灰度模式。然后该干啥干啥。\n\nps在保存jpg格式的图时，当品质小于7时，会执行\"降色采样\"的附加操作，因此不要保存品质低于6的jpg图，一般建议保存为8。\n\nJPEG不适用于所含颜色较少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。\n\n做了切片之后，可以用\"存储为web所用格式\"的方法将这些切片保存为不同的文件。\"另存为\"不可。\n*诶....说起来这个几乎没用到过还*\n\n自动调整曲线（自动颜色校正）：算法-命令\n\n增强单色对比度-自动对比度：统一修剪所有通道。可以使高光显得更亮而阴影显得更暗的同时保留整体色调关系。\n\n增强每通道对比度-自动色调：使每个通道中的色调范围最大化以产生更显著的校正效果。因为各通道是单独调整，所以可能会消除或引入色痕。\n\n查找深色与浅色-自动颜色：查找图像中平均最亮和最暗的像素，并使用它们来使对比度最大化，同时使修剪最小化。\n\n对齐中性中间调-自动颜色：查找图像中平均接近的中性色，然后调整灰度系数（中间调）值使颜色成为中性色。\n\n修图尺寸：1.推荐用原图尺寸修\n\n2.如果原图存在细密网纹，用滤镜除不掉，就缩小图片应该可以解决\n\n3.坚决不建议缩得太小，那样子容错率太低\n\n你的衣服和肤色差距比较大，可以试一下色相饱和度这个图层，尝试下只改某个颜色\n\n肤色的话，大部分时候都是红色，偶尔是黄色。不知道你要改的地方是什么色的话，就直接点一下预设下面的按钮，然后取样，他会自动匹配相应的颜色\n\n### 工具的使用情况\n\n#### 高斯模糊\n\n- 消除细网点: 小心重复过高斯模糊 → Noiseware → td6 → 表面模糊\n- 消除太过锐利的感觉\n- 消除锯齿\n- 消除白噪\n\n## 嵌字\n\n标点符号: 与该行居中对齐, 单独拿出来调整或者改变它的基线偏移\n\n[使用中文标点]{.ul}, 排列格式需要与原图相同\n\n双破折号栅格化补全空白\n\n英文字母：字母较少时标准垂直罗马对齐，较多时普通格式\n\n描边: 先描灰边便于修图, 修好后改回白边\n\n空心字: 白色字黑描边\n\n立体字: 栅格化-自由变换-右键扭曲\n\n自由路径文字: 用标尺拉出原文本底部的最高低点, 以这些点为锚点用钢笔画曲线, 在曲线上用文字工具, 按ESC键隐藏路径\n\n栅格化文字在自由变换会边缘发虚, 需要锐化\n\n网点图的制作: 新建大尺寸灰度图(800\\*800), 填充为灰度127附近的灰色, 图像-模式-位图,\n\n**常用快捷键**\n\nD 背景色设置为黑色, 前景色设置为白色\n\nctrl+M打开曲线的调整窗口\n\nCtrl+1 图片放大到100%\n\nCtrl+0 图片缩放到适合屏幕\n\nSpace+左键拖动放大后的图片\n\nctrl+Y切换RGB/CMYK预览模式（RGB超出CMYK太多要考虑重新调色或丢弃一些太明亮的颜色，或者以CMYK图为背景层，用RGB图覆盖，调整RGB图的透明度）\n\nctrl+alt+N 新建图层\n\nctrl+U 调节色相、饱和度\n\nctrl+R 出现标尺，拉参考线\n\nctrl+K 调节参考线（打开首选项）\n\nctrl+shift+j 文本两端对齐\n\nV 移动工具\n\nctrl+shift+N 新建图层\n\nctrl+alt+I 调整图像大小（分辨率）\n\n![image-20210906171925636](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210906171925636.png)\n\n","source":"_posts/修图&嵌字笔记.md","raw":"---\ntitle: 修图&嵌字功能笔记\ndate: 2021-09-04\ntags: [ps, memo]\n---\n\n## 基础设置\n\n每次PS崩溃后，都要重新检查一遍颜色设置-工作空间-灰色gaama2.2（与windows的默认显示器灰度系数相同的等价灰度）\n\n嵌字段落设置: 行间距自动, 字符比例间距0%, 不要自动加粗, AA方式选择平滑, 对齐中自动行距125(背景字部分135)\n\n复制图层为非背景层方便对比\n\n## 修图\n\n**某个滤镜解决不了的时候 就要去尝试用别的滤镜 不同滤镜各自有各自的特长**\n\n碰到TIFF文件格式就要首先想到索引模式! 遇到索引模式的图应该果断先转灰度模式。然后该干啥干啥。\n\nps在保存jpg格式的图时，当品质小于7时，会执行\"降色采样\"的附加操作，因此不要保存品质低于6的jpg图，一般建议保存为8。\n\nJPEG不适用于所含颜色较少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。\n\n做了切片之后，可以用\"存储为web所用格式\"的方法将这些切片保存为不同的文件。\"另存为\"不可。\n*诶....说起来这个几乎没用到过还*\n\n自动调整曲线（自动颜色校正）：算法-命令\n\n增强单色对比度-自动对比度：统一修剪所有通道。可以使高光显得更亮而阴影显得更暗的同时保留整体色调关系。\n\n增强每通道对比度-自动色调：使每个通道中的色调范围最大化以产生更显著的校正效果。因为各通道是单独调整，所以可能会消除或引入色痕。\n\n查找深色与浅色-自动颜色：查找图像中平均最亮和最暗的像素，并使用它们来使对比度最大化，同时使修剪最小化。\n\n对齐中性中间调-自动颜色：查找图像中平均接近的中性色，然后调整灰度系数（中间调）值使颜色成为中性色。\n\n修图尺寸：1.推荐用原图尺寸修\n\n2.如果原图存在细密网纹，用滤镜除不掉，就缩小图片应该可以解决\n\n3.坚决不建议缩得太小，那样子容错率太低\n\n你的衣服和肤色差距比较大，可以试一下色相饱和度这个图层，尝试下只改某个颜色\n\n肤色的话，大部分时候都是红色，偶尔是黄色。不知道你要改的地方是什么色的话，就直接点一下预设下面的按钮，然后取样，他会自动匹配相应的颜色\n\n### 工具的使用情况\n\n#### 高斯模糊\n\n- 消除细网点: 小心重复过高斯模糊 → Noiseware → td6 → 表面模糊\n- 消除太过锐利的感觉\n- 消除锯齿\n- 消除白噪\n\n## 嵌字\n\n标点符号: 与该行居中对齐, 单独拿出来调整或者改变它的基线偏移\n\n[使用中文标点]{.ul}, 排列格式需要与原图相同\n\n双破折号栅格化补全空白\n\n英文字母：字母较少时标准垂直罗马对齐，较多时普通格式\n\n描边: 先描灰边便于修图, 修好后改回白边\n\n空心字: 白色字黑描边\n\n立体字: 栅格化-自由变换-右键扭曲\n\n自由路径文字: 用标尺拉出原文本底部的最高低点, 以这些点为锚点用钢笔画曲线, 在曲线上用文字工具, 按ESC键隐藏路径\n\n栅格化文字在自由变换会边缘发虚, 需要锐化\n\n网点图的制作: 新建大尺寸灰度图(800\\*800), 填充为灰度127附近的灰色, 图像-模式-位图,\n\n**常用快捷键**\n\nD 背景色设置为黑色, 前景色设置为白色\n\nctrl+M打开曲线的调整窗口\n\nCtrl+1 图片放大到100%\n\nCtrl+0 图片缩放到适合屏幕\n\nSpace+左键拖动放大后的图片\n\nctrl+Y切换RGB/CMYK预览模式（RGB超出CMYK太多要考虑重新调色或丢弃一些太明亮的颜色，或者以CMYK图为背景层，用RGB图覆盖，调整RGB图的透明度）\n\nctrl+alt+N 新建图层\n\nctrl+U 调节色相、饱和度\n\nctrl+R 出现标尺，拉参考线\n\nctrl+K 调节参考线（打开首选项）\n\nctrl+shift+j 文本两端对齐\n\nV 移动工具\n\nctrl+shift+N 新建图层\n\nctrl+alt+I 调整图像大小（分辨率）\n\n![image-20210906171925636](https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210906171925636.png)\n\n","slug":"修图&嵌字笔记","published":1,"updated":"2022-06-16T13:16:49.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txow000gosu7fp8ra65e","content":"<h2 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h2><p>每次PS崩溃后，都要重新检查一遍颜色设置-工作空间-灰色gaama2.2（与windows的默认显示器灰度系数相同的等价灰度）</p>\n<p>嵌字段落设置: 行间距自动, 字符比例间距0%, 不要自动加粗, AA方式选择平滑, 对齐中自动行距125(背景字部分135)</p>\n<p>复制图层为非背景层方便对比</p>\n<h2 id=\"修图\"><a href=\"#修图\" class=\"headerlink\" title=\"修图\"></a>修图</h2><p><strong>某个滤镜解决不了的时候 就要去尝试用别的滤镜 不同滤镜各自有各自的特长</strong></p>\n<p>碰到TIFF文件格式就要首先想到索引模式! 遇到索引模式的图应该果断先转灰度模式。然后该干啥干啥。</p>\n<p>ps在保存jpg格式的图时，当品质小于7时，会执行”降色采样”的附加操作，因此不要保存品质低于6的jpg图，一般建议保存为8。</p>\n<p>JPEG不适用于所含颜色较少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。</p>\n<p>做了切片之后，可以用”存储为web所用格式”的方法将这些切片保存为不同的文件。”另存为”不可。<br><em>诶….说起来这个几乎没用到过还</em></p>\n<p>自动调整曲线（自动颜色校正）：算法-命令</p>\n<p>增强单色对比度-自动对比度：统一修剪所有通道。可以使高光显得更亮而阴影显得更暗的同时保留整体色调关系。</p>\n<p>增强每通道对比度-自动色调：使每个通道中的色调范围最大化以产生更显著的校正效果。因为各通道是单独调整，所以可能会消除或引入色痕。</p>\n<p>查找深色与浅色-自动颜色：查找图像中平均最亮和最暗的像素，并使用它们来使对比度最大化，同时使修剪最小化。</p>\n<p>对齐中性中间调-自动颜色：查找图像中平均接近的中性色，然后调整灰度系数（中间调）值使颜色成为中性色。</p>\n<p>修图尺寸：1.推荐用原图尺寸修</p>\n<p>2.如果原图存在细密网纹，用滤镜除不掉，就缩小图片应该可以解决</p>\n<p>3.坚决不建议缩得太小，那样子容错率太低</p>\n<p>你的衣服和肤色差距比较大，可以试一下色相饱和度这个图层，尝试下只改某个颜色</p>\n<p>肤色的话，大部分时候都是红色，偶尔是黄色。不知道你要改的地方是什么色的话，就直接点一下预设下面的按钮，然后取样，他会自动匹配相应的颜色</p>\n<h3 id=\"工具的使用情况\"><a href=\"#工具的使用情况\" class=\"headerlink\" title=\"工具的使用情况\"></a>工具的使用情况</h3><h4 id=\"高斯模糊\"><a href=\"#高斯模糊\" class=\"headerlink\" title=\"高斯模糊\"></a>高斯模糊</h4><ul>\n<li>消除细网点: 小心重复过高斯模糊 → Noiseware → td6 → 表面模糊</li>\n<li>消除太过锐利的感觉</li>\n<li>消除锯齿</li>\n<li>消除白噪</li>\n</ul>\n<h2 id=\"嵌字\"><a href=\"#嵌字\" class=\"headerlink\" title=\"嵌字\"></a>嵌字</h2><p>标点符号: 与该行居中对齐, 单独拿出来调整或者改变它的基线偏移</p>\n<p>[使用中文标点]{.ul}, 排列格式需要与原图相同</p>\n<p>双破折号栅格化补全空白</p>\n<p>英文字母：字母较少时标准垂直罗马对齐，较多时普通格式</p>\n<p>描边: 先描灰边便于修图, 修好后改回白边</p>\n<p>空心字: 白色字黑描边</p>\n<p>立体字: 栅格化-自由变换-右键扭曲</p>\n<p>自由路径文字: 用标尺拉出原文本底部的最高低点, 以这些点为锚点用钢笔画曲线, 在曲线上用文字工具, 按ESC键隐藏路径</p>\n<p>栅格化文字在自由变换会边缘发虚, 需要锐化</p>\n<p>网点图的制作: 新建大尺寸灰度图(800*800), 填充为灰度127附近的灰色, 图像-模式-位图,</p>\n<p><strong>常用快捷键</strong></p>\n<p>D 背景色设置为黑色, 前景色设置为白色</p>\n<p>ctrl+M打开曲线的调整窗口</p>\n<p>Ctrl+1 图片放大到100%</p>\n<p>Ctrl+0 图片缩放到适合屏幕</p>\n<p>Space+左键拖动放大后的图片</p>\n<p>ctrl+Y切换RGB/CMYK预览模式（RGB超出CMYK太多要考虑重新调色或丢弃一些太明亮的颜色，或者以CMYK图为背景层，用RGB图覆盖，调整RGB图的透明度）</p>\n<p>ctrl+alt+N 新建图层</p>\n<p>ctrl+U 调节色相、饱和度</p>\n<p>ctrl+R 出现标尺，拉参考线</p>\n<p>ctrl+K 调节参考线（打开首选项）</p>\n<p>ctrl+shift+j 文本两端对齐</p>\n<p>V 移动工具</p>\n<p>ctrl+shift+N 新建图层</p>\n<p>ctrl+alt+I 调整图像大小（分辨率）</p>\n<p><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210906171925636.png\" alt=\"image-20210906171925636\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基础设置\"><a href=\"#基础设置\" class=\"headerlink\" title=\"基础设置\"></a>基础设置</h2><p>每次PS崩溃后，都要重新检查一遍颜色设置-工作空间-灰色gaama2.2（与windows的默认显示器灰度系数相同的等价灰度）</p>\n<p>嵌字段落设置: 行间距自动, 字符比例间距0%, 不要自动加粗, AA方式选择平滑, 对齐中自动行距125(背景字部分135)</p>\n<p>复制图层为非背景层方便对比</p>\n<h2 id=\"修图\"><a href=\"#修图\" class=\"headerlink\" title=\"修图\"></a>修图</h2><p><strong>某个滤镜解决不了的时候 就要去尝试用别的滤镜 不同滤镜各自有各自的特长</strong></p>\n<p>碰到TIFF文件格式就要首先想到索引模式! 遇到索引模式的图应该果断先转灰度模式。然后该干啥干啥。</p>\n<p>ps在保存jpg格式的图时，当品质小于7时，会执行”降色采样”的附加操作，因此不要保存品质低于6的jpg图，一般建议保存为8。</p>\n<p>JPEG不适用于所含颜色较少、具有大块颜色相近的区域或亮度差异十分明显的较简单的图片。</p>\n<p>做了切片之后，可以用”存储为web所用格式”的方法将这些切片保存为不同的文件。”另存为”不可。<br><em>诶….说起来这个几乎没用到过还</em></p>\n<p>自动调整曲线（自动颜色校正）：算法-命令</p>\n<p>增强单色对比度-自动对比度：统一修剪所有通道。可以使高光显得更亮而阴影显得更暗的同时保留整体色调关系。</p>\n<p>增强每通道对比度-自动色调：使每个通道中的色调范围最大化以产生更显著的校正效果。因为各通道是单独调整，所以可能会消除或引入色痕。</p>\n<p>查找深色与浅色-自动颜色：查找图像中平均最亮和最暗的像素，并使用它们来使对比度最大化，同时使修剪最小化。</p>\n<p>对齐中性中间调-自动颜色：查找图像中平均接近的中性色，然后调整灰度系数（中间调）值使颜色成为中性色。</p>\n<p>修图尺寸：1.推荐用原图尺寸修</p>\n<p>2.如果原图存在细密网纹，用滤镜除不掉，就缩小图片应该可以解决</p>\n<p>3.坚决不建议缩得太小，那样子容错率太低</p>\n<p>你的衣服和肤色差距比较大，可以试一下色相饱和度这个图层，尝试下只改某个颜色</p>\n<p>肤色的话，大部分时候都是红色，偶尔是黄色。不知道你要改的地方是什么色的话，就直接点一下预设下面的按钮，然后取样，他会自动匹配相应的颜色</p>\n<h3 id=\"工具的使用情况\"><a href=\"#工具的使用情况\" class=\"headerlink\" title=\"工具的使用情况\"></a>工具的使用情况</h3><h4 id=\"高斯模糊\"><a href=\"#高斯模糊\" class=\"headerlink\" title=\"高斯模糊\"></a>高斯模糊</h4><ul>\n<li>消除细网点: 小心重复过高斯模糊 → Noiseware → td6 → 表面模糊</li>\n<li>消除太过锐利的感觉</li>\n<li>消除锯齿</li>\n<li>消除白噪</li>\n</ul>\n<h2 id=\"嵌字\"><a href=\"#嵌字\" class=\"headerlink\" title=\"嵌字\"></a>嵌字</h2><p>标点符号: 与该行居中对齐, 单独拿出来调整或者改变它的基线偏移</p>\n<p>[使用中文标点]{.ul}, 排列格式需要与原图相同</p>\n<p>双破折号栅格化补全空白</p>\n<p>英文字母：字母较少时标准垂直罗马对齐，较多时普通格式</p>\n<p>描边: 先描灰边便于修图, 修好后改回白边</p>\n<p>空心字: 白色字黑描边</p>\n<p>立体字: 栅格化-自由变换-右键扭曲</p>\n<p>自由路径文字: 用标尺拉出原文本底部的最高低点, 以这些点为锚点用钢笔画曲线, 在曲线上用文字工具, 按ESC键隐藏路径</p>\n<p>栅格化文字在自由变换会边缘发虚, 需要锐化</p>\n<p>网点图的制作: 新建大尺寸灰度图(800*800), 填充为灰度127附近的灰色, 图像-模式-位图,</p>\n<p><strong>常用快捷键</strong></p>\n<p>D 背景色设置为黑色, 前景色设置为白色</p>\n<p>ctrl+M打开曲线的调整窗口</p>\n<p>Ctrl+1 图片放大到100%</p>\n<p>Ctrl+0 图片缩放到适合屏幕</p>\n<p>Space+左键拖动放大后的图片</p>\n<p>ctrl+Y切换RGB/CMYK预览模式（RGB超出CMYK太多要考虑重新调色或丢弃一些太明亮的颜色，或者以CMYK图为背景层，用RGB图覆盖，调整RGB图的透明度）</p>\n<p>ctrl+alt+N 新建图层</p>\n<p>ctrl+U 调节色相、饱和度</p>\n<p>ctrl+R 出现标尺，拉参考线</p>\n<p>ctrl+K 调节参考线（打开首选项）</p>\n<p>ctrl+shift+j 文本两端对齐</p>\n<p>V 移动工具</p>\n<p>ctrl+shift+N 新建图层</p>\n<p>ctrl+alt+I 调整图像大小（分辨率）</p>\n<p><img src=\"https://raw.githubusercontent.com/luoshieryi/images/main/markdown/image-20210906171925636.png\" alt=\"image-20210906171925636\"></p>\n"},{"title":"flask 跨域资源共享","date":"2022-04-19T16:00:00.000Z","_content":"\n# flask 跨域资源共享\n\n最近完成 python 实验尝试使用了 flask 作为后端框架, 第一次用这么轻的框架从零开始搭建项目, 遇到了一点跨域上的小问题\n\n## Flask\n\n> Flask is a lightweight [WSGI](https://wsgi.readthedocs.io/) web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around [Werkzeug](https://werkzeug.palletsprojects.com/) and [Jinja](https://jinja.palletsprojects.com/) and has become one of the most popular Python web application frameworks.\n\nflask 是在 github 上有 58k star (2022.04.20) 的开源 python 后端框架, 以超轻量级而出名, 一个用 flask 写的 hello world 甚至只需要五行代码: \n\n```python\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n使用这样的 \"微框架\" 可以更好地了解一些底层原理, 这里记录一次跨域资源请求问题的解决\n\n## CORS: 跨源资源共享\n\n### 涉及跨域资源请求的情景: \n\n- 由 [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或 [Fetch APIs](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过 `@font-face` 使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 [`drawImage`](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage) 将 Images/video 画面绘制到 canvas。\n- [来自图像的 CSS 图形](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images)\n\n### 三种跨域请求:\n\n#### [简单请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#简单请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n使用 GET/POST 方法, 手动设置的 header 字段只有以下四种, 且 [`Content-Type`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) 的值有额外要求: \n\n- [`Accept`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept)\n- [`Accept-Language`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language)\n- [`Content-Language`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language)\n- [`Content-Type`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) :\n  - `text/plain`\n  - `multipart/form-data`\n  - `application/x-www-form-urlencoded`\n\n此时服务端需要设置 header : [`Access-Control-Allow-Origin`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) , 为 * 表示允许任意外域访问该资源\n\n#### [预检请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#预检请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n非简单请求需要预检, 要求必须首先使用 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS) 方法发起一个预检请求到服务器, 依据服务器是否允许访问该资源决定是否发送实际请求 (通常由浏览器自动发送预检请求)\n\n预检过程中,  预检请求中会携带了下面两个header : \n\n```\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n```\n\n分别为 实际请求的Method, 实际请求携带的自定义header字段\n\n服务器对预检请求做出响应, 在response中需要携带以下header : \n\n```\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\n```\n\n分别为 限制请求的源域, 允许请求的Method, 允许携带的自定义 header\n\n还可以设置header字段 `Access-Control-Max-Age` , 表明该预检请求的有效时间, 该时间范围内浏览器不会为同一请求发起预检请求\n\n预检通过会浏览器才会发送真实请求\n\n#### [附带身份凭证的请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#附带身份凭证的请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n在需要 基于 [HTTP cookies](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies) 和 HTTP 认证信息发送身份凭证 时, 需要将 request 的 `withCredentials` 标志设为 `true` , 同时在服务端的 response 中也需要添加header:  [`Access-Control-Allow-Credentials: true`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) \n\n##### ! 注意项 ! : \n\n> - 服务器不能将 `Access-Control-Allow-Origin` 的值设为通配符“`*`”，而应将其设置为特定的域，如：`Access-Control-Allow-Origin: https://example.com`。\n> - 服务器不能将 `Access-Control-Allow-Headers` 的值设为通配符“`*`”，而应将其设置为首部名称的列表，如：`Access-Control-Allow-Headers: X-PINGOTHER, Content-Type`\n> - 服务器不能将 `Access-Control-Allow-Methods` 的值设为通配符“`*`”，而应将其设置为特定请求方法名称的列表，如：`Access-Control-Allow-Methods: POST, GET`\n\n## 解决方案\n\n### 1. 使用flask-CORS\n\n```python\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\nCORS(app, supports_credentials=True)\n```\n\n### 2. 手写 flask 的 response 拦截器\n\n下边是一个简单的拦截器, 可以接受使用json传输数据的http跨域请求, 具体设置为: \n\n- 接受来自任何域的请求\n- 允许附带身份凭证\n- 允许的请求方式有: GET, POST, PUT, DELETE\n- 允许的自定义 header 有: content-type\n- 允许的 content-type 的值有: application/json\n\n```python\ndef after_req(resp):\n    resp.headers[\"Access-Control-Allow-Origin\"] = request.origin\n    resp.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    resp.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE\"\n    resp.headers[\"Access-Control-Allow-Headers\"] = \"content-type\"\n    resp.headers[\"content-type\"] = \"application/json\"\n    return resp\n    \napp.after_request(after_req)\n```\n\n## Reference\n\n> - flask-github : https://github.com/pallets/flask\n> - flask-document : https://flask.palletsprojects.com/en/2.1.x/\n> - mdn-CORS : https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\n\n","source":"_posts/flask 跨域资源允许.md","raw":"---\ntitle: flask 跨域资源共享\ndate: 2022-04-20\ntags: [python, flask, http, cors]\n---\n\n# flask 跨域资源共享\n\n最近完成 python 实验尝试使用了 flask 作为后端框架, 第一次用这么轻的框架从零开始搭建项目, 遇到了一点跨域上的小问题\n\n## Flask\n\n> Flask is a lightweight [WSGI](https://wsgi.readthedocs.io/) web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around [Werkzeug](https://werkzeug.palletsprojects.com/) and [Jinja](https://jinja.palletsprojects.com/) and has become one of the most popular Python web application frameworks.\n\nflask 是在 github 上有 58k star (2022.04.20) 的开源 python 后端框架, 以超轻量级而出名, 一个用 flask 写的 hello world 甚至只需要五行代码: \n\n```python\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\"\n```\n\n使用这样的 \"微框架\" 可以更好地了解一些底层原理, 这里记录一次跨域资源请求问题的解决\n\n## CORS: 跨源资源共享\n\n### 涉及跨域资源请求的情景: \n\n- 由 [`XMLHttpRequest`](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或 [Fetch APIs](https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过 `@font-face` 使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 [`drawImage`](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage) 将 Images/video 画面绘制到 canvas。\n- [来自图像的 CSS 图形](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images)\n\n### 三种跨域请求:\n\n#### [简单请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#简单请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n使用 GET/POST 方法, 手动设置的 header 字段只有以下四种, 且 [`Content-Type`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) 的值有额外要求: \n\n- [`Accept`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept)\n- [`Accept-Language`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language)\n- [`Content-Language`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language)\n- [`Content-Type`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) :\n  - `text/plain`\n  - `multipart/form-data`\n  - `application/x-www-form-urlencoded`\n\n此时服务端需要设置 header : [`Access-Control-Allow-Origin`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) , 为 * 表示允许任意外域访问该资源\n\n#### [预检请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#预检请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n非简单请求需要预检, 要求必须首先使用 [`OPTIONS`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS) 方法发起一个预检请求到服务器, 依据服务器是否允许访问该资源决定是否发送实际请求 (通常由浏览器自动发送预检请求)\n\n预检过程中,  预检请求中会携带了下面两个header : \n\n```\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n```\n\n分别为 实际请求的Method, 实际请求携带的自定义header字段\n\n服务器对预检请求做出响应, 在response中需要携带以下header : \n\n```\nAccess-Control-Allow-Origin: https://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\n```\n\n分别为 限制请求的源域, 允许请求的Method, 允许携带的自定义 header\n\n还可以设置header字段 `Access-Control-Max-Age` , 表明该预检请求的有效时间, 该时间范围内浏览器不会为同一请求发起预检请求\n\n预检通过会浏览器才会发送真实请求\n\n#### [附带身份凭证的请求](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#附带身份凭证的请求)\n\n( 点击标题查看MDN文档 ↑↑↑ )\n\n在需要 基于 [HTTP cookies](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies) 和 HTTP 认证信息发送身份凭证 时, 需要将 request 的 `withCredentials` 标志设为 `true` , 同时在服务端的 response 中也需要添加header:  [`Access-Control-Allow-Credentials: true`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) \n\n##### ! 注意项 ! : \n\n> - 服务器不能将 `Access-Control-Allow-Origin` 的值设为通配符“`*`”，而应将其设置为特定的域，如：`Access-Control-Allow-Origin: https://example.com`。\n> - 服务器不能将 `Access-Control-Allow-Headers` 的值设为通配符“`*`”，而应将其设置为首部名称的列表，如：`Access-Control-Allow-Headers: X-PINGOTHER, Content-Type`\n> - 服务器不能将 `Access-Control-Allow-Methods` 的值设为通配符“`*`”，而应将其设置为特定请求方法名称的列表，如：`Access-Control-Allow-Methods: POST, GET`\n\n## 解决方案\n\n### 1. 使用flask-CORS\n\n```python\nfrom flask_cors import CORS\n\napp = Flask(__name__)\n\nCORS(app, supports_credentials=True)\n```\n\n### 2. 手写 flask 的 response 拦截器\n\n下边是一个简单的拦截器, 可以接受使用json传输数据的http跨域请求, 具体设置为: \n\n- 接受来自任何域的请求\n- 允许附带身份凭证\n- 允许的请求方式有: GET, POST, PUT, DELETE\n- 允许的自定义 header 有: content-type\n- 允许的 content-type 的值有: application/json\n\n```python\ndef after_req(resp):\n    resp.headers[\"Access-Control-Allow-Origin\"] = request.origin\n    resp.headers[\"Access-Control-Allow-Credentials\"] = \"true\"\n    resp.headers[\"Access-Control-Allow-Methods\"] = \"GET, POST, PUT, DELETE\"\n    resp.headers[\"Access-Control-Allow-Headers\"] = \"content-type\"\n    resp.headers[\"content-type\"] = \"application/json\"\n    return resp\n    \napp.after_request(after_req)\n```\n\n## Reference\n\n> - flask-github : https://github.com/pallets/flask\n> - flask-document : https://flask.palletsprojects.com/en/2.1.x/\n> - mdn-CORS : https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\n\n","slug":"flask 跨域资源允许","published":1,"updated":"2022-06-16T13:16:49.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txow000hosu748zxeja6","content":"<h1 id=\"flask-跨域资源共享\"><a href=\"#flask-跨域资源共享\" class=\"headerlink\" title=\"flask 跨域资源共享\"></a>flask 跨域资源共享</h1><p>最近完成 python 实验尝试使用了 flask 作为后端框架, 第一次用这么轻的框架从零开始搭建项目, 遇到了一点跨域上的小问题</p>\n<h2 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><blockquote>\n<p>Flask is a lightweight <a href=\"https://wsgi.readthedocs.io/\">WSGI</a> web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around <a href=\"https://werkzeug.palletsprojects.com/\">Werkzeug</a> and <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> and has become one of the most popular Python web application frameworks.</p>\n</blockquote>\n<p>flask 是在 github 上有 58k star (2022.04.20) 的开源 python 后端框架, 以超轻量级而出名, 一个用 flask 写的 hello world 甚至只需要五行代码: </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># save this as app.py</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用这样的 “微框架” 可以更好地了解一些底层原理, 这里记录一次跨域资源请求问题的解决</p>\n<h2 id=\"CORS-跨源资源共享\"><a href=\"#CORS-跨源资源共享\" class=\"headerlink\" title=\"CORS: 跨源资源共享\"></a>CORS: 跨源资源共享</h2><h3 id=\"涉及跨域资源请求的情景\"><a href=\"#涉及跨域资源请求的情景\" class=\"headerlink\" title=\"涉及跨域资源请求的情景:\"></a>涉及跨域资源请求的情景:</h3><ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch APIs</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过 <code>@font-face</code> 使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>drawImage</code></a> 将 Images/video 画面绘制到 canvas。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images\">来自图像的 CSS 图形</a></li>\n</ul>\n<h3 id=\"三种跨域请求\"><a href=\"#三种跨域请求\" class=\"headerlink\" title=\"三种跨域请求:\"></a>三种跨域请求:</h3><h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\">简单请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>使用 GET/POST 方法, 手动设置的 header 字段只有以下四种, 且 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> 的值有额外要求: </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept\"><code>Accept</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language\"><code>Accept-Language</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language\"><code>Content-Language</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> :<ul>\n<li><code>text/plain</code></li>\n<li><code>multipart/form-data</code></li>\n<li><code>application/x-www-form-urlencoded</code></li>\n</ul>\n</li>\n</ul>\n<p>此时服务端需要设置 header : <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code></a> , 为 * 表示允许任意外域访问该资源</p>\n<h4 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82\">预检请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>非简单请求需要预检, 要求必须首先使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a> 方法发起一个预检请求到服务器, 依据服务器是否允许访问该资源决定是否发送实际请求 (通常由浏览器自动发送预检请求)</p>\n<p>预检过程中,  预检请求中会携带了下面两个header : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>分别为 实际请求的Method, 实际请求携带的自定义header字段</p>\n<p>服务器对预检请求做出响应, 在response中需要携带以下header : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access-Control-Allow-Origin: https:&#x2F;&#x2F;foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>分别为 限制请求的源域, 允许请求的Method, 允许携带的自定义 header</p>\n<p>还可以设置header字段 <code>Access-Control-Max-Age</code> , 表明该预检请求的有效时间, 该时间范围内浏览器不会为同一请求发起预检请求</p>\n<p>预检通过会浏览器才会发送真实请求</p>\n<h4 id=\"附带身份凭证的请求\"><a href=\"#附带身份凭证的请求\" class=\"headerlink\" title=\"附带身份凭证的请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%99%84%E5%B8%A6%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81%E7%9A%84%E8%AF%B7%E6%B1%82\">附带身份凭证的请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>在需要 基于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\">HTTP cookies</a> 和 HTTP 认证信息发送身份凭证 时, 需要将 request 的 <code>withCredentials</code> 标志设为 <code>true</code> , 同时在服务端的 response 中也需要添加header:  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\"><code>Access-Control-Allow-Credentials: true</code></a> </p>\n<h5 id=\"注意项\"><a href=\"#注意项\" class=\"headerlink\" title=\"! 注意项 ! :\"></a>! 注意项 ! :</h5><blockquote>\n<ul>\n<li>服务器不能将 <code>Access-Control-Allow-Origin</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定的域，如：<code>Access-Control-Allow-Origin: https://example.com</code>。</li>\n<li>服务器不能将 <code>Access-Control-Allow-Headers</code> 的值设为通配符“<code>*</code>”，而应将其设置为首部名称的列表，如：<code>Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</code></li>\n<li>服务器不能将 <code>Access-Control-Allow-Methods</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定请求方法名称的列表，如：<code>Access-Control-Allow-Methods: POST, GET</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"1-使用flask-CORS\"><a href=\"#1-使用flask-CORS\" class=\"headerlink\" title=\"1. 使用flask-CORS\"></a>1. 使用flask-CORS</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask_cors <span class=\"token keyword\">import</span> CORS\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\nCORS<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> supports_credentials<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-手写-flask-的-response-拦截器\"><a href=\"#2-手写-flask-的-response-拦截器\" class=\"headerlink\" title=\"2. 手写 flask 的 response 拦截器\"></a>2. 手写 flask 的 response 拦截器</h3><p>下边是一个简单的拦截器, 可以接受使用json传输数据的http跨域请求, 具体设置为: </p>\n<ul>\n<li>接受来自任何域的请求</li>\n<li>允许附带身份凭证</li>\n<li>允许的请求方式有: GET, POST, PUT, DELETE</li>\n<li>允许的自定义 header 有: content-type</li>\n<li>允许的 content-type 的值有: application/json</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">after_req</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>origin\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Credentials\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"GET, POST, PUT, DELETE\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"content-type\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span>\n    <span class=\"token keyword\">return</span> resp\n    \napp<span class=\"token punctuation\">.</span>after_request<span class=\"token punctuation\">(</span>after_req<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote>\n<ul>\n<li>flask-github : <a href=\"https://github.com/pallets/flask\">https://github.com/pallets/flask</a></li>\n<li>flask-document : <a href=\"https://flask.palletsprojects.com/en/2.1.x/\">https://flask.palletsprojects.com/en/2.1.x/</a></li>\n<li>mdn-CORS : <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"flask-跨域资源共享\"><a href=\"#flask-跨域资源共享\" class=\"headerlink\" title=\"flask 跨域资源共享\"></a>flask 跨域资源共享</h1><p>最近完成 python 实验尝试使用了 flask 作为后端框架, 第一次用这么轻的框架从零开始搭建项目, 遇到了一点跨域上的小问题</p>\n<h2 id=\"Flask\"><a href=\"#Flask\" class=\"headerlink\" title=\"Flask\"></a>Flask</h2><blockquote>\n<p>Flask is a lightweight <a href=\"https://wsgi.readthedocs.io/\">WSGI</a> web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It began as a simple wrapper around <a href=\"https://werkzeug.palletsprojects.com/\">Werkzeug</a> and <a href=\"https://jinja.palletsprojects.com/\">Jinja</a> and has become one of the most popular Python web application frameworks.</p>\n</blockquote>\n<p>flask 是在 github 上有 58k star (2022.04.20) 的开源 python 后端框架, 以超轻量级而出名, 一个用 flask 写的 hello world 甚至只需要五行代码: </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># save this as app.py</span>\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello, World!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>使用这样的 “微框架” 可以更好地了解一些底层原理, 这里记录一次跨域资源请求问题的解决</p>\n<h2 id=\"CORS-跨源资源共享\"><a href=\"#CORS-跨源资源共享\" class=\"headerlink\" title=\"CORS: 跨源资源共享\"></a>CORS: 跨源资源共享</h2><h3 id=\"涉及跨域资源请求的情景\"><a href=\"#涉及跨域资源请求的情景\" class=\"headerlink\" title=\"涉及跨域资源请求的情景:\"></a>涉及跨域资源请求的情景:</h3><ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\"><code>XMLHttpRequest</code></a> 或 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch APIs</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过 <code>@font-face</code> 使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage\"><code>drawImage</code></a> 将 Images/video 画面绘制到 canvas。</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Shapes/Shapes_From_Images\">来自图像的 CSS 图形</a></li>\n</ul>\n<h3 id=\"三种跨域请求\"><a href=\"#三种跨域请求\" class=\"headerlink\" title=\"三种跨域请求:\"></a>三种跨域请求:</h3><h4 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E7%AE%80%E5%8D%95%E8%AF%B7%E6%B1%82\">简单请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>使用 GET/POST 方法, 手动设置的 header 字段只有以下四种, 且 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> 的值有额外要求: </p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept\"><code>Accept</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language\"><code>Accept-Language</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language\"><code>Content-Language</code></a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\"><code>Content-Type</code></a> :<ul>\n<li><code>text/plain</code></li>\n<li><code>multipart/form-data</code></li>\n<li><code>application/x-www-form-urlencoded</code></li>\n</ul>\n</li>\n</ul>\n<p>此时服务端需要设置 header : <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code></a> , 为 * 表示允许任意外域访问该资源</p>\n<h4 id=\"预检请求\"><a href=\"#预检请求\" class=\"headerlink\" title=\"预检请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82\">预检请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>非简单请求需要预检, 要求必须首先使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS\"><code>OPTIONS</code></a> 方法发起一个预检请求到服务器, 依据服务器是否允许访问该资源决定是否发送实际请求 (通常由浏览器自动发送预检请求)</p>\n<p>预检过程中,  预检请求中会携带了下面两个header : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>分别为 实际请求的Method, 实际请求携带的自定义header字段</p>\n<p>服务器对预检请求做出响应, 在response中需要携带以下header : </p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Access-Control-Allow-Origin: https:&#x2F;&#x2F;foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>分别为 限制请求的源域, 允许请求的Method, 允许携带的自定义 header</p>\n<p>还可以设置header字段 <code>Access-Control-Max-Age</code> , 表明该预检请求的有效时间, 该时间范围内浏览器不会为同一请求发起预检请求</p>\n<p>预检通过会浏览器才会发送真实请求</p>\n<h4 id=\"附带身份凭证的请求\"><a href=\"#附带身份凭证的请求\" class=\"headerlink\" title=\"附带身份凭证的请求\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS#%E9%99%84%E5%B8%A6%E8%BA%AB%E4%BB%BD%E5%87%AD%E8%AF%81%E7%9A%84%E8%AF%B7%E6%B1%82\">附带身份凭证的请求</a></h4><p>( 点击标题查看MDN文档 ↑↑↑ )</p>\n<p>在需要 基于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies\">HTTP cookies</a> 和 HTTP 认证信息发送身份凭证 时, 需要将 request 的 <code>withCredentials</code> 标志设为 <code>true</code> , 同时在服务端的 response 中也需要添加header:  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials\"><code>Access-Control-Allow-Credentials: true</code></a> </p>\n<h5 id=\"注意项\"><a href=\"#注意项\" class=\"headerlink\" title=\"! 注意项 ! :\"></a>! 注意项 ! :</h5><blockquote>\n<ul>\n<li>服务器不能将 <code>Access-Control-Allow-Origin</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定的域，如：<code>Access-Control-Allow-Origin: https://example.com</code>。</li>\n<li>服务器不能将 <code>Access-Control-Allow-Headers</code> 的值设为通配符“<code>*</code>”，而应将其设置为首部名称的列表，如：<code>Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</code></li>\n<li>服务器不能将 <code>Access-Control-Allow-Methods</code> 的值设为通配符“<code>*</code>”，而应将其设置为特定请求方法名称的列表，如：<code>Access-Control-Allow-Methods: POST, GET</code></li>\n</ul>\n</blockquote>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"1-使用flask-CORS\"><a href=\"#1-使用flask-CORS\" class=\"headerlink\" title=\"1. 使用flask-CORS\"></a>1. 使用flask-CORS</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask_cors <span class=\"token keyword\">import</span> CORS\n\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\nCORS<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> supports_credentials<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-手写-flask-的-response-拦截器\"><a href=\"#2-手写-flask-的-response-拦截器\" class=\"headerlink\" title=\"2. 手写 flask 的 response 拦截器\"></a>2. 手写 flask 的 response 拦截器</h3><p>下边是一个简单的拦截器, 可以接受使用json传输数据的http跨域请求, 具体设置为: </p>\n<ul>\n<li>接受来自任何域的请求</li>\n<li>允许附带身份凭证</li>\n<li>允许的请求方式有: GET, POST, PUT, DELETE</li>\n<li>允许的自定义 header 有: content-type</li>\n<li>允许的 content-type 的值有: application/json</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">after_req</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>origin\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Credentials\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Methods\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"GET, POST, PUT, DELETE\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Access-Control-Allow-Headers\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"content-type\"</span>\n    resp<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"application/json\"</span>\n    <span class=\"token keyword\">return</span> resp\n    \napp<span class=\"token punctuation\">.</span>after_request<span class=\"token punctuation\">(</span>after_req<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote>\n<ul>\n<li>flask-github : <a href=\"https://github.com/pallets/flask\">https://github.com/pallets/flask</a></li>\n<li>flask-document : <a href=\"https://flask.palletsprojects.com/en/2.1.x/\">https://flask.palletsprojects.com/en/2.1.x/</a></li>\n<li>mdn-CORS : <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a></li>\n</ul>\n</blockquote>\n"},{"title":"写一个Java注解与 AOP","date":"2021-10-30T16:00:00.000Z","_content":"\n# 写一个 Java 注解与 AOP\n\n## 元注解\n\n元注解: 用在其他注解上的注解\n\n四种元注解: \n\n- @Target : 描述注解的使用范围\n- @Retention : 描述注解的生命周期\n- @Documented : 将此注解包含在Javadoc中\n- @Inherited : 使被它修饰的注解具有继承性\n\n### @Target\n\n描述注解的可使用范围 (取值范围在 java.lang.annotation.ElementType.java 中)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    /**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to\n     */\n    ElementType[] value();\n}\n```\n\nElementType :\n\n```java\npublic enum ElementType {\n    /** Class, interface (including annotation type), or enum declaration */\n    TYPE,\t\t//类，接口（包括注解类型）或枚举的声明\n\n    /** Field declaration (includes enum constants) */\n    FIELD,\t\t//属性的声明\n\n    /** Method declaration */\n    METHOD,\t\t//方法的声明\n\n    /** Formal parameter declaration */\n    PARAMETER,\t\t//方法形式参数声明\n\n    /** Constructor declaration */\n    CONSTRUCTOR,\t\t//构造方法的声明\n\n    /** Local variable declaration */\n    LOCAL_VARIABLE,\t\t//局部变量声明\n\n    /** Annotation type declaration */\n    ANNOTATION_TYPE,\t\t//注解类型声明\n\n    /** Package declaration */\n    PACKAGE,\t\t//包的声明\n\n    /**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * Use of a type\n     *\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n### @Retetion\n\n限定注解使用在其他类后, 可以保留到什么时候 (取值定义在 java.lang.annotation.RetentionPolicy.java 中)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    /**\n     * Returns the retention policy.\n     * @return the retention policy\n     */\n    RetentionPolicy value();\n}\n```\n\nRetentionPolicy : \n\n```java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\t\t//源文件保留(javac把.java源文件编译成.class时，就将相应的注解去掉), 只在编译时用到, 编译后无意义\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\t\t//编译期保留(注解被保留到class文件，但jvm加载class文件时候被遗弃), 是默认值\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\t\t//运行期保留, 自定义注解一般都用这个\n}\n```\n\n### @Documented\n\n将此注解包含在Javadoc中\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Documented {\n}\n```\n\n### @Inherited\n\n如果某个类使用了被@Inherited修饰的注解，则其子类将自动具有该注解\n\n- 仅对 @Target(ElementType.ANNOTATION_TYPE) 的注解有效\n- 仅对 class 的继承 (对 interface 的继承无效)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Inherited {\n}\n```\n\n## 自定义一个注解\n\n### 通过反射获取注解\n\n反射 : 程序在运行期可以拿到一个对象的所有信息; 通过 Class 实例获取 class 信息\n\t\t使程序在运行期对某实例一无所知的情况下, 调用它的方法\n\n#### 定义一个注解\n\n```java\npackage com.company;\n\nimport java.lang.annotation.*;\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\npublic @interface Painter {\n\n    String occupation() default \"\";\n    String twitter() default \"\";\n\n}\n```\n\n#### 定义一个实体类\n\n```java\npackage com.company;\n\npublic class Painters {\n\n    @Painter(occupation = \"幼术师\", twitter = \"@shiratamacaron\")\n    private String shiratama = \"shiratama\";\n\n    @Painter(twitter = \"@xdeyuix\")\n    private Integer deyui = 1220;\n\n    private String yusano = \"yusano\";\n\n    public String getShiratama() {\n        return shiratama;\n    }\n\n    public void setShiratama(String shiratama) {\n        this.shiratama = shiratama;\n    }\n\n    public Integer getDeyui() {\n        return deyui;\n    }\n\n    public void setDeyui(Integer deyui) {\n        this.deyui = deyui;\n    }\n\n    public String getYusano() {\n        return yusano;\n    }\n\n    public void setYusano(String yusano) {\n        this.yusano = yusano;\n    }\n}\n```\n\n#### 通过反射获取注解与字段值\n\n```java\npackage com.company;\n\nimport java.lang.reflect.Field;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception{\n\n        //创建类模板\n        Class<?> c = Class.forName(\"com.company.Painters\");\n\n        //创建类的实例\n        Object object = c.newInstance();\n\n        //获取所有字段\n        for (Field f : c.getDeclaredFields()) {\n\n            f.setAccessible(true);      //设置字段可访问, 否则无法访问private字段, f.get 时报错 IllegalAccessException\n            System.out.println(\"当前字段\" + f.getName());\t\t//输出当前字段\n\n            //判断这个字段是否有Painter注解\n            if (f.isAnnotationPresent(Painter.class)) {\n                Painter annotation = f.getAnnotation(Painter.class);\n                System.out.println(\" 有@Painter注解\" +\n                            \"        职业: \"  + annotation.occupation() +\n                            \"        推特: \"  + annotation.twitter() +\n                            \"        值: \"    + f.get(object));\n            } else {\n                System.out.println((\" 无@Painter注解\" + \"          值: \" + f.get(object)));\n            }\n\n        }\n\n    }\n}\n```\n\n输出结果 : \n\n```java\n当前字段shiratama\n 有@Painter注解        职业: 幼术师        推特: @shiratamacaron        值: shiratama\n当前字段deyui\n 有@Painter注解        职业:         推特: @xdeyuix        值: 1220\n当前字段yusano\n 无@Painter注解          值: yusano\n```\n\n### 注解与 Spring AOP\n\n在日志中print一点东西.....~~再修改一下返回值)咕了~~\n\n#### 引入 Spring AOP 依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n```\n\n#### 注解类\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\npublic @interface GetPainterInfo {\n}\n```\n\n#### 切面类 (更多见注释)\n\n```java\n@Aspect     //声明是切面类\n@Component  //声明是组件类, 注册bean到Spring容器中\npublic class PainterAspect {\n\n    //@Pointcut 表示这是一个切点\n    //@annotation 表示此切点切到一个注解上, 之后是该注解的全类名\n    @Pointcut(\"@annotation(com.example.demo.GetPainterInfo)\")\n    public void painterPointCut(){}\n\n    //环绕通知, 表示在painterPointCut(即@Painter注解的方法)前后做一点事情\n    @Around(\"painterPointCut()\")\n    public Object painterAround(ProceedingJoinPoint joinPoint){\n\n        //获取方法的名称\n        String methodName = joinPoint.getSignature().getName();\n        //获取传入参数名称\n        String[] paramName = ( (MethodSignature)joinPoint.getSignature() ).getParameterNames();\n        //获取传入参数值\n        Object[] param = joinPoint.getArgs();\n\n        //遍历所有参数名称添加到StringBuilder对象中\n        StringBuilder nameStringBuilder = new StringBuilder();\n        for (String string : paramName) {\n            nameStringBuilder.append(string + \"; \");\n        }\n        StringBuilder paramStringBuilder = new StringBuilder();\n        for (Object object : param) {\n            paramStringBuilder.append(object + \"; \");\n        }\n        //直接print到日志\n        System.out.println (\"进入[\"+ methodName + \"]方法\\n\" +\n                            \"参数名称[\" + nameStringBuilder + \"]\\n\" +\n                            \"参数值[\" + paramStringBuilder + \"]\");\n\n        try {\n            //执行原方法并获取返回值\n            Object result = joinPoint.proceed();\n            //@Around后原方法的返回会被接管, 此处不返回的话就没有返回值了\n            return result;\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n\n        //凑数用的返回 ↓↓\n        return new Object();\n    }\n\n}\n```\n\n运行结果: \n\n![image-20210924010844542](https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010844542.png)\n![image-20210924010955569](https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010955569.png)\n\n","source":"_posts/写一个Java注解与 AOP.md","raw":"---\ntitle: 写一个Java注解与 AOP\ndate: 2021-10-31\ntags: [java, spring, springboot, reflect]\n---\n\n# 写一个 Java 注解与 AOP\n\n## 元注解\n\n元注解: 用在其他注解上的注解\n\n四种元注解: \n\n- @Target : 描述注解的使用范围\n- @Retention : 描述注解的生命周期\n- @Documented : 将此注解包含在Javadoc中\n- @Inherited : 使被它修饰的注解具有继承性\n\n### @Target\n\n描述注解的可使用范围 (取值范围在 java.lang.annotation.ElementType.java 中)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Target {\n    /**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to\n     */\n    ElementType[] value();\n}\n```\n\nElementType :\n\n```java\npublic enum ElementType {\n    /** Class, interface (including annotation type), or enum declaration */\n    TYPE,\t\t//类，接口（包括注解类型）或枚举的声明\n\n    /** Field declaration (includes enum constants) */\n    FIELD,\t\t//属性的声明\n\n    /** Method declaration */\n    METHOD,\t\t//方法的声明\n\n    /** Formal parameter declaration */\n    PARAMETER,\t\t//方法形式参数声明\n\n    /** Constructor declaration */\n    CONSTRUCTOR,\t\t//构造方法的声明\n\n    /** Local variable declaration */\n    LOCAL_VARIABLE,\t\t//局部变量声明\n\n    /** Annotation type declaration */\n    ANNOTATION_TYPE,\t\t//注解类型声明\n\n    /** Package declaration */\n    PACKAGE,\t\t//包的声明\n\n    /**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * Use of a type\n     *\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n### @Retetion\n\n限定注解使用在其他类后, 可以保留到什么时候 (取值定义在 java.lang.annotation.RetentionPolicy.java 中)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Retention {\n    /**\n     * Returns the retention policy.\n     * @return the retention policy\n     */\n    RetentionPolicy value();\n}\n```\n\nRetentionPolicy : \n\n```java\npublic enum RetentionPolicy {\n    /**\n     * Annotations are to be discarded by the compiler.\n     */\n    SOURCE,\t\t//源文件保留(javac把.java源文件编译成.class时，就将相应的注解去掉), 只在编译时用到, 编译后无意义\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */\n    CLASS,\t\t//编译期保留(注解被保留到class文件，但jvm加载class文件时候被遗弃), 是默认值\n\n    /**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */\n    RUNTIME\t\t//运行期保留, 自定义注解一般都用这个\n}\n```\n\n### @Documented\n\n将此注解包含在Javadoc中\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Documented {\n}\n```\n\n### @Inherited\n\n如果某个类使用了被@Inherited修饰的注解，则其子类将自动具有该注解\n\n- 仅对 @Target(ElementType.ANNOTATION_TYPE) 的注解有效\n- 仅对 class 的继承 (对 interface 的继承无效)\n\n```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.ANNOTATION_TYPE)\npublic @interface Inherited {\n}\n```\n\n## 自定义一个注解\n\n### 通过反射获取注解\n\n反射 : 程序在运行期可以拿到一个对象的所有信息; 通过 Class 实例获取 class 信息\n\t\t使程序在运行期对某实例一无所知的情况下, 调用它的方法\n\n#### 定义一个注解\n\n```java\npackage com.company;\n\nimport java.lang.annotation.*;\n\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\npublic @interface Painter {\n\n    String occupation() default \"\";\n    String twitter() default \"\";\n\n}\n```\n\n#### 定义一个实体类\n\n```java\npackage com.company;\n\npublic class Painters {\n\n    @Painter(occupation = \"幼术师\", twitter = \"@shiratamacaron\")\n    private String shiratama = \"shiratama\";\n\n    @Painter(twitter = \"@xdeyuix\")\n    private Integer deyui = 1220;\n\n    private String yusano = \"yusano\";\n\n    public String getShiratama() {\n        return shiratama;\n    }\n\n    public void setShiratama(String shiratama) {\n        this.shiratama = shiratama;\n    }\n\n    public Integer getDeyui() {\n        return deyui;\n    }\n\n    public void setDeyui(Integer deyui) {\n        this.deyui = deyui;\n    }\n\n    public String getYusano() {\n        return yusano;\n    }\n\n    public void setYusano(String yusano) {\n        this.yusano = yusano;\n    }\n}\n```\n\n#### 通过反射获取注解与字段值\n\n```java\npackage com.company;\n\nimport java.lang.reflect.Field;\n\npublic class Main {\n\n    public static void main(String[] args) throws Exception{\n\n        //创建类模板\n        Class<?> c = Class.forName(\"com.company.Painters\");\n\n        //创建类的实例\n        Object object = c.newInstance();\n\n        //获取所有字段\n        for (Field f : c.getDeclaredFields()) {\n\n            f.setAccessible(true);      //设置字段可访问, 否则无法访问private字段, f.get 时报错 IllegalAccessException\n            System.out.println(\"当前字段\" + f.getName());\t\t//输出当前字段\n\n            //判断这个字段是否有Painter注解\n            if (f.isAnnotationPresent(Painter.class)) {\n                Painter annotation = f.getAnnotation(Painter.class);\n                System.out.println(\" 有@Painter注解\" +\n                            \"        职业: \"  + annotation.occupation() +\n                            \"        推特: \"  + annotation.twitter() +\n                            \"        值: \"    + f.get(object));\n            } else {\n                System.out.println((\" 无@Painter注解\" + \"          值: \" + f.get(object)));\n            }\n\n        }\n\n    }\n}\n```\n\n输出结果 : \n\n```java\n当前字段shiratama\n 有@Painter注解        职业: 幼术师        推特: @shiratamacaron        值: shiratama\n当前字段deyui\n 有@Painter注解        职业:         推特: @xdeyuix        值: 1220\n当前字段yusano\n 无@Painter注解          值: yusano\n```\n\n### 注解与 Spring AOP\n\n在日志中print一点东西.....~~再修改一下返回值)咕了~~\n\n#### 引入 Spring AOP 依赖\n\n```xml\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n```\n\n#### 注解类\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\npublic @interface GetPainterInfo {\n}\n```\n\n#### 切面类 (更多见注释)\n\n```java\n@Aspect     //声明是切面类\n@Component  //声明是组件类, 注册bean到Spring容器中\npublic class PainterAspect {\n\n    //@Pointcut 表示这是一个切点\n    //@annotation 表示此切点切到一个注解上, 之后是该注解的全类名\n    @Pointcut(\"@annotation(com.example.demo.GetPainterInfo)\")\n    public void painterPointCut(){}\n\n    //环绕通知, 表示在painterPointCut(即@Painter注解的方法)前后做一点事情\n    @Around(\"painterPointCut()\")\n    public Object painterAround(ProceedingJoinPoint joinPoint){\n\n        //获取方法的名称\n        String methodName = joinPoint.getSignature().getName();\n        //获取传入参数名称\n        String[] paramName = ( (MethodSignature)joinPoint.getSignature() ).getParameterNames();\n        //获取传入参数值\n        Object[] param = joinPoint.getArgs();\n\n        //遍历所有参数名称添加到StringBuilder对象中\n        StringBuilder nameStringBuilder = new StringBuilder();\n        for (String string : paramName) {\n            nameStringBuilder.append(string + \"; \");\n        }\n        StringBuilder paramStringBuilder = new StringBuilder();\n        for (Object object : param) {\n            paramStringBuilder.append(object + \"; \");\n        }\n        //直接print到日志\n        System.out.println (\"进入[\"+ methodName + \"]方法\\n\" +\n                            \"参数名称[\" + nameStringBuilder + \"]\\n\" +\n                            \"参数值[\" + paramStringBuilder + \"]\");\n\n        try {\n            //执行原方法并获取返回值\n            Object result = joinPoint.proceed();\n            //@Around后原方法的返回会被接管, 此处不返回的话就没有返回值了\n            return result;\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n\n        //凑数用的返回 ↓↓\n        return new Object();\n    }\n\n}\n```\n\n运行结果: \n\n![image-20210924010844542](https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010844542.png)\n![image-20210924010955569](https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010955569.png)\n\n","slug":"写一个Java注解与 AOP","published":1,"updated":"2022-06-16T13:16:49.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4h1txox000josu7e4aiet1l","content":"<h1 id=\"写一个-Java-注解与-AOP\"><a href=\"#写一个-Java-注解与-AOP\" class=\"headerlink\" title=\"写一个 Java 注解与 AOP\"></a>写一个 Java 注解与 AOP</h1><h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p>元注解: 用在其他注解上的注解</p>\n<p>四种元注解: </p>\n<ul>\n<li>@Target : 描述注解的使用范围</li>\n<li>@Retention : 描述注解的生命周期</li>\n<li>@Documented : 将此注解包含在Javadoc中</li>\n<li>@Inherited : 使被它修饰的注解具有继承性</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>描述注解的可使用范围 (取值范围在 java.lang.annotation.ElementType.java 中)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to\n     */</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ElementType :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ElementType</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** Class, interface (including annotation type), or enum declaration */</span>\n    TYPE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//类，接口（包括注解类型）或枚举的声明</span>\n\n    <span class=\"token comment\">/** Field declaration (includes enum constants) */</span>\n    FIELD<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//属性的声明</span>\n\n    <span class=\"token comment\">/** Method declaration */</span>\n    METHOD<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//方法的声明</span>\n\n    <span class=\"token comment\">/** Formal parameter declaration */</span>\n    PARAMETER<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//方法形式参数声明</span>\n\n    <span class=\"token comment\">/** Constructor declaration */</span>\n    CONSTRUCTOR<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//构造方法的声明</span>\n\n    <span class=\"token comment\">/** Local variable declaration */</span>\n    LOCAL_VARIABLE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//局部变量声明</span>\n\n    <span class=\"token comment\">/** Annotation type declaration */</span>\n    ANNOTATION_TYPE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//注解类型声明</span>\n\n    <span class=\"token comment\">/** Package declaration */</span>\n    PACKAGE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//包的声明</span>\n\n    <span class=\"token comment\">/**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */</span>\n    TYPE_PARAMETER<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/**\n     * Use of a type\n     *\n     * @since 1.8\n     */</span>\n    TYPE_USE\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Retetion\"><a href=\"#Retetion\" class=\"headerlink\" title=\"@Retetion\"></a>@Retetion</h3><p>限定注解使用在其他类后, 可以保留到什么时候 (取值定义在 java.lang.annotation.RetentionPolicy.java 中)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Retention</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Returns the retention policy.\n     * @return the retention policy\n     */</span>\n    <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>RetentionPolicy : </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Annotations are to be discarded by the compiler.\n     */</span>\n    SOURCE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//源文件保留(javac把.java源文件编译成.class时，就将相应的注解去掉), 只在编译时用到, 编译后无意义</span>\n\n    <span class=\"token comment\">/**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */</span>\n    CLASS<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//编译期保留(注解被保留到class文件，但jvm加载class文件时候被遗弃), 是默认值</span>\n\n    <span class=\"token comment\">/**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */</span>\n    RUNTIME\t\t<span class=\"token comment\">//运行期保留, 自定义注解一般都用这个</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><p>将此注解包含在Javadoc中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Documented</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>如果某个类使用了被@Inherited修饰的注解，则其子类将自动具有该注解</p>\n<ul>\n<li>仅对 @Target(ElementType.ANNOTATION_TYPE) 的注解有效</li>\n<li>仅对 class 的继承 (对 interface 的继承无效)</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Inherited</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"自定义一个注解\"><a href=\"#自定义一个注解\" class=\"headerlink\" title=\"自定义一个注解\"></a>自定义一个注解</h2><h3 id=\"通过反射获取注解\"><a href=\"#通过反射获取注解\" class=\"headerlink\" title=\"通过反射获取注解\"></a>通过反射获取注解</h3><p>反射 : 程序在运行期可以拿到一个对象的所有信息; 通过 Class 实例获取 class 信息<br>        使程序在运行期对某实例一无所知的情况下, 调用它的方法</p>\n<h4 id=\"定义一个注解\"><a href=\"#定义一个注解\" class=\"headerlink\" title=\"定义一个注解\"></a>定义一个注解</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Painter</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">occupation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"定义一个实体类\"><a href=\"#定义一个实体类\" class=\"headerlink\" title=\"定义一个实体类\"></a>定义一个实体类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Painters</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Painter</span><span class=\"token punctuation\">(</span>occupation <span class=\"token operator\">=</span> <span class=\"token string\">\"幼术师\"</span><span class=\"token punctuation\">,</span> twitter <span class=\"token operator\">=</span> <span class=\"token string\">\"@shiratamacaron\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> shiratama <span class=\"token operator\">=</span> <span class=\"token string\">\"shiratama\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Painter</span><span class=\"token punctuation\">(</span>twitter <span class=\"token operator\">=</span> <span class=\"token string\">\"@xdeyuix\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> deyui <span class=\"token operator\">=</span> <span class=\"token number\">1220</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> yusano <span class=\"token operator\">=</span> <span class=\"token string\">\"yusano\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getShiratama</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> shiratama<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setShiratama</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shiratama<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shiratama <span class=\"token operator\">=</span> shiratama<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getDeyui</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> deyui<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDeyui</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> deyui<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deyui <span class=\"token operator\">=</span> deyui<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getYusano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> yusano<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setYusano</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> yusano<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yusano <span class=\"token operator\">=</span> yusano<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"通过反射获取注解与字段值\"><a href=\"#通过反射获取注解与字段值\" class=\"headerlink\" title=\"通过反射获取注解与字段值\"></a>通过反射获取注解与字段值</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//创建类模板</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.Painters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建类的实例</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取所有字段</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//设置字段可访问, 否则无法访问private字段, f.get 时报错 IllegalAccessException</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前字段\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出当前字段</span>\n\n            <span class=\"token comment\">//判断这个字段是否有Painter注解</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Painter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Painter</span> annotation <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Painter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 有@Painter注解\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        职业: \"</span>  <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">occupation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        推特: \"</span>  <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        值: \"</span>    <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 无@Painter注解\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"          值: \"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果 : </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">当前字段shiratama\n 有<span class=\"token annotation punctuation\">@Painter</span>注解        职业<span class=\"token operator\">:</span> 幼术师        推特<span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@shiratamacaron</span>        值<span class=\"token operator\">:</span> shiratama\n当前字段deyui\n 有<span class=\"token annotation punctuation\">@Painter</span>注解        职业<span class=\"token operator\">:</span>         推特<span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@xdeyuix</span>        值<span class=\"token operator\">:</span> <span class=\"token number\">1220</span>\n当前字段yusano\n 无<span class=\"token annotation punctuation\">@Painter</span>注解          值<span class=\"token operator\">:</span> yusano<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注解与-Spring-AOP\"><a href=\"#注解与-Spring-AOP\" class=\"headerlink\" title=\"注解与 Spring AOP\"></a>注解与 Spring AOP</h3><p>在日志中print一点东西…..<del>再修改一下返回值)咕了</del></p>\n<h4 id=\"引入-Spring-AOP-依赖\"><a href=\"#引入-Spring-AOP-依赖\" class=\"headerlink\" title=\"引入 Spring AOP 依赖\"></a>引入 Spring AOP 依赖</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"注解类\"><a href=\"#注解类\" class=\"headerlink\" title=\"注解类\"></a>注解类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">GetPainterInfo</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"切面类-更多见注释\"><a href=\"#切面类-更多见注释\" class=\"headerlink\" title=\"切面类 (更多见注释)\"></a>切面类 (更多见注释)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>     <span class=\"token comment\">//声明是切面类</span>\n<span class=\"token annotation punctuation\">@Component</span>  <span class=\"token comment\">//声明是组件类, 注册bean到Spring容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PainterAspect</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//@Pointcut 表示这是一个切点</span>\n    <span class=\"token comment\">//@annotation 表示此切点切到一个注解上, 之后是该注解的全类名</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.example.demo.GetPainterInfo)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">painterPointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//环绕通知, 表示在painterPointCut(即@Painter注解的方法)前后做一点事情</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"painterPointCut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">painterAround</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//获取方法的名称</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取传入参数名称</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodSignature</span><span class=\"token punctuation\">)</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取传入参数值</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> param <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//遍历所有参数名称添加到StringBuilder对象中</span>\n        <span class=\"token class-name\">StringBuilder</span> nameStringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> paramName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nameStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">+</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> paramStringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object <span class=\"token operator\">:</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            paramStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>object <span class=\"token operator\">+</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//直接print到日志</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"进入[\"</span><span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\"]方法\\n\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"参数名称[\"</span> <span class=\"token operator\">+</span> nameStringBuilder <span class=\"token operator\">+</span> <span class=\"token string\">\"]\\n\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"参数值[\"</span> <span class=\"token operator\">+</span> paramStringBuilder <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//执行原方法并获取返回值</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//@Around后原方法的返回会被接管, 此处不返回的话就没有返回值了</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//凑数用的返回 ↓↓</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果: </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010844542.png\" alt=\"image-20210924010844542\"><br><img src=\"https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010955569.png\" alt=\"image-20210924010955569\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"写一个-Java-注解与-AOP\"><a href=\"#写一个-Java-注解与-AOP\" class=\"headerlink\" title=\"写一个 Java 注解与 AOP\"></a>写一个 Java 注解与 AOP</h1><h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p>元注解: 用在其他注解上的注解</p>\n<p>四种元注解: </p>\n<ul>\n<li>@Target : 描述注解的使用范围</li>\n<li>@Retention : 描述注解的生命周期</li>\n<li>@Documented : 将此注解包含在Javadoc中</li>\n<li>@Inherited : 使被它修饰的注解具有继承性</li>\n</ul>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a>@Target</h3><p>描述注解的可使用范围 (取值范围在 java.lang.annotation.ElementType.java 中)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Target</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Returns an array of the kinds of elements an annotation type\n     * can be applied to.\n     * @return an array of the kinds of elements an annotation type\n     * can be applied to\n     */</span>\n    <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>ElementType :</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ElementType</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/** Class, interface (including annotation type), or enum declaration */</span>\n    TYPE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//类，接口（包括注解类型）或枚举的声明</span>\n\n    <span class=\"token comment\">/** Field declaration (includes enum constants) */</span>\n    FIELD<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//属性的声明</span>\n\n    <span class=\"token comment\">/** Method declaration */</span>\n    METHOD<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//方法的声明</span>\n\n    <span class=\"token comment\">/** Formal parameter declaration */</span>\n    PARAMETER<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//方法形式参数声明</span>\n\n    <span class=\"token comment\">/** Constructor declaration */</span>\n    CONSTRUCTOR<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//构造方法的声明</span>\n\n    <span class=\"token comment\">/** Local variable declaration */</span>\n    LOCAL_VARIABLE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//局部变量声明</span>\n\n    <span class=\"token comment\">/** Annotation type declaration */</span>\n    ANNOTATION_TYPE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//注解类型声明</span>\n\n    <span class=\"token comment\">/** Package declaration */</span>\n    PACKAGE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//包的声明</span>\n\n    <span class=\"token comment\">/**\n     * Type parameter declaration\n     *\n     * @since 1.8\n     */</span>\n    TYPE_PARAMETER<span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">/**\n     * Use of a type\n     *\n     * @since 1.8\n     */</span>\n    TYPE_USE\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Retetion\"><a href=\"#Retetion\" class=\"headerlink\" title=\"@Retetion\"></a>@Retetion</h3><p>限定注解使用在其他类后, 可以保留到什么时候 (取值定义在 java.lang.annotation.RetentionPolicy.java 中)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Retention</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Returns the retention policy.\n     * @return the retention policy\n     */</span>\n    <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>RetentionPolicy : </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">RetentionPolicy</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">/**\n     * Annotations are to be discarded by the compiler.\n     */</span>\n    SOURCE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//源文件保留(javac把.java源文件编译成.class时，就将相应的注解去掉), 只在编译时用到, 编译后无意义</span>\n\n    <span class=\"token comment\">/**\n     * Annotations are to be recorded in the class file by the compiler\n     * but need not be retained by the VM at run time.  This is the default\n     * behavior.\n     */</span>\n    CLASS<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//编译期保留(注解被保留到class文件，但jvm加载class文件时候被遗弃), 是默认值</span>\n\n    <span class=\"token comment\">/**\n     * Annotations are to be recorded in the class file by the compiler and\n     * retained by the VM at run time, so they may be read reflectively.\n     *\n     * @see java.lang.reflect.AnnotatedElement\n     */</span>\n    RUNTIME\t\t<span class=\"token comment\">//运行期保留, 自定义注解一般都用这个</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Documented\"><a href=\"#Documented\" class=\"headerlink\" title=\"@Documented\"></a>@Documented</h3><p>将此注解包含在Javadoc中</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Documented</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Inherited\"><a href=\"#Inherited\" class=\"headerlink\" title=\"@Inherited\"></a>@Inherited</h3><p>如果某个类使用了被@Inherited修饰的注解，则其子类将自动具有该注解</p>\n<ul>\n<li>仅对 @Target(ElementType.ANNOTATION_TYPE) 的注解有效</li>\n<li>仅对 class 的继承 (对 interface 的继承无效)</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Inherited</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"自定义一个注解\"><a href=\"#自定义一个注解\" class=\"headerlink\" title=\"自定义一个注解\"></a>自定义一个注解</h2><h3 id=\"通过反射获取注解\"><a href=\"#通过反射获取注解\" class=\"headerlink\" title=\"通过反射获取注解\"></a>通过反射获取注解</h3><p>反射 : 程序在运行期可以拿到一个对象的所有信息; 通过 Class 实例获取 class 信息<br>        使程序在运行期对某实例一无所知的情况下, 调用它的方法</p>\n<h4 id=\"定义一个注解\"><a href=\"#定义一个注解\" class=\"headerlink\" title=\"定义一个注解\"></a>定义一个注解</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>FIELD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Painter</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token class-name\">String</span> <span class=\"token function\">occupation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> <span class=\"token function\">twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"定义一个实体类\"><a href=\"#定义一个实体类\" class=\"headerlink\" title=\"定义一个实体类\"></a>定义一个实体类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Painters</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token annotation punctuation\">@Painter</span><span class=\"token punctuation\">(</span>occupation <span class=\"token operator\">=</span> <span class=\"token string\">\"幼术师\"</span><span class=\"token punctuation\">,</span> twitter <span class=\"token operator\">=</span> <span class=\"token string\">\"@shiratamacaron\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> shiratama <span class=\"token operator\">=</span> <span class=\"token string\">\"shiratama\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Painter</span><span class=\"token punctuation\">(</span>twitter <span class=\"token operator\">=</span> <span class=\"token string\">\"@xdeyuix\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> deyui <span class=\"token operator\">=</span> <span class=\"token number\">1220</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> yusano <span class=\"token operator\">=</span> <span class=\"token string\">\"yusano\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getShiratama</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> shiratama<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setShiratama</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> shiratama<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shiratama <span class=\"token operator\">=</span> shiratama<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getDeyui</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> deyui<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDeyui</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> deyui<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>deyui <span class=\"token operator\">=</span> deyui<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getYusano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> yusano<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setYusano</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> yusano<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>yusano <span class=\"token operator\">=</span> yusano<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"通过反射获取注解与字段值\"><a href=\"#通过反射获取注解与字段值\" class=\"headerlink\" title=\"通过反射获取注解与字段值\"></a>通过反射获取注解与字段值</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>company</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//创建类模板</span>\n        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.company.Painters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//创建类的实例</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//获取所有字段</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> f <span class=\"token operator\">:</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n            f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//设置字段可访问, 否则无法访问private字段, f.get 时报错 IllegalAccessException</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前字段\"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//输出当前字段</span>\n\n            <span class=\"token comment\">//判断这个字段是否有Painter注解</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">isAnnotationPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Painter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">Painter</span> annotation <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Painter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 有@Painter注解\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        职业: \"</span>  <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">occupation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        推特: \"</span>  <span class=\"token operator\">+</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">twitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"        值: \"</span>    <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" 无@Painter注解\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"          值: \"</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出结果 : </p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">当前字段shiratama\n 有<span class=\"token annotation punctuation\">@Painter</span>注解        职业<span class=\"token operator\">:</span> 幼术师        推特<span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@shiratamacaron</span>        值<span class=\"token operator\">:</span> shiratama\n当前字段deyui\n 有<span class=\"token annotation punctuation\">@Painter</span>注解        职业<span class=\"token operator\">:</span>         推特<span class=\"token operator\">:</span> <span class=\"token annotation punctuation\">@xdeyuix</span>        值<span class=\"token operator\">:</span> <span class=\"token number\">1220</span>\n当前字段yusano\n 无<span class=\"token annotation punctuation\">@Painter</span>注解          值<span class=\"token operator\">:</span> yusano<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"注解与-Spring-AOP\"><a href=\"#注解与-Spring-AOP\" class=\"headerlink\" title=\"注解与 Spring AOP\"></a>注解与 Spring AOP</h3><p>在日志中print一点东西…..<del>再修改一下返回值)咕了</del></p>\n<h4 id=\"引入-Spring-AOP-依赖\"><a href=\"#引入-Spring-AOP-依赖\" class=\"headerlink\" title=\"引入 Spring AOP 依赖\"></a>引入 Spring AOP 依赖</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-aop<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"注解类\"><a href=\"#注解类\" class=\"headerlink\" title=\"注解类\"></a>注解类</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Inherited</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">GetPainterInfo</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"切面类-更多见注释\"><a href=\"#切面类-更多见注释\" class=\"headerlink\" title=\"切面类 (更多见注释)\"></a>切面类 (更多见注释)</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Aspect</span>     <span class=\"token comment\">//声明是切面类</span>\n<span class=\"token annotation punctuation\">@Component</span>  <span class=\"token comment\">//声明是组件类, 注册bean到Spring容器中</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PainterAspect</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//@Pointcut 表示这是一个切点</span>\n    <span class=\"token comment\">//@annotation 表示此切点切到一个注解上, 之后是该注解的全类名</span>\n    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.example.demo.GetPainterInfo)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">painterPointCut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//环绕通知, 表示在painterPointCut(即@Painter注解的方法)前后做一点事情</span>\n    <span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"painterPointCut()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">painterAround</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> joinPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token comment\">//获取方法的名称</span>\n        <span class=\"token class-name\">String</span> methodName <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取传入参数名称</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> paramName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodSignature</span><span class=\"token punctuation\">)</span>joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//获取传入参数值</span>\n        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> param <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//遍历所有参数名称添加到StringBuilder对象中</span>\n        <span class=\"token class-name\">StringBuilder</span> nameStringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> string <span class=\"token operator\">:</span> paramName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            nameStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>string <span class=\"token operator\">+</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">StringBuilder</span> paramStringBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> object <span class=\"token operator\">:</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            paramStringBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>object <span class=\"token operator\">+</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//直接print到日志</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println <span class=\"token punctuation\">(</span><span class=\"token string\">\"进入[\"</span><span class=\"token operator\">+</span> methodName <span class=\"token operator\">+</span> <span class=\"token string\">\"]方法\\n\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"参数名称[\"</span> <span class=\"token operator\">+</span> nameStringBuilder <span class=\"token operator\">+</span> <span class=\"token string\">\"]\\n\"</span> <span class=\"token operator\">+</span>\n                            <span class=\"token string\">\"参数值[\"</span> <span class=\"token operator\">+</span> paramStringBuilder <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//执行原方法并获取返回值</span>\n            <span class=\"token class-name\">Object</span> result <span class=\"token operator\">=</span> joinPoint<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//@Around后原方法的返回会被接管, 此处不返回的话就没有返回值了</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//凑数用的返回 ↓↓</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果: </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010844542.png\" alt=\"image-20210924010844542\"><br><img src=\"https://cdn.jsdelivr.net/gh/luoshieryi/images@main//markdown/image-20210924010955569.png\" alt=\"image-20210924010955569\"></p>\n"},{"title":"Linux下使用Nginx配置正向代理","date":"2022-02-26T16:00:00.000Z","_content":"\n# Linux下使用Nginx配置正向代理\n\n## 前言\n\nNginx 除了用于搭建反向代理, 负载均衡, 也可以用于搭建正向代理服务器\n\n正向代理的作用有: \n\n- 内网服务器访问外网\n\n- 提供 VPN 服务\n\n## 物料准备\n\n本文使用环境为 CentOS8 , nginx 原生不直接支持https代理, `使用 ngx_http_proxy_connect_module` 实现 https 代理\n\n- nginx (此处使用1.19.2) : http://nginx.org/download/nginx-1.19.2.tar.gz\n- nginx 1.19.2 对应 https 模块 : https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip\n- gcc cpp 编译器\n- pcre-devel 与 openssl-devel\n\n## 开始安装\n\n1. 切换到 nginx 安装目录 `cd /opt/nginx`\n\n2. 下载模块 `wget https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip`\n\n3. 解压 `unzip v0.0.2.zip` \n\n4. 下载 nginx `wget http://nginx.org/download/nginx-1.19.2.tar.gz`\n\n5. 打入https模块\n\n   ```bash\n   tar xf nginx-1.19.2.tar.gz\n   \n   cd nginx-1.19.2\n   \n   patch -p1 < /opt/nginx/ngx_http_proxy_connect_module-0.0.2/patch/proxy_connect_rewrite_1018.patch\n   ```\n\n6. 安装 pcre-devel 与 openssl-devel `yum -y install pcre-devel openssl openssl-devel`\n\n7. 安装gcc编译器, 编译安装 nginx \n\n   ```bash\n   yum -y install gcc cmake make cmake unzip ncurses-devel gcc gcc-c++\n   \n   ./configure --prefix=/opt/nginx/nginx_app --add-module=/opt/nginx/ngx_http_proxy_connect_module-0.0.2\n   \n   make && make install\n   ```\n\n8. 配置 nginx\n\n   ```bash\n   cd /opt/nginx/nginx_app/conf/\n   \n   vim nginx.conf\n   ```\n\n   ```text\n    server {\n           listen                           1270;\t\t\t  \t\t#自定义正向代理使用端口\n           server_name                      luoluo;\t\t\t\t#自定义正向代理服务名称\n           # dns resolver used by forward proxying\n        \t# 域名解析服务器\n           resolver                         114.114.114.114;\n           # forward proxy for CONNECT request\n           proxy_connect;\n           # 允许端口，all所有, 此处 80 表示 http 请求所需端口, 443 表示 https\n           proxy_connect_allow              443 80;\n           proxy_connect_connect_timeout    10s;\n           proxy_connect_read_timeout       10s;\n           proxy_connect_send_timeout       10s;\n           location / {\n               proxy_pass $scheme://$http_host$request_uri;\n           }\n       }\n   ```\n\n9. 编写 `systemd`  启动服务\n\n   ```bash\n   cat > /etc/systemd/system/nginx.service << EOF\n   [Unit]\n   Description=The NGINX HTTP and reverse proxy server\n   After=syslog.target network-online.target remote-fs.target nss-lookup.target\n   Wants=network-online.target\n   \n   [Service]\n   Type=forking\n   PIDFile=/opt/nginx/nginx_app/logs/nginx.pid\n   ExecStartPre=/opt/nginx/nginx_app/sbin/nginx -t\n   ExecStart=/opt/nginx/nginx_app/sbin/nginx\n   ExecReload=/opt/nginx/nginx_app/sbin/nginx -s reload\n   ExecStop=/bin/kill -s QUIT $MAINPID\n   PrivateTmp=true\n   \n   [Install]\n   WantedBy=multi-user.target\n   EOF\n   ```\n\n10. 启动 nginx 服务\n\n    ```bach\n    systemctl daemon-reload\n    systemctl start nginx\n    ```\n\n11. 开放防火墙对应端口\n\n## 拓展\n\n### 限定 IP 访问\n\n在 `nginx.conf` 的 `server{}` 中添加配置\n\n1. 仅允许 123.123.123.123 访问\n\n    ```text\n    allow 123.123.123.123\n    deny all\n    ```\n\n2. 仅禁止 123.123.123.123 访问\n\n   ```text\n   deny 123.123.123.123\n   ```\n\n3. 仅允许 123.123.123.1-254 网段访问\n\n   ```text\n   allow 123.123.123.1/24\n   deny all\n   ```\n\n4. 仅禁止 123.123.123.1-254 网段访问\n\n   ```text\n   deny 123.123.123.1/24\n   ```\n\n5. 重新加载配置文件 `nginx -s reload` (或重启服务)\n\n### 限定 用户名/密码 访问\n\n1. 安装 apacha-htpasswd\n   `yum install httpd-tools -y`\n\n2. 生成用户名密码 `htpasswd -bc 文件路径 用户名 密码`\n   e.g. `htpasswd -bc /opt/nginx/psd root 123456`\n\n3. 在 `nginx.conf` 的 `server{}` 中添加配置\n\n   ```text\n   auth_basic \"input password\";   # 这里是提示信息\n   \n   auth_basic_user_file /opt/nginx/psd; # 这里填写刚才生成的文件路径\n   ```\n\n4. 重新加载配置文件 `nginx -s reload` (或重启服务)\n\n## 备注\n\n- LNMP高版本脚本编译安装的nginx默认支持ipv6, 所以不必纠结nginx -V查看的结果是否有“--with-ipv6\", 如果使用 \"--with-ipv6\" 参数, 会报 warning :  \n  `./configure: warning: the “–with-ipv6” option is deprecated`\n\n","source":"_posts/CentOS8 , 配置nginx正向代理.md","raw":"---\ntitle: Linux下使用Nginx配置正向代理\ndate: 2022-02-27\ntags: [linux, nginx, centos, proxy]\n---\n\n# Linux下使用Nginx配置正向代理\n\n## 前言\n\nNginx 除了用于搭建反向代理, 负载均衡, 也可以用于搭建正向代理服务器\n\n正向代理的作用有: \n\n- 内网服务器访问外网\n\n- 提供 VPN 服务\n\n## 物料准备\n\n本文使用环境为 CentOS8 , nginx 原生不直接支持https代理, `使用 ngx_http_proxy_connect_module` 实现 https 代理\n\n- nginx (此处使用1.19.2) : http://nginx.org/download/nginx-1.19.2.tar.gz\n- nginx 1.19.2 对应 https 模块 : https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip\n- gcc cpp 编译器\n- pcre-devel 与 openssl-devel\n\n## 开始安装\n\n1. 切换到 nginx 安装目录 `cd /opt/nginx`\n\n2. 下载模块 `wget https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip`\n\n3. 解压 `unzip v0.0.2.zip` \n\n4. 下载 nginx `wget http://nginx.org/download/nginx-1.19.2.tar.gz`\n\n5. 打入https模块\n\n   ```bash\n   tar xf nginx-1.19.2.tar.gz\n   \n   cd nginx-1.19.2\n   \n   patch -p1 < /opt/nginx/ngx_http_proxy_connect_module-0.0.2/patch/proxy_connect_rewrite_1018.patch\n   ```\n\n6. 安装 pcre-devel 与 openssl-devel `yum -y install pcre-devel openssl openssl-devel`\n\n7. 安装gcc编译器, 编译安装 nginx \n\n   ```bash\n   yum -y install gcc cmake make cmake unzip ncurses-devel gcc gcc-c++\n   \n   ./configure --prefix=/opt/nginx/nginx_app --add-module=/opt/nginx/ngx_http_proxy_connect_module-0.0.2\n   \n   make && make install\n   ```\n\n8. 配置 nginx\n\n   ```bash\n   cd /opt/nginx/nginx_app/conf/\n   \n   vim nginx.conf\n   ```\n\n   ```text\n    server {\n           listen                           1270;\t\t\t  \t\t#自定义正向代理使用端口\n           server_name                      luoluo;\t\t\t\t#自定义正向代理服务名称\n           # dns resolver used by forward proxying\n        \t# 域名解析服务器\n           resolver                         114.114.114.114;\n           # forward proxy for CONNECT request\n           proxy_connect;\n           # 允许端口，all所有, 此处 80 表示 http 请求所需端口, 443 表示 https\n           proxy_connect_allow              443 80;\n           proxy_connect_connect_timeout    10s;\n           proxy_connect_read_timeout       10s;\n           proxy_connect_send_timeout       10s;\n           location / {\n               proxy_pass $scheme://$http_host$request_uri;\n           }\n       }\n   ```\n\n9. 编写 `systemd`  启动服务\n\n   ```bash\n   cat > /etc/systemd/system/nginx.service << EOF\n   [Unit]\n   Description=The NGINX HTTP and reverse proxy server\n   After=syslog.target network-online.target remote-fs.target nss-lookup.target\n   Wants=network-online.target\n   \n   [Service]\n   Type=forking\n   PIDFile=/opt/nginx/nginx_app/logs/nginx.pid\n   ExecStartPre=/opt/nginx/nginx_app/sbin/nginx -t\n   ExecStart=/opt/nginx/nginx_app/sbin/nginx\n   ExecReload=/opt/nginx/nginx_app/sbin/nginx -s reload\n   ExecStop=/bin/kill -s QUIT $MAINPID\n   PrivateTmp=true\n   \n   [Install]\n   WantedBy=multi-user.target\n   EOF\n   ```\n\n10. 启动 nginx 服务\n\n    ```bach\n    systemctl daemon-reload\n    systemctl start nginx\n    ```\n\n11. 开放防火墙对应端口\n\n## 拓展\n\n### 限定 IP 访问\n\n在 `nginx.conf` 的 `server{}` 中添加配置\n\n1. 仅允许 123.123.123.123 访问\n\n    ```text\n    allow 123.123.123.123\n    deny all\n    ```\n\n2. 仅禁止 123.123.123.123 访问\n\n   ```text\n   deny 123.123.123.123\n   ```\n\n3. 仅允许 123.123.123.1-254 网段访问\n\n   ```text\n   allow 123.123.123.1/24\n   deny all\n   ```\n\n4. 仅禁止 123.123.123.1-254 网段访问\n\n   ```text\n   deny 123.123.123.1/24\n   ```\n\n5. 重新加载配置文件 `nginx -s reload` (或重启服务)\n\n### 限定 用户名/密码 访问\n\n1. 安装 apacha-htpasswd\n   `yum install httpd-tools -y`\n\n2. 生成用户名密码 `htpasswd -bc 文件路径 用户名 密码`\n   e.g. `htpasswd -bc /opt/nginx/psd root 123456`\n\n3. 在 `nginx.conf` 的 `server{}` 中添加配置\n\n   ```text\n   auth_basic \"input password\";   # 这里是提示信息\n   \n   auth_basic_user_file /opt/nginx/psd; # 这里填写刚才生成的文件路径\n   ```\n\n4. 重新加载配置文件 `nginx -s reload` (或重启服务)\n\n## 备注\n\n- LNMP高版本脚本编译安装的nginx默认支持ipv6, 所以不必纠结nginx -V查看的结果是否有“--with-ipv6\", 如果使用 \"--with-ipv6\" 参数, 会报 warning :  \n  `./configure: warning: the “–with-ipv6” option is deprecated`\n\n","slug":"CentOS8 , 配置nginx正向代理","published":1,"updated":"2022-06-16T13:16:49.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4mtmk6a0000swu78mbqa5d8","content":"<h1 id=\"Linux下使用Nginx配置正向代理\"><a href=\"#Linux下使用Nginx配置正向代理\" class=\"headerlink\" title=\"Linux下使用Nginx配置正向代理\"></a>Linux下使用Nginx配置正向代理</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Nginx 除了用于搭建反向代理, 负载均衡, 也可以用于搭建正向代理服务器</p>\n<p>正向代理的作用有: </p>\n<ul>\n<li><p>内网服务器访问外网</p>\n</li>\n<li><p>提供 VPN 服务</p>\n</li>\n</ul>\n<h2 id=\"物料准备\"><a href=\"#物料准备\" class=\"headerlink\" title=\"物料准备\"></a>物料准备</h2><p>本文使用环境为 CentOS8 , nginx 原生不直接支持https代理, <code>使用 ngx_http_proxy_connect_module</code> 实现 https 代理</p>\n<ul>\n<li>nginx (此处使用1.19.2) : <a href=\"http://nginx.org/download/nginx-1.19.2.tar.gz\">http://nginx.org/download/nginx-1.19.2.tar.gz</a></li>\n<li>nginx 1.19.2 对应 https 模块 : <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip\">https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip</a></li>\n<li>gcc cpp 编译器</li>\n<li>pcre-devel 与 openssl-devel</li>\n</ul>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><ol>\n<li><p>切换到 nginx 安装目录 <code>cd /opt/nginx</code></p>\n</li>\n<li><p>下载模块 <code>wget https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip</code></p>\n</li>\n<li><p>解压 <code>unzip v0.0.2.zip</code> </p>\n</li>\n<li><p>下载 nginx <code>wget http://nginx.org/download/nginx-1.19.2.tar.gz</code></p>\n</li>\n<li><p>打入https模块</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> xf nginx-1.19.2.tar.gz\n\n<span class=\"token builtin class-name\">cd</span> nginx-1.19.2\n\npatch -p1 <span class=\"token operator\">&lt;</span> /opt/nginx/ngx_http_proxy_connect_module-0.0.2/patch/proxy_connect_rewrite_1018.patch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装 pcre-devel 与 openssl-devel <code>yum -y install pcre-devel openssl openssl-devel</code></p>\n</li>\n<li><p>安装gcc编译器, 编译安装 nginx </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> gcc cmake <span class=\"token function\">make</span> cmake <span class=\"token function\">unzip</span> ncurses-devel gcc gcc-c++\n\n./configure --prefix<span class=\"token operator\">=</span>/opt/nginx/nginx_app --add-module<span class=\"token operator\">=</span>/opt/nginx/ngx_http_proxy_connect_module-0.0.2\n\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置 nginx</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /opt/nginx/nginx_app/conf/\n\n<span class=\"token function\">vim</span> nginx.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">server &#123;\n       listen                           1270;\t\t\t  \t\t#自定义正向代理使用端口\n       server_name                      luoluo;\t\t\t\t#自定义正向代理服务名称\n       # dns resolver used by forward proxying\n    \t# 域名解析服务器\n       resolver                         114.114.114.114;\n       # forward proxy for CONNECT request\n       proxy_connect;\n       # 允许端口，all所有, 此处 80 表示 http 请求所需端口, 443 表示 https\n       proxy_connect_allow              443 80;\n       proxy_connect_connect_timeout    10s;\n       proxy_connect_read_timeout       10s;\n       proxy_connect_send_timeout       10s;\n       location / &#123;\n           proxy_pass $scheme://$http_host$request_uri;\n       &#125;\n   &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>编写 <code>systemd</code>  启动服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">></span> /etc/systemd/system/nginx.service <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network-online.target remote-fs.target nss-lookup.target\nWants=network-online.target\n\n[Service]\nType=forking\nPIDFile=/opt/nginx/nginx_app/logs/nginx.pid\nExecStartPre=/opt/nginx/nginx_app/sbin/nginx -t\nExecStart=/opt/nginx/nginx_app/sbin/nginx\nExecReload=/opt/nginx/nginx_app/sbin/nginx -s reload\nExecStop=/bin/kill -s QUIT <span class=\"token variable\">$MAINPID</span>\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启动 nginx 服务</p>\n<pre class=\"line-numbers language-bach\" data-language=\"bach\"><code class=\"language-bach\">systemctl daemon-reload\nsystemctl start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>开放防火墙对应端口</p>\n</li>\n</ol>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><h3 id=\"限定-IP-访问\"><a href=\"#限定-IP-访问\" class=\"headerlink\" title=\"限定 IP 访问\"></a>限定 IP 访问</h3><p>在 <code>nginx.conf</code> 的 <code>server&#123;&#125;</code> 中添加配置</p>\n<ol>\n<li><p>仅允许 123.123.123.123 访问</p>\n <pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">allow 123.123.123.123\ndeny all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>仅禁止 123.123.123.123 访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">deny 123.123.123.123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>仅允许 123.123.123.1-254 网段访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">allow 123.123.123.1/24\ndeny all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>仅禁止 123.123.123.1-254 网段访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">deny 123.123.123.1/24<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>重新加载配置文件 <code>nginx -s reload</code> (或重启服务)</p>\n</li>\n</ol>\n<h3 id=\"限定-用户名-密码-访问\"><a href=\"#限定-用户名-密码-访问\" class=\"headerlink\" title=\"限定 用户名/密码 访问\"></a>限定 用户名/密码 访问</h3><ol>\n<li><p>安装 apacha-htpasswd<br><code>yum install httpd-tools -y</code></p>\n</li>\n<li><p>生成用户名密码 <code>htpasswd -bc 文件路径 用户名 密码</code><br>e.g. <code>htpasswd -bc /opt/nginx/psd root 123456</code></p>\n</li>\n<li><p>在 <code>nginx.conf</code> 的 <code>server&#123;&#125;</code> 中添加配置</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">auth_basic \"input password\";   # 这里是提示信息\n\nauth_basic_user_file /opt/nginx/psd; # 这里填写刚才生成的文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>重新加载配置文件 <code>nginx -s reload</code> (或重启服务)</p>\n</li>\n</ol>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>LNMP高版本脚本编译安装的nginx默认支持ipv6, 所以不必纠结nginx -V查看的结果是否有“–with-ipv6”, 如果使用 “–with-ipv6” 参数, 会报 warning :<br><code>./configure: warning: the “–with-ipv6” option is deprecated</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux下使用Nginx配置正向代理\"><a href=\"#Linux下使用Nginx配置正向代理\" class=\"headerlink\" title=\"Linux下使用Nginx配置正向代理\"></a>Linux下使用Nginx配置正向代理</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Nginx 除了用于搭建反向代理, 负载均衡, 也可以用于搭建正向代理服务器</p>\n<p>正向代理的作用有: </p>\n<ul>\n<li><p>内网服务器访问外网</p>\n</li>\n<li><p>提供 VPN 服务</p>\n</li>\n</ul>\n<h2 id=\"物料准备\"><a href=\"#物料准备\" class=\"headerlink\" title=\"物料准备\"></a>物料准备</h2><p>本文使用环境为 CentOS8 , nginx 原生不直接支持https代理, <code>使用 ngx_http_proxy_connect_module</code> 实现 https 代理</p>\n<ul>\n<li>nginx (此处使用1.19.2) : <a href=\"http://nginx.org/download/nginx-1.19.2.tar.gz\">http://nginx.org/download/nginx-1.19.2.tar.gz</a></li>\n<li>nginx 1.19.2 对应 https 模块 : <a href=\"https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip\">https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip</a></li>\n<li>gcc cpp 编译器</li>\n<li>pcre-devel 与 openssl-devel</li>\n</ul>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><ol>\n<li><p>切换到 nginx 安装目录 <code>cd /opt/nginx</code></p>\n</li>\n<li><p>下载模块 <code>wget https://github.com/chobits/ngx_http_proxy_connect_module/archive/refs/tags/v0.0.2.zip</code></p>\n</li>\n<li><p>解压 <code>unzip v0.0.2.zip</code> </p>\n</li>\n<li><p>下载 nginx <code>wget http://nginx.org/download/nginx-1.19.2.tar.gz</code></p>\n</li>\n<li><p>打入https模块</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> xf nginx-1.19.2.tar.gz\n\n<span class=\"token builtin class-name\">cd</span> nginx-1.19.2\n\npatch -p1 <span class=\"token operator\">&lt;</span> /opt/nginx/ngx_http_proxy_connect_module-0.0.2/patch/proxy_connect_rewrite_1018.patch<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>安装 pcre-devel 与 openssl-devel <code>yum -y install pcre-devel openssl openssl-devel</code></p>\n</li>\n<li><p>安装gcc编译器, 编译安装 nginx </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> gcc cmake <span class=\"token function\">make</span> cmake <span class=\"token function\">unzip</span> ncurses-devel gcc gcc-c++\n\n./configure --prefix<span class=\"token operator\">=</span>/opt/nginx/nginx_app --add-module<span class=\"token operator\">=</span>/opt/nginx/ngx_http_proxy_connect_module-0.0.2\n\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>配置 nginx</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /opt/nginx/nginx_app/conf/\n\n<span class=\"token function\">vim</span> nginx.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">server &#123;\n       listen                           1270;\t\t\t  \t\t#自定义正向代理使用端口\n       server_name                      luoluo;\t\t\t\t#自定义正向代理服务名称\n       # dns resolver used by forward proxying\n    \t# 域名解析服务器\n       resolver                         114.114.114.114;\n       # forward proxy for CONNECT request\n       proxy_connect;\n       # 允许端口，all所有, 此处 80 表示 http 请求所需端口, 443 表示 https\n       proxy_connect_allow              443 80;\n       proxy_connect_connect_timeout    10s;\n       proxy_connect_read_timeout       10s;\n       proxy_connect_send_timeout       10s;\n       location / &#123;\n           proxy_pass $scheme://$http_host$request_uri;\n       &#125;\n   &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>编写 <code>systemd</code>  启动服务</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">></span> /etc/systemd/system/nginx.service <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network-online.target remote-fs.target nss-lookup.target\nWants=network-online.target\n\n[Service]\nType=forking\nPIDFile=/opt/nginx/nginx_app/logs/nginx.pid\nExecStartPre=/opt/nginx/nginx_app/sbin/nginx -t\nExecStart=/opt/nginx/nginx_app/sbin/nginx\nExecReload=/opt/nginx/nginx_app/sbin/nginx -s reload\nExecStop=/bin/kill -s QUIT <span class=\"token variable\">$MAINPID</span>\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>启动 nginx 服务</p>\n<pre class=\"line-numbers language-bach\" data-language=\"bach\"><code class=\"language-bach\">systemctl daemon-reload\nsystemctl start nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>开放防火墙对应端口</p>\n</li>\n</ol>\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><h3 id=\"限定-IP-访问\"><a href=\"#限定-IP-访问\" class=\"headerlink\" title=\"限定 IP 访问\"></a>限定 IP 访问</h3><p>在 <code>nginx.conf</code> 的 <code>server&#123;&#125;</code> 中添加配置</p>\n<ol>\n<li><p>仅允许 123.123.123.123 访问</p>\n <pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">allow 123.123.123.123\ndeny all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>仅禁止 123.123.123.123 访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">deny 123.123.123.123<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>仅允许 123.123.123.1-254 网段访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">allow 123.123.123.1/24\ndeny all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>仅禁止 123.123.123.1-254 网段访问</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">deny 123.123.123.1/24<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>重新加载配置文件 <code>nginx -s reload</code> (或重启服务)</p>\n</li>\n</ol>\n<h3 id=\"限定-用户名-密码-访问\"><a href=\"#限定-用户名-密码-访问\" class=\"headerlink\" title=\"限定 用户名/密码 访问\"></a>限定 用户名/密码 访问</h3><ol>\n<li><p>安装 apacha-htpasswd<br><code>yum install httpd-tools -y</code></p>\n</li>\n<li><p>生成用户名密码 <code>htpasswd -bc 文件路径 用户名 密码</code><br>e.g. <code>htpasswd -bc /opt/nginx/psd root 123456</code></p>\n</li>\n<li><p>在 <code>nginx.conf</code> 的 <code>server&#123;&#125;</code> 中添加配置</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">auth_basic \"input password\";   # 这里是提示信息\n\nauth_basic_user_file /opt/nginx/psd; # 这里填写刚才生成的文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>重新加载配置文件 <code>nginx -s reload</code> (或重启服务)</p>\n</li>\n</ol>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><ul>\n<li>LNMP高版本脚本编译安装的nginx默认支持ipv6, 所以不必纠结nginx -V查看的结果是否有“–with-ipv6”, 如果使用 “–with-ipv6” 参数, 会报 warning :<br><code>./configure: warning: the “–with-ipv6” option is deprecated</code></li>\n</ul>\n"},{"title":"docker-compose 部署 SpringCloud services + nacos +mysql8","date":"2022-06-19T16:00:00.000Z","_content":"\n# docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症\n\n###### about\n\n- nacos-server 版本为 2.1.0 , 完全兼容 spring cloud alibaba 2021.0.1.0 版本对应的 nacos-client:v1.4.3\n- 完整项目见: https://github.com/luoshieryi/springCloud-learn1\n\n## 遇到的问题与解决方案\n\n### 1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入\n\n在该模块 pom.xml 的 spring-boot-maven-plugin 中添加如下配置:\n\n- 没有第一条配置无法编译\n- 没有第二条配置无法被其他包引入\n\n```xml\n<configuration>\n    <layout>NONE</layout>  <!--让maven不打包可执行jar，不扫描项目的main函数-->\n    <classifier>exec</classifier> <!--普通jar和可执行jar不同名，普通jar为xx.jar ， 可执行jar为 xx-exec.jar-->\n</configuration>\n```\n\n### 2. dev 与 prod 环境时不同的 mysql, nacos地址\n\n1. 使用 spring.profiles.active 参数来指定 dev 和 prod 环境\n2. 在 Dockerfile 中运行jar时: ENTRYPOINT java -jar /app/app.jar --spring.profiles.active=prod\n\n### 3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败\n\n- \"Connection refused\"\n- 关联 issue: https://github.com/alibaba/nacos/issues/7298\n\n显式手动设置 hostname : 在 docker-compose.yml 中添加如下配置:\n\n```yaml\nservices:\n  nacos:\n    hostname: nacos\n```\n\n### 4. 在 mysql 中初始化数据库用户和数据库\n\n- 映射sql文件到容器的 /docker-entrypoint-initdb.d/ 文件夹中, 会自动按名称顺序执行语句\n- 可以在 environment 中添加用户( 官网 nacos.io 的示例docker部署采用)\n  ```env\n    MYSQL_USER=nacos\n    MYSQL_PASSWORD=nacos\n  ```\n\n### 5. \"currentServerAddr: http://localhost:8848, err : Connection refused\"\n\n- \"java.net.ConnectException: [NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached\"\n- 关联 issue: https://github.com/alibaba/spring-cloud-alibaba/issues/1599\n\n项目引入了 spring-cloud-starter-alibaba-nacos-config 依赖, 但是又没有使用它提供的动态配置功能\n\n### 6. 关于MySQL 8 的 \"Public Key Retrival\" 错误\n\n添加 allowPublicKeyRetrieval=true 到 jdbc 连接串中\n\n- 详解: https://blog.csdn.net/qq_41287877/article/details/89818095\n\n## 部署步骤与 docker 配置\n\n### 部署\n\n1. 使用 maven 打包父项目\n2. 运行 `docker-compose up -d` \n\n### 配置源码\n\n#### docker-compose.yml\n```yaml\nversion: \"3.8\"\n\nservices:\n  learn1-nacos:\n    container_name: learn1-nacos\n    hostname: learn1-nacos\n    image: nacos/nacos-server:v2.1.0\n    env_file:\n      - ./docker/env/nacos.env\n    volumes:\n      - ./docker/nacos/logs/:/home/nacos/logs\n#      - ./docker/nacos/custom.properties:/home/nacos/init.d/custom.properties\n    ports:\n      - \"8848:8848\"\n      - \"9848:9848\"\n      - \"9555:9555\"\n    depends_on:\n      - learn1-mysql\n    restart: always\n\n  learn1-mysql:\n    container_name: learn1-mysql\n    image: mysql:8.0.29\n    env_file:\n      - ./docker/env/mysql.env\n    volumes:\n      - ./docker/mysql/data/:/var/lib/mysql/\n      - ./docker/mysql/initdb/:/docker-entrypoint-initdb.d/\n    ports:\n      - \"3306:3306\"\n    cap_add:\n      - SYS_NICE\n    restart: always\n\n  learn1-user-service:\n    container_name: learn1-user-service\n    build: ./user-service\n    depends_on:\n      - learn1-nacos\n    restart: always\n\n  learn1-order-service:\n    container_name: learn1-order-service\n    build: ./order-service\n    depends_on:\n      - learn1-nacos\n    restart: always\n\n  learn1-gateway:\n    container_name: learn1-gateway\n    build: ./gateway\n    ports:\n      - \"10010:10010\"\n    depends_on:\n      - learn1-nacos\n    restart: always\n```\n\n#### .env\n\ndocker-compose.yml 中的 env_file 配置的文件\n\n- nacos.env\n    ```yaml\n    PREFER_HOST_MODE=hostname\n    MODE=standalone\n    MYSQL_SERVICE_HOST=mysql\n    MYSQL_SERVICE_DB_NAME=nacos\n    MYSQL_SERVICE_PORT=3306\n    MYSQL_SERVICE_USER=nacos\n    MYSQL_SERVICE_PASSWORD=nacos\n    MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false\n    ```\n- mysql.env\n  ```yaml\n  MYSQL_ROOT_PASSWORD=root\n    MYSQL_USER=nacos\n    MYSQL_PASSWORD=nacos\n  ```\n\n#### Dockerfile\n\n在需要部署的项目下创建 Dockerfile 文件\n\n```yaml\nFROM java:8-alpine\nCOPY ./target/app.jar /app/app.jar\nENTRYPOINT java -jar /app/app.jar --spring.profiles.active=prod\n```\n\n#### sql\n\n- nacos.sql : 在官方提供的建表文件前添加数据库与用户的配置\n  ```sql\n  create database nacos character set utf8 collate utf8_general_ci;\n  grant all on nacos.* to 'nacos'@'%';\n  use nacos;\n  ```\n  - nacos 建表语句: https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql\n\n- 其他项目 sql 见最上方的仓库地址","source":"_posts/docker-compose 部署 SpringCloud services + nacos +mysql8.md","raw":"---\ntitle: docker-compose 部署 SpringCloud services + nacos +mysql8 \ndate: 2022-06-20\ntags: [docker, spring, springcloud, nacos, mysql8]\n---\n\n# docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症\n\n###### about\n\n- nacos-server 版本为 2.1.0 , 完全兼容 spring cloud alibaba 2021.0.1.0 版本对应的 nacos-client:v1.4.3\n- 完整项目见: https://github.com/luoshieryi/springCloud-learn1\n\n## 遇到的问题与解决方案\n\n### 1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入\n\n在该模块 pom.xml 的 spring-boot-maven-plugin 中添加如下配置:\n\n- 没有第一条配置无法编译\n- 没有第二条配置无法被其他包引入\n\n```xml\n<configuration>\n    <layout>NONE</layout>  <!--让maven不打包可执行jar，不扫描项目的main函数-->\n    <classifier>exec</classifier> <!--普通jar和可执行jar不同名，普通jar为xx.jar ， 可执行jar为 xx-exec.jar-->\n</configuration>\n```\n\n### 2. dev 与 prod 环境时不同的 mysql, nacos地址\n\n1. 使用 spring.profiles.active 参数来指定 dev 和 prod 环境\n2. 在 Dockerfile 中运行jar时: ENTRYPOINT java -jar /app/app.jar --spring.profiles.active=prod\n\n### 3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败\n\n- \"Connection refused\"\n- 关联 issue: https://github.com/alibaba/nacos/issues/7298\n\n显式手动设置 hostname : 在 docker-compose.yml 中添加如下配置:\n\n```yaml\nservices:\n  nacos:\n    hostname: nacos\n```\n\n### 4. 在 mysql 中初始化数据库用户和数据库\n\n- 映射sql文件到容器的 /docker-entrypoint-initdb.d/ 文件夹中, 会自动按名称顺序执行语句\n- 可以在 environment 中添加用户( 官网 nacos.io 的示例docker部署采用)\n  ```env\n    MYSQL_USER=nacos\n    MYSQL_PASSWORD=nacos\n  ```\n\n### 5. \"currentServerAddr: http://localhost:8848, err : Connection refused\"\n\n- \"java.net.ConnectException: [NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached\"\n- 关联 issue: https://github.com/alibaba/spring-cloud-alibaba/issues/1599\n\n项目引入了 spring-cloud-starter-alibaba-nacos-config 依赖, 但是又没有使用它提供的动态配置功能\n\n### 6. 关于MySQL 8 的 \"Public Key Retrival\" 错误\n\n添加 allowPublicKeyRetrieval=true 到 jdbc 连接串中\n\n- 详解: https://blog.csdn.net/qq_41287877/article/details/89818095\n\n## 部署步骤与 docker 配置\n\n### 部署\n\n1. 使用 maven 打包父项目\n2. 运行 `docker-compose up -d` \n\n### 配置源码\n\n#### docker-compose.yml\n```yaml\nversion: \"3.8\"\n\nservices:\n  learn1-nacos:\n    container_name: learn1-nacos\n    hostname: learn1-nacos\n    image: nacos/nacos-server:v2.1.0\n    env_file:\n      - ./docker/env/nacos.env\n    volumes:\n      - ./docker/nacos/logs/:/home/nacos/logs\n#      - ./docker/nacos/custom.properties:/home/nacos/init.d/custom.properties\n    ports:\n      - \"8848:8848\"\n      - \"9848:9848\"\n      - \"9555:9555\"\n    depends_on:\n      - learn1-mysql\n    restart: always\n\n  learn1-mysql:\n    container_name: learn1-mysql\n    image: mysql:8.0.29\n    env_file:\n      - ./docker/env/mysql.env\n    volumes:\n      - ./docker/mysql/data/:/var/lib/mysql/\n      - ./docker/mysql/initdb/:/docker-entrypoint-initdb.d/\n    ports:\n      - \"3306:3306\"\n    cap_add:\n      - SYS_NICE\n    restart: always\n\n  learn1-user-service:\n    container_name: learn1-user-service\n    build: ./user-service\n    depends_on:\n      - learn1-nacos\n    restart: always\n\n  learn1-order-service:\n    container_name: learn1-order-service\n    build: ./order-service\n    depends_on:\n      - learn1-nacos\n    restart: always\n\n  learn1-gateway:\n    container_name: learn1-gateway\n    build: ./gateway\n    ports:\n      - \"10010:10010\"\n    depends_on:\n      - learn1-nacos\n    restart: always\n```\n\n#### .env\n\ndocker-compose.yml 中的 env_file 配置的文件\n\n- nacos.env\n    ```yaml\n    PREFER_HOST_MODE=hostname\n    MODE=standalone\n    MYSQL_SERVICE_HOST=mysql\n    MYSQL_SERVICE_DB_NAME=nacos\n    MYSQL_SERVICE_PORT=3306\n    MYSQL_SERVICE_USER=nacos\n    MYSQL_SERVICE_PASSWORD=nacos\n    MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useSSL=false\n    ```\n- mysql.env\n  ```yaml\n  MYSQL_ROOT_PASSWORD=root\n    MYSQL_USER=nacos\n    MYSQL_PASSWORD=nacos\n  ```\n\n#### Dockerfile\n\n在需要部署的项目下创建 Dockerfile 文件\n\n```yaml\nFROM java:8-alpine\nCOPY ./target/app.jar /app/app.jar\nENTRYPOINT java -jar /app/app.jar --spring.profiles.active=prod\n```\n\n#### sql\n\n- nacos.sql : 在官方提供的建表文件前添加数据库与用户的配置\n  ```sql\n  create database nacos character set utf8 collate utf8_general_ci;\n  grant all on nacos.* to 'nacos'@'%';\n  use nacos;\n  ```\n  - nacos 建表语句: https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql\n\n- 其他项目 sql 见最上方的仓库地址","slug":"docker-compose 部署 SpringCloud services + nacos +mysql8","published":1,"updated":"2022-06-20T14:14:44.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl4mtmk6l0005swu7fg848i0i","content":"<h1 id=\"docker-compose-一键部署-SpringCloud-services-nacos-mysql8-的疑难杂症\"><a href=\"#docker-compose-一键部署-SpringCloud-services-nacos-mysql8-的疑难杂症\" class=\"headerlink\" title=\"docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症\"></a>docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症</h1><h6 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h6><ul>\n<li>nacos-server 版本为 2.1.0 , 完全兼容 spring cloud alibaba 2021.0.1.0 版本对应的 nacos-client:v1.4.3</li>\n<li>完整项目见: <a href=\"https://github.com/luoshieryi/springCloud-learn1\">https://github.com/luoshieryi/springCloud-learn1</a></li>\n</ul>\n<h2 id=\"遇到的问题与解决方案\"><a href=\"#遇到的问题与解决方案\" class=\"headerlink\" title=\"遇到的问题与解决方案\"></a>遇到的问题与解决方案</h2><h3 id=\"1-抽象出的-feign-client-子模块没有-Application-java-类-导致无法编译-引入\"><a href=\"#1-抽象出的-feign-client-子模块没有-Application-java-类-导致无法编译-引入\" class=\"headerlink\" title=\"1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入\"></a>1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入</h3><p>在该模块 pom.xml 的 spring-boot-maven-plugin 中添加如下配置:</p>\n<ul>\n<li>没有第一条配置无法编译</li>\n<li>没有第二条配置无法被其他包引入</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><span class=\"token punctuation\">></span></span>NONE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!--让maven不打包可执行jar，不扫描项目的main函数--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>classifier</span><span class=\"token punctuation\">></span></span>exec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>classifier</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--普通jar和可执行jar不同名，普通jar为xx.jar ， 可执行jar为 xx-exec.jar--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-dev-与-prod-环境时不同的-mysql-nacos地址\"><a href=\"#2-dev-与-prod-环境时不同的-mysql-nacos地址\" class=\"headerlink\" title=\"2. dev 与 prod 环境时不同的 mysql, nacos地址\"></a>2. dev 与 prod 环境时不同的 mysql, nacos地址</h3><ol>\n<li>使用 spring.profiles.active 参数来指定 dev 和 prod 环境</li>\n<li>在 Dockerfile 中运行jar时: ENTRYPOINT java -jar /app/app.jar –spring.profiles.active=prod</li>\n</ol>\n<h3 id=\"3-同一个-docker-compose-中-通过-hostname-访问-nacos-失败\"><a href=\"#3-同一个-docker-compose-中-通过-hostname-访问-nacos-失败\" class=\"headerlink\" title=\"3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败\"></a>3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败</h3><ul>\n<li>“Connection refused”</li>\n<li>关联 issue: <a href=\"https://github.com/alibaba/nacos/issues/7298\">https://github.com/alibaba/nacos/issues/7298</a></li>\n</ul>\n<p>显式手动设置 hostname : 在 docker-compose.yml 中添加如下配置:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-在-mysql-中初始化数据库用户和数据库\"><a href=\"#4-在-mysql-中初始化数据库用户和数据库\" class=\"headerlink\" title=\"4. 在 mysql 中初始化数据库用户和数据库\"></a>4. 在 mysql 中初始化数据库用户和数据库</h3><ul>\n<li>映射sql文件到容器的 /docker-entrypoint-initdb.d/ 文件夹中, 会自动按名称顺序执行语句</li>\n<li>可以在 environment 中添加用户( 官网 nacos.io 的示例docker部署采用)<pre class=\"line-numbers language-env\" data-language=\"env\"><code class=\"language-env\">MYSQL_USER&#x3D;nacos\nMYSQL_PASSWORD&#x3D;nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-“currentServerAddr-http-localhost-8848-err-Connection-refused”\"><a href=\"#5-“currentServerAddr-http-localhost-8848-err-Connection-refused”\" class=\"headerlink\" title=\"5. “currentServerAddr: http://localhost:8848, err : Connection refused”\"></a>5. “currentServerAddr: <a href=\"http://localhost:8848/\">http://localhost:8848</a>, err : Connection refused”</h3><ul>\n<li>“java.net.ConnectException: [NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached”</li>\n<li>关联 issue: <a href=\"https://github.com/alibaba/spring-cloud-alibaba/issues/1599\">https://github.com/alibaba/spring-cloud-alibaba/issues/1599</a></li>\n</ul>\n<p>项目引入了 spring-cloud-starter-alibaba-nacos-config 依赖, 但是又没有使用它提供的动态配置功能</p>\n<h3 id=\"6-关于MySQL-8-的-“Public-Key-Retrival”-错误\"><a href=\"#6-关于MySQL-8-的-“Public-Key-Retrival”-错误\" class=\"headerlink\" title=\"6. 关于MySQL 8 的 “Public Key Retrival” 错误\"></a>6. 关于MySQL 8 的 “Public Key Retrival” 错误</h3><p>添加 allowPublicKeyRetrieval=true 到 jdbc 连接串中</p>\n<ul>\n<li>详解: <a href=\"https://blog.csdn.net/qq_41287877/article/details/89818095\">https://blog.csdn.net/qq_41287877/article/details/89818095</a></li>\n</ul>\n<h2 id=\"部署步骤与-docker-配置\"><a href=\"#部署步骤与-docker-配置\" class=\"headerlink\" title=\"部署步骤与 docker 配置\"></a>部署步骤与 docker 配置</h2><h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><ol>\n<li>使用 maven 打包父项目</li>\n<li>运行 <code>docker-compose up -d</code> </li>\n</ol>\n<h3 id=\"配置源码\"><a href=\"#配置源码\" class=\"headerlink\" title=\"配置源码\"></a>配置源码</h3><h4 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.8\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">learn1-nacos</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nacos/nacos<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span>v2.1.0\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/env/nacos.env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/nacos/logs/<span class=\"token punctuation\">:</span>/home/nacos/logs\n<span class=\"token comment\">#      - ./docker/nacos/custom.properties:/home/nacos/init.d/custom.properties</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8848:8848\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9848:9848\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9555:9555\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.0.29\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/env/mysql.env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/mysql/data/<span class=\"token punctuation\">:</span>/var/lib/mysql/\n      <span class=\"token punctuation\">-</span> ./docker/mysql/initdb/<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306:3306\"</span>\n    <span class=\"token key atrule\">cap_add</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> SYS_NICE\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-user-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./user<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-order-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>order<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./order<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-gateway</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>gateway\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./gateway\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"10010:10010\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\".env\"></a>.env</h4><p>docker-compose.yml 中的 env_file 配置的文件</p>\n<ul>\n<li>nacos.env  <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">PREFER_HOST_MODE=hostname\nMODE=standalone\nMYSQL_SERVICE_HOST=mysql\nMYSQL_SERVICE_DB_NAME=nacos\nMYSQL_SERVICE_PORT=3306\nMYSQL_SERVICE_USER=nacos\nMYSQL_SERVICE_PASSWORD=nacos\nMYSQL_SERVICE_DB_PARAM=characterEncoding=utf8<span class=\"token important\">&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>mysql.env<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">MYSQL_ROOT_PASSWORD=root\n  MYSQL_USER=nacos\n  MYSQL_PASSWORD=nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><p>在需要部署的项目下创建 Dockerfile 文件</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">FROM java<span class=\"token punctuation\">:</span>8<span class=\"token punctuation\">-</span>alpine\nCOPY ./target/app.jar /app/app.jar\nENTRYPOINT java <span class=\"token punctuation\">-</span>jar /app/app.jar <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>spring.profiles.active=prod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"sql\"><a href=\"#sql\" class=\"headerlink\" title=\"sql\"></a>sql</h4><ul>\n<li><p>nacos.sql : 在官方提供的建表文件前添加数据库与用户的配置</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> nacos <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8 <span class=\"token keyword\">collate</span> utf8_general_ci<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">on</span> nacos<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'nacos'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> nacos<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>nacos 建表语句: <a href=\"https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql\">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</a></li>\n</ul>\n</li>\n<li><p>其他项目 sql 见最上方的仓库地址</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"docker-compose-一键部署-SpringCloud-services-nacos-mysql8-的疑难杂症\"><a href=\"#docker-compose-一键部署-SpringCloud-services-nacos-mysql8-的疑难杂症\" class=\"headerlink\" title=\"docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症\"></a>docker-compose 一键部署 SpringCloud services + nacos +mysql8 的疑难杂症</h1><h6 id=\"about\"><a href=\"#about\" class=\"headerlink\" title=\"about\"></a>about</h6><ul>\n<li>nacos-server 版本为 2.1.0 , 完全兼容 spring cloud alibaba 2021.0.1.0 版本对应的 nacos-client:v1.4.3</li>\n<li>完整项目见: <a href=\"https://github.com/luoshieryi/springCloud-learn1\">https://github.com/luoshieryi/springCloud-learn1</a></li>\n</ul>\n<h2 id=\"遇到的问题与解决方案\"><a href=\"#遇到的问题与解决方案\" class=\"headerlink\" title=\"遇到的问题与解决方案\"></a>遇到的问题与解决方案</h2><h3 id=\"1-抽象出的-feign-client-子模块没有-Application-java-类-导致无法编译-引入\"><a href=\"#1-抽象出的-feign-client-子模块没有-Application-java-类-导致无法编译-引入\" class=\"headerlink\" title=\"1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入\"></a>1. 抽象出的 feign-client 子模块没有 Application.java 类, 导致无法编译/引入</h3><p>在该模块 pom.xml 的 spring-boot-maven-plugin 中添加如下配置:</p>\n<ul>\n<li>没有第一条配置无法编译</li>\n<li>没有第二条配置无法被其他包引入</li>\n</ul>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><span class=\"token punctuation\">></span></span>NONE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!--让maven不打包可执行jar，不扫描项目的main函数--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>classifier</span><span class=\"token punctuation\">></span></span>exec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>classifier</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&lt;!--普通jar和可执行jar不同名，普通jar为xx.jar ， 可执行jar为 xx-exec.jar--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-dev-与-prod-环境时不同的-mysql-nacos地址\"><a href=\"#2-dev-与-prod-环境时不同的-mysql-nacos地址\" class=\"headerlink\" title=\"2. dev 与 prod 环境时不同的 mysql, nacos地址\"></a>2. dev 与 prod 环境时不同的 mysql, nacos地址</h3><ol>\n<li>使用 spring.profiles.active 参数来指定 dev 和 prod 环境</li>\n<li>在 Dockerfile 中运行jar时: ENTRYPOINT java -jar /app/app.jar –spring.profiles.active=prod</li>\n</ol>\n<h3 id=\"3-同一个-docker-compose-中-通过-hostname-访问-nacos-失败\"><a href=\"#3-同一个-docker-compose-中-通过-hostname-访问-nacos-失败\" class=\"headerlink\" title=\"3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败\"></a>3. 同一个 docker-compose 中, 通过 hostname 访问 nacos 失败</h3><ul>\n<li>“Connection refused”</li>\n<li>关联 issue: <a href=\"https://github.com/alibaba/nacos/issues/7298\">https://github.com/alibaba/nacos/issues/7298</a></li>\n</ul>\n<p>显式手动设置 hostname : 在 docker-compose.yml 中添加如下配置:</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-在-mysql-中初始化数据库用户和数据库\"><a href=\"#4-在-mysql-中初始化数据库用户和数据库\" class=\"headerlink\" title=\"4. 在 mysql 中初始化数据库用户和数据库\"></a>4. 在 mysql 中初始化数据库用户和数据库</h3><ul>\n<li>映射sql文件到容器的 /docker-entrypoint-initdb.d/ 文件夹中, 会自动按名称顺序执行语句</li>\n<li>可以在 environment 中添加用户( 官网 nacos.io 的示例docker部署采用)<pre class=\"line-numbers language-env\" data-language=\"env\"><code class=\"language-env\">MYSQL_USER&#x3D;nacos\nMYSQL_PASSWORD&#x3D;nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"5-“currentServerAddr-http-localhost-8848-err-Connection-refused”\"><a href=\"#5-“currentServerAddr-http-localhost-8848-err-Connection-refused”\" class=\"headerlink\" title=\"5. “currentServerAddr: http://localhost:8848, err : Connection refused”\"></a>5. “currentServerAddr: <a href=\"http://localhost:8848/\">http://localhost:8848</a>, err : Connection refused”</h3><ul>\n<li>“java.net.ConnectException: [NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached”</li>\n<li>关联 issue: <a href=\"https://github.com/alibaba/spring-cloud-alibaba/issues/1599\">https://github.com/alibaba/spring-cloud-alibaba/issues/1599</a></li>\n</ul>\n<p>项目引入了 spring-cloud-starter-alibaba-nacos-config 依赖, 但是又没有使用它提供的动态配置功能</p>\n<h3 id=\"6-关于MySQL-8-的-“Public-Key-Retrival”-错误\"><a href=\"#6-关于MySQL-8-的-“Public-Key-Retrival”-错误\" class=\"headerlink\" title=\"6. 关于MySQL 8 的 “Public Key Retrival” 错误\"></a>6. 关于MySQL 8 的 “Public Key Retrival” 错误</h3><p>添加 allowPublicKeyRetrieval=true 到 jdbc 连接串中</p>\n<ul>\n<li>详解: <a href=\"https://blog.csdn.net/qq_41287877/article/details/89818095\">https://blog.csdn.net/qq_41287877/article/details/89818095</a></li>\n</ul>\n<h2 id=\"部署步骤与-docker-配置\"><a href=\"#部署步骤与-docker-配置\" class=\"headerlink\" title=\"部署步骤与 docker 配置\"></a>部署步骤与 docker 配置</h2><h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><ol>\n<li>使用 maven 打包父项目</li>\n<li>运行 <code>docker-compose up -d</code> </li>\n</ol>\n<h3 id=\"配置源码\"><a href=\"#配置源码\" class=\"headerlink\" title=\"配置源码\"></a>配置源码</h3><h4 id=\"docker-compose-yml\"><a href=\"#docker-compose-yml\" class=\"headerlink\" title=\"docker-compose.yml\"></a>docker-compose.yml</h4><pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.8\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">learn1-nacos</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nacos/nacos<span class=\"token punctuation\">-</span>server<span class=\"token punctuation\">:</span>v2.1.0\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/env/nacos.env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/nacos/logs/<span class=\"token punctuation\">:</span>/home/nacos/logs\n<span class=\"token comment\">#      - ./docker/nacos/custom.properties:/home/nacos/init.d/custom.properties</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8848:8848\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9848:9848\"</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"9555:9555\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-mysql</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>mysql\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.0.29\n    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/env/mysql.env\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ./docker/mysql/data/<span class=\"token punctuation\">:</span>/var/lib/mysql/\n      <span class=\"token punctuation\">-</span> ./docker/mysql/initdb/<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"3306:3306\"</span>\n    <span class=\"token key atrule\">cap_add</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> SYS_NICE\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-user-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>user<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./user<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-order-service</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>order<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./order<span class=\"token punctuation\">-</span>service\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n\n  <span class=\"token key atrule\">learn1-gateway</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> learn1<span class=\"token punctuation\">-</span>gateway\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./gateway\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"10010:10010\"</span>\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> learn1<span class=\"token punctuation\">-</span>nacos\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\".env\"></a>.env</h4><p>docker-compose.yml 中的 env_file 配置的文件</p>\n<ul>\n<li>nacos.env  <pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">PREFER_HOST_MODE=hostname\nMODE=standalone\nMYSQL_SERVICE_HOST=mysql\nMYSQL_SERVICE_DB_NAME=nacos\nMYSQL_SERVICE_PORT=3306\nMYSQL_SERVICE_USER=nacos\nMYSQL_SERVICE_PASSWORD=nacos\nMYSQL_SERVICE_DB_PARAM=characterEncoding=utf8<span class=\"token important\">&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>mysql.env<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">MYSQL_ROOT_PASSWORD=root\n  MYSQL_USER=nacos\n  MYSQL_PASSWORD=nacos<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h4 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h4><p>在需要部署的项目下创建 Dockerfile 文件</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\">FROM java<span class=\"token punctuation\">:</span>8<span class=\"token punctuation\">-</span>alpine\nCOPY ./target/app.jar /app/app.jar\nENTRYPOINT java <span class=\"token punctuation\">-</span>jar /app/app.jar <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>spring.profiles.active=prod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"sql\"><a href=\"#sql\" class=\"headerlink\" title=\"sql\"></a>sql</h4><ul>\n<li><p>nacos.sql : 在官方提供的建表文件前添加数据库与用户的配置</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> nacos <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8 <span class=\"token keyword\">collate</span> utf8_general_ci<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">on</span> nacos<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'nacos'</span><span class=\"token variable\">@'%'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> nacos<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>nacos 建表语句: <a href=\"https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql\">https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql</a></li>\n</ul>\n</li>\n<li><p>其他项目 sql 见最上方的仓库地址</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl4h1txop0003osu78jbb1fzq","tag_id":"cl4h1txoy000kosu79n050jrd","_id":"cl4h1txoz000rosu77cyn4qrh"},{"post_id":"cl4h1txop0003osu78jbb1fzq","tag_id":"cl4h1txoy000nosu7hrsxhup9","_id":"cl4h1txoz000sosu70yi26qaz"},{"post_id":"cl4h1txor0006osu73xi60b3m","tag_id":"cl4h1txoy000kosu79n050jrd","_id":"cl4h1txp0000vosu741grdkjb"},{"post_id":"cl4h1txor0006osu73xi60b3m","tag_id":"cl4h1txoz000tosu7a3qq5v3w","_id":"cl4h1txp0000wosu7ea0abja9"},{"post_id":"cl4h1txos0008osu77f8n17dr","tag_id":"cl4h1txp0000uosu75myx1wjh","_id":"cl4h1txp1000zosu7ab007b8y"},{"post_id":"cl4h1txos0008osu77f8n17dr","tag_id":"cl4h1txp0000xosu74yve7x8r","_id":"cl4h1txp10010osu73wwr3exa"},{"post_id":"cl4h1txot000aosu78crx630n","tag_id":"cl4h1txoy000kosu79n050jrd","_id":"cl4h1txp10012osu77tqi7rfl"},{"post_id":"cl4h1txou000dosu7dnav70it","tag_id":"cl4h1txp0000xosu74yve7x8r","_id":"cl4h1txp10014osu775uk5ed3"},{"post_id":"cl4h1txov000eosu77geu2dde","tag_id":"cl4h1txp10013osu78mqp6ynk","_id":"cl4h1txp40018osu7ga135bvd"},{"post_id":"cl4h1txov000eosu77geu2dde","tag_id":"cl4h1txp10015osu7dhuze4d0","_id":"cl4h1txp40019osu751ura227"},{"post_id":"cl4h1txov000eosu77geu2dde","tag_id":"cl4h1txoy000kosu79n050jrd","_id":"cl4h1txp4001bosu75axs9viq"},{"post_id":"cl4h1txow000gosu7fp8ra65e","tag_id":"cl4h1txp20017osu774ry5oh2","_id":"cl4h1txp4001dosu7blca5sop"},{"post_id":"cl4h1txow000gosu7fp8ra65e","tag_id":"cl4h1txp4001aosu70k1320mg","_id":"cl4h1txp4001eosu78glp6rtr"},{"post_id":"cl4h1txow000hosu748zxeja6","tag_id":"cl4h1txp4001cosu7f7lz52cf","_id":"cl4h1txp5001josu79g8aa5vd"},{"post_id":"cl4h1txow000hosu748zxeja6","tag_id":"cl4h1txp4001fosu7gaview84","_id":"cl4h1txp5001kosu7f9qd9f3g"},{"post_id":"cl4h1txow000hosu748zxeja6","tag_id":"cl4h1txp5001gosu7214ydiif","_id":"cl4h1txp5001mosu71qrd282k"},{"post_id":"cl4h1txow000hosu748zxeja6","tag_id":"cl4h1txp5001hosu79n061jrr","_id":"cl4h1txp5001nosu7e0gr5d3z"},{"post_id":"cl4h1txox000josu7e4aiet1l","tag_id":"cl4h1txoy000kosu79n050jrd","_id":"cl4h1txp6001qosu72tyqdwe7"},{"post_id":"cl4h1txox000josu7e4aiet1l","tag_id":"cl4h1txp10015osu7dhuze4d0","_id":"cl4h1txp6001rosu7g1em8ban"},{"post_id":"cl4h1txox000josu7e4aiet1l","tag_id":"cl4h1txp10013osu78mqp6ynk","_id":"cl4h1txp6001sosu78qb39ein"},{"post_id":"cl4h1txox000josu7e4aiet1l","tag_id":"cl4h1txp6001posu7ful35yyz","_id":"cl4h1txp6001tosu7f94p2ee6"},{"post_id":"cl4mtmk6a0000swu78mbqa5d8","tag_id":"cl4h1txoq0004osu7f44gdwzv","_id":"cl4mtmk6f0001swu7givrczwr"},{"post_id":"cl4mtmk6a0000swu78mbqa5d8","tag_id":"cl4h1txou000bosu7ak0h657g","_id":"cl4mtmk6f0002swu7bete1gar"},{"post_id":"cl4mtmk6a0000swu78mbqa5d8","tag_id":"cl4h1txow000fosu7awnwdfwy","_id":"cl4mtmk6f0003swu7c3to00qd"},{"post_id":"cl4mtmk6a0000swu78mbqa5d8","tag_id":"cl4h1txox000iosu75thd6jtp","_id":"cl4mtmk6f0004swu7adba0d8s"},{"post_id":"cl4mtmk6l0005swu7fg848i0i","tag_id":"cl4mtmk6s0006swu71krk5rvd","_id":"cl4mtmk6w000aswu7d38gau2j"},{"post_id":"cl4mtmk6l0005swu7fg848i0i","tag_id":"cl4h1txp10015osu7dhuze4d0","_id":"cl4mtmk6w000bswu71y5kgymj"},{"post_id":"cl4mtmk6l0005swu7fg848i0i","tag_id":"cl4mtmk6u0007swu7gden7who","_id":"cl4mtmk6w000cswu7htpl3wy6"},{"post_id":"cl4mtmk6l0005swu7fg848i0i","tag_id":"cl4mtmk6v0008swu71mnr1nt1","_id":"cl4mtmk6w000dswu78i4p6qiv"},{"post_id":"cl4mtmk6l0005swu7fg848i0i","tag_id":"cl4mtmk6v0009swu7afn03f0l","_id":"cl4mtmk6w000eswu737kb3rr5"}],"Tag":[{"name":"linux","_id":"cl4h1txoq0004osu7f44gdwzv"},{"name":"nginx","_id":"cl4h1txou000bosu7ak0h657g"},{"name":"centos","_id":"cl4h1txow000fosu7awnwdfwy"},{"name":"proxy","_id":"cl4h1txox000iosu75thd6jtp"},{"name":"java","_id":"cl4h1txoy000kosu79n050jrd"},{"name":"thread","_id":"cl4h1txoy000nosu7hrsxhup9"},{"name":"error","_id":"cl4h1txoz000tosu7a3qq5v3w"},{"name":"mysql","_id":"cl4h1txp0000uosu75myx1wjh"},{"name":"sql","_id":"cl4h1txp0000xosu74yve7x8r"},{"name":"springboot","_id":"cl4h1txp10013osu78mqp6ynk"},{"name":"spring","_id":"cl4h1txp10015osu7dhuze4d0"},{"name":"ps","_id":"cl4h1txp20017osu774ry5oh2"},{"name":"memo","_id":"cl4h1txp4001aosu70k1320mg"},{"name":"python","_id":"cl4h1txp4001cosu7f7lz52cf"},{"name":"flask","_id":"cl4h1txp4001fosu7gaview84"},{"name":"http","_id":"cl4h1txp5001gosu7214ydiif"},{"name":"cors","_id":"cl4h1txp5001hosu79n061jrr"},{"name":"reflect","_id":"cl4h1txp6001posu7ful35yyz"},{"name":"docker","_id":"cl4mtmk6s0006swu71krk5rvd"},{"name":"springcloud","_id":"cl4mtmk6u0007swu7gden7who"},{"name":"nacos","_id":"cl4mtmk6v0008swu71mnr1nt1"},{"name":"mysql8","_id":"cl4mtmk6v0009swu7afn03f0l"}]}}